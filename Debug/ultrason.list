
ultrason.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a94  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08007c24  08007c24  00008c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cfc  08007cfc  0000914c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007cfc  08007cfc  00008cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d04  08007d04  0000914c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d04  08007d04  00008d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d08  08007d08  00008d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  08007d0c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000914c  2**0
                  CONTENTS
 10 .bss          00001d98  2000014c  2000014c  0000914c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001ee4  20001ee4  0000914c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000914c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000199e9  00000000  00000000  0000917c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005019  00000000  00000000  00022b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001308  00000000  00000000  00027b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eaa  00000000  00000000  00028e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002365a  00000000  00000000  00029d32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012bf8  00000000  00000000  0004d38c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce0d8  00000000  00000000  0005ff84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      0000001e  00000000  00000000  0012e05c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044fc  00000000  00000000  0012e07c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000001b1  00000000  00000000  00132578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loclists 00001e94  00000000  00000000  00132729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <strlen>:
 8000190:	4603      	mov	r3, r0
 8000192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000196:	2a00      	cmp	r2, #0
 8000198:	d1fb      	bne.n	8000192 <strlen+0x2>
 800019a:	1a18      	subs	r0, r3, r0
 800019c:	3801      	subs	r0, #1
 800019e:	4770      	bx	lr

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000254:	f000 b80c 	b.w	8000270 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f007 fb76 	bl	8007950 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__aeabi_idiv0>:
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop

08000274 <__do_global_dtors_aux>:
 8000274:	b510      	push	{r4, lr}
 8000276:	4c05      	ldr	r4, [pc, #20]	@ (800028c <__do_global_dtors_aux+0x18>)
 8000278:	7823      	ldrb	r3, [r4, #0]
 800027a:	b933      	cbnz	r3, 800028a <__do_global_dtors_aux+0x16>
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <__do_global_dtors_aux+0x1c>)
 800027e:	b113      	cbz	r3, 8000286 <__do_global_dtors_aux+0x12>
 8000280:	4804      	ldr	r0, [pc, #16]	@ (8000294 <__do_global_dtors_aux+0x20>)
 8000282:	f3af 8000 	nop.w
 8000286:	2301      	movs	r3, #1
 8000288:	7023      	strb	r3, [r4, #0]
 800028a:	bd10      	pop	{r4, pc}
 800028c:	2000014c 	.word	0x2000014c
 8000290:	00000000 	.word	0x00000000
 8000294:	08007c0c 	.word	0x08007c0c

08000298 <frame_dummy>:
 8000298:	b508      	push	{r3, lr}
 800029a:	4b03      	ldr	r3, [pc, #12]	@ (80002a8 <frame_dummy+0x10>)
 800029c:	b11b      	cbz	r3, 80002a6 <frame_dummy+0xe>
 800029e:	4903      	ldr	r1, [pc, #12]	@ (80002ac <frame_dummy+0x14>)
 80002a0:	4803      	ldr	r0, [pc, #12]	@ (80002b0 <frame_dummy+0x18>)
 80002a2:	f3af 8000 	nop.w
 80002a6:	bd08      	pop	{r3, pc}
 80002a8:	00000000 	.word	0x00000000
 80002ac:	20000150 	.word	0x20000150
 80002b0:	08007c0c 	.word	0x08007c0c

080002b4 <delay_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us(uint16_t us)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim10, 0); 
 80002be:	4b0a      	ldr	r3, [pc, #40]	@ (80002e8 <delay_us+0x34>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	2200      	movs	r2, #0
 80002c4:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start(&htim10); 
 80002c6:	4808      	ldr	r0, [pc, #32]	@ (80002e8 <delay_us+0x34>)
 80002c8:	f002 fd0e 	bl	8002ce8 <HAL_TIM_Base_Start>
    while (__HAL_TIM_GET_COUNTER(&htim10) < us); 
 80002cc:	bf00      	nop
 80002ce:	4b06      	ldr	r3, [pc, #24]	@ (80002e8 <delay_us+0x34>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80002d4:	88fb      	ldrh	r3, [r7, #6]
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d3f9      	bcc.n	80002ce <delay_us+0x1a>
    HAL_TIM_Base_Stop(&htim10);
 80002da:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <delay_us+0x34>)
 80002dc:	f002 fd6c 	bl	8002db8 <HAL_TIM_Base_Stop>
}
 80002e0:	bf00      	nop
 80002e2:	3708      	adds	r7, #8
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	20000168 	.word	0x20000168

080002ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b096      	sub	sp, #88	@ 0x58
 80002f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f2:	f000 fa71 	bl	80007d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f6:	f000 f873 	bl	80003e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fa:	f000 f8fd 	bl	80004f8 <MX_GPIO_Init>
  MX_TIM10_Init();
 80002fe:	f000 f8d7 	bl	80004b0 <MX_TIM10_Init>
  MX_USB_DEVICE_Init();
 8000302:	f006 f965 	bl	80065d0 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000306:	2201      	movs	r2, #1
 8000308:	2101      	movs	r1, #1
 800030a:	4830      	ldr	r0, [pc, #192]	@ (80003cc <main+0xe0>)
 800030c:	f000 fdc0 	bl	8000e90 <HAL_GPIO_WritePin>
    delay_us(10);
 8000310:	200a      	movs	r0, #10
 8000312:	f7ff ffcf 	bl	80002b4 <delay_us>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); 
 8000316:	2200      	movs	r2, #0
 8000318:	2101      	movs	r1, #1
 800031a:	482c      	ldr	r0, [pc, #176]	@ (80003cc <main+0xe0>)
 800031c:	f000 fdb8 	bl	8000e90 <HAL_GPIO_WritePin>
    
    __HAL_TIM_SET_COUNTER(&htim10, 0);
 8000320:	4b2b      	ldr	r3, [pc, #172]	@ (80003d0 <main+0xe4>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2200      	movs	r2, #0
 8000326:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_Base_Start(&htim10);
 8000328:	4829      	ldr	r0, [pc, #164]	@ (80003d0 <main+0xe4>)
 800032a:	f002 fcdd 	bl	8002ce8 <HAL_TIM_Base_Start>
    
    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET);
 800032e:	bf00      	nop
 8000330:	2102      	movs	r1, #2
 8000332:	4826      	ldr	r0, [pc, #152]	@ (80003cc <main+0xe0>)
 8000334:	f000 fd94 	bl	8000e60 <HAL_GPIO_ReadPin>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d0f8      	beq.n	8000330 <main+0x44>

    startTime = __HAL_TIM_GET_COUNTER(&htim10);
 800033e:	4b24      	ldr	r3, [pc, #144]	@ (80003d0 <main+0xe4>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000344:	64fb      	str	r3, [r7, #76]	@ 0x4c
    sprintf(usbMessage, "Start time: %lu", startTime);
 8000346:	463b      	mov	r3, r7
 8000348:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800034a:	4922      	ldr	r1, [pc, #136]	@ (80003d4 <main+0xe8>)
 800034c:	4618      	mov	r0, r3
 800034e:	f006 fe59 	bl	8007004 <siprintf>
    CDC_Transmit_FS((uint8_t*)usbMessage, strlen(usbMessage));
 8000352:	463b      	mov	r3, r7
 8000354:	4618      	mov	r0, r3
 8000356:	f7ff ff1b 	bl	8000190 <strlen>
 800035a:	4603      	mov	r3, r0
 800035c:	b29a      	uxth	r2, r3
 800035e:	463b      	mov	r3, r7
 8000360:	4611      	mov	r1, r2
 8000362:	4618      	mov	r0, r3
 8000364:	f006 f9f2 	bl	800674c <CDC_Transmit_FS>

    while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET);
 8000368:	bf00      	nop
 800036a:	2102      	movs	r1, #2
 800036c:	4817      	ldr	r0, [pc, #92]	@ (80003cc <main+0xe0>)
 800036e:	f000 fd77 	bl	8000e60 <HAL_GPIO_ReadPin>
 8000372:	4603      	mov	r3, r0
 8000374:	2b01      	cmp	r3, #1
 8000376:	d0f8      	beq.n	800036a <main+0x7e>

    endTime = __HAL_TIM_GET_COUNTER(&htim10);
 8000378:	4b15      	ldr	r3, [pc, #84]	@ (80003d0 <main+0xe4>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800037e:	64bb      	str	r3, [r7, #72]	@ 0x48
    
    HAL_TIM_Base_Stop(&htim10);
 8000380:	4813      	ldr	r0, [pc, #76]	@ (80003d0 <main+0xe4>)
 8000382:	f002 fd19 	bl	8002db8 <HAL_TIM_Base_Stop>
    
    timeElapsed = endTime - startTime;
 8000386:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000388:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800038a:	1ad3      	subs	r3, r2, r3
 800038c:	647b      	str	r3, [r7, #68]	@ 0x44
    distanceCM = timeElapsed / 58;
 800038e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000390:	4a11      	ldr	r2, [pc, #68]	@ (80003d8 <main+0xec>)
 8000392:	fba2 2303 	umull	r2, r3, r2, r3
 8000396:	095b      	lsrs	r3, r3, #5
 8000398:	643b      	str	r3, [r7, #64]	@ 0x40
    
    sprintf(usbMessage, "\r\nEnd time: %lu\r\nTime elapsed: %lu us\r\nDistance: %lu cm\r\n", 
 800039a:	4638      	mov	r0, r7
 800039c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800039e:	9300      	str	r3, [sp, #0]
 80003a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80003a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80003a4:	490d      	ldr	r1, [pc, #52]	@ (80003dc <main+0xf0>)
 80003a6:	f006 fe2d 	bl	8007004 <siprintf>
            endTime, timeElapsed, distanceCM);
    CDC_Transmit_FS((uint8_t*)usbMessage, strlen(usbMessage));
 80003aa:	463b      	mov	r3, r7
 80003ac:	4618      	mov	r0, r3
 80003ae:	f7ff feef 	bl	8000190 <strlen>
 80003b2:	4603      	mov	r3, r0
 80003b4:	b29a      	uxth	r2, r3
 80003b6:	463b      	mov	r3, r7
 80003b8:	4611      	mov	r1, r2
 80003ba:	4618      	mov	r0, r3
 80003bc:	f006 f9c6 	bl	800674c <CDC_Transmit_FS>
    
    HAL_Delay(500);
 80003c0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80003c4:	f000 fa7a 	bl	80008bc <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80003c8:	e79d      	b.n	8000306 <main+0x1a>
 80003ca:	bf00      	nop
 80003cc:	40020000 	.word	0x40020000
 80003d0:	20000168 	.word	0x20000168
 80003d4:	08007c24 	.word	0x08007c24
 80003d8:	8d3dcb09 	.word	0x8d3dcb09
 80003dc:	08007c34 	.word	0x08007c34

080003e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b094      	sub	sp, #80	@ 0x50
 80003e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003e6:	f107 0320 	add.w	r3, r7, #32
 80003ea:	2230      	movs	r2, #48	@ 0x30
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f006 fe2a 	bl	8007048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003f4:	f107 030c 	add.w	r3, r7, #12
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	605a      	str	r2, [r3, #4]
 80003fe:	609a      	str	r2, [r3, #8]
 8000400:	60da      	str	r2, [r3, #12]
 8000402:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000404:	2300      	movs	r3, #0
 8000406:	60bb      	str	r3, [r7, #8]
 8000408:	4b27      	ldr	r3, [pc, #156]	@ (80004a8 <SystemClock_Config+0xc8>)
 800040a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800040c:	4a26      	ldr	r2, [pc, #152]	@ (80004a8 <SystemClock_Config+0xc8>)
 800040e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000412:	6413      	str	r3, [r2, #64]	@ 0x40
 8000414:	4b24      	ldr	r3, [pc, #144]	@ (80004a8 <SystemClock_Config+0xc8>)
 8000416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000418:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800041c:	60bb      	str	r3, [r7, #8]
 800041e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000420:	2300      	movs	r3, #0
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	4b21      	ldr	r3, [pc, #132]	@ (80004ac <SystemClock_Config+0xcc>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a20      	ldr	r2, [pc, #128]	@ (80004ac <SystemClock_Config+0xcc>)
 800042a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800042e:	6013      	str	r3, [r2, #0]
 8000430:	4b1e      	ldr	r3, [pc, #120]	@ (80004ac <SystemClock_Config+0xcc>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000438:	607b      	str	r3, [r7, #4]
 800043a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800043c:	2301      	movs	r3, #1
 800043e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000440:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000444:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000446:	2302      	movs	r3, #2
 8000448:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800044a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800044e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000450:	2304      	movs	r3, #4
 8000452:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000454:	23a8      	movs	r3, #168	@ 0xa8
 8000456:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000458:	2302      	movs	r3, #2
 800045a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800045c:	2307      	movs	r3, #7
 800045e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000460:	f107 0320 	add.w	r3, r7, #32
 8000464:	4618      	mov	r0, r3
 8000466:	f001 ff7f 	bl	8002368 <HAL_RCC_OscConfig>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000470:	f000 f8b6 	bl	80005e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000474:	230f      	movs	r3, #15
 8000476:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000478:	2302      	movs	r3, #2
 800047a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800047c:	2380      	movs	r3, #128	@ 0x80
 800047e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000480:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000484:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800048a:	f107 030c 	add.w	r3, r7, #12
 800048e:	2102      	movs	r1, #2
 8000490:	4618      	mov	r0, r3
 8000492:	f002 f9e1 	bl	8002858 <HAL_RCC_ClockConfig>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800049c:	f000 f8a0 	bl	80005e0 <Error_Handler>
  }
}
 80004a0:	bf00      	nop
 80004a2:	3750      	adds	r7, #80	@ 0x50
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40023800 	.word	0x40023800
 80004ac:	40007000 	.word	0x40007000

080004b0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80004b4:	4b0e      	ldr	r3, [pc, #56]	@ (80004f0 <MX_TIM10_Init+0x40>)
 80004b6:	4a0f      	ldr	r2, [pc, #60]	@ (80004f4 <MX_TIM10_Init+0x44>)
 80004b8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 83;
 80004ba:	4b0d      	ldr	r3, [pc, #52]	@ (80004f0 <MX_TIM10_Init+0x40>)
 80004bc:	2253      	movs	r2, #83	@ 0x53
 80004be:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004c0:	4b0b      	ldr	r3, [pc, #44]	@ (80004f0 <MX_TIM10_Init+0x40>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80004c6:	4b0a      	ldr	r3, [pc, #40]	@ (80004f0 <MX_TIM10_Init+0x40>)
 80004c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80004cc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ce:	4b08      	ldr	r3, [pc, #32]	@ (80004f0 <MX_TIM10_Init+0x40>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004d4:	4b06      	ldr	r3, [pc, #24]	@ (80004f0 <MX_TIM10_Init+0x40>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80004da:	4805      	ldr	r0, [pc, #20]	@ (80004f0 <MX_TIM10_Init+0x40>)
 80004dc:	f002 fbb4 	bl	8002c48 <HAL_TIM_Base_Init>
 80004e0:	4603      	mov	r3, r0
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80004e6:	f000 f87b 	bl	80005e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80004ea:	bf00      	nop
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	20000168 	.word	0x20000168
 80004f4:	40014400 	.word	0x40014400

080004f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b088      	sub	sp, #32
 80004fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fe:	f107 030c 	add.w	r3, r7, #12
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
 800050c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	4b30      	ldr	r3, [pc, #192]	@ (80005d4 <MX_GPIO_Init+0xdc>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000516:	4a2f      	ldr	r2, [pc, #188]	@ (80005d4 <MX_GPIO_Init+0xdc>)
 8000518:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800051c:	6313      	str	r3, [r2, #48]	@ 0x30
 800051e:	4b2d      	ldr	r3, [pc, #180]	@ (80005d4 <MX_GPIO_Init+0xdc>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	4b29      	ldr	r3, [pc, #164]	@ (80005d4 <MX_GPIO_Init+0xdc>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000532:	4a28      	ldr	r2, [pc, #160]	@ (80005d4 <MX_GPIO_Init+0xdc>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6313      	str	r3, [r2, #48]	@ 0x30
 800053a:	4b26      	ldr	r3, [pc, #152]	@ (80005d4 <MX_GPIO_Init+0xdc>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	603b      	str	r3, [r7, #0]
 800054a:	4b22      	ldr	r3, [pc, #136]	@ (80005d4 <MX_GPIO_Init+0xdc>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	4a21      	ldr	r2, [pc, #132]	@ (80005d4 <MX_GPIO_Init+0xdc>)
 8000550:	f043 0308 	orr.w	r3, r3, #8
 8000554:	6313      	str	r3, [r2, #48]	@ 0x30
 8000556:	4b1f      	ldr	r3, [pc, #124]	@ (80005d4 <MX_GPIO_Init+0xdc>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	f003 0308 	and.w	r3, r3, #8
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	2101      	movs	r1, #1
 8000566:	481c      	ldr	r0, [pc, #112]	@ (80005d8 <MX_GPIO_Init+0xe0>)
 8000568:	f000 fc92 	bl	8000e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000572:	481a      	ldr	r0, [pc, #104]	@ (80005dc <MX_GPIO_Init+0xe4>)
 8000574:	f000 fc8c 	bl	8000e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000578:	2301      	movs	r3, #1
 800057a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057c:	2301      	movs	r3, #1
 800057e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000584:	2300      	movs	r3, #0
 8000586:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	4619      	mov	r1, r3
 800058e:	4812      	ldr	r0, [pc, #72]	@ (80005d8 <MX_GPIO_Init+0xe0>)
 8000590:	f000 faca 	bl	8000b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000594:	2302      	movs	r3, #2
 8000596:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000598:	2300      	movs	r3, #0
 800059a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	4619      	mov	r1, r3
 80005a6:	480c      	ldr	r0, [pc, #48]	@ (80005d8 <MX_GPIO_Init+0xe0>)
 80005a8:	f000 fabe 	bl	8000b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80005ac:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80005b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b2:	2301      	movs	r3, #1
 80005b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005be:	f107 030c 	add.w	r3, r7, #12
 80005c2:	4619      	mov	r1, r3
 80005c4:	4805      	ldr	r0, [pc, #20]	@ (80005dc <MX_GPIO_Init+0xe4>)
 80005c6:	f000 faaf 	bl	8000b28 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80005ca:	bf00      	nop
 80005cc:	3720      	adds	r7, #32
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40020000 	.word	0x40020000
 80005dc:	40020c00 	.word	0x40020c00

080005e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e4:	b672      	cpsid	i
}
 80005e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <Error_Handler+0x8>

080005ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	4b10      	ldr	r3, [pc, #64]	@ (8000638 <HAL_MspInit+0x4c>)
 80005f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000638 <HAL_MspInit+0x4c>)
 80005fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000600:	6453      	str	r3, [r2, #68]	@ 0x44
 8000602:	4b0d      	ldr	r3, [pc, #52]	@ (8000638 <HAL_MspInit+0x4c>)
 8000604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	4b09      	ldr	r3, [pc, #36]	@ (8000638 <HAL_MspInit+0x4c>)
 8000614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000616:	4a08      	ldr	r2, [pc, #32]	@ (8000638 <HAL_MspInit+0x4c>)
 8000618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061c:	6413      	str	r3, [r2, #64]	@ 0x40
 800061e:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <HAL_MspInit+0x4c>)
 8000620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800062a:	2007      	movs	r0, #7
 800062c:	f000 fa3a 	bl	8000aa4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40023800 	.word	0x40023800

0800063c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a0b      	ldr	r2, [pc, #44]	@ (8000678 <HAL_TIM_Base_MspInit+0x3c>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d10d      	bne.n	800066a <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM10_MspInit 0 */

    /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	4b0a      	ldr	r3, [pc, #40]	@ (800067c <HAL_TIM_Base_MspInit+0x40>)
 8000654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000656:	4a09      	ldr	r2, [pc, #36]	@ (800067c <HAL_TIM_Base_MspInit+0x40>)
 8000658:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800065c:	6453      	str	r3, [r2, #68]	@ 0x44
 800065e:	4b07      	ldr	r3, [pc, #28]	@ (800067c <HAL_TIM_Base_MspInit+0x40>)
 8000660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM10_MspInit 1 */

  }

}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40014400 	.word	0x40014400
 800067c:	40023800 	.word	0x40023800

08000680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <NMI_Handler+0x4>

08000688 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <HardFault_Handler+0x4>

08000690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <MemManage_Handler+0x4>

08000698 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <BusFault_Handler+0x4>

080006a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <UsageFault_Handler+0x4>

080006a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr

080006b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d6:	f000 f8d1 	bl	800087c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
	...

080006e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80006e4:	4802      	ldr	r0, [pc, #8]	@ (80006f0 <OTG_FS_IRQHandler+0x10>)
 80006e6:	f000 fd30 	bl	800114a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20001698 	.word	0x20001698

080006f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006fc:	4a14      	ldr	r2, [pc, #80]	@ (8000750 <_sbrk+0x5c>)
 80006fe:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <_sbrk+0x60>)
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000708:	4b13      	ldr	r3, [pc, #76]	@ (8000758 <_sbrk+0x64>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d102      	bne.n	8000716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000710:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <_sbrk+0x64>)
 8000712:	4a12      	ldr	r2, [pc, #72]	@ (800075c <_sbrk+0x68>)
 8000714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000716:	4b10      	ldr	r3, [pc, #64]	@ (8000758 <_sbrk+0x64>)
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4413      	add	r3, r2
 800071e:	693a      	ldr	r2, [r7, #16]
 8000720:	429a      	cmp	r2, r3
 8000722:	d207      	bcs.n	8000734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000724:	f006 fc98 	bl	8007058 <__errno>
 8000728:	4603      	mov	r3, r0
 800072a:	220c      	movs	r2, #12
 800072c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800072e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000732:	e009      	b.n	8000748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000734:	4b08      	ldr	r3, [pc, #32]	@ (8000758 <_sbrk+0x64>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800073a:	4b07      	ldr	r3, [pc, #28]	@ (8000758 <_sbrk+0x64>)
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4413      	add	r3, r2
 8000742:	4a05      	ldr	r2, [pc, #20]	@ (8000758 <_sbrk+0x64>)
 8000744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000746:	68fb      	ldr	r3, [r7, #12]
}
 8000748:	4618      	mov	r0, r3
 800074a:	3718      	adds	r7, #24
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20020000 	.word	0x20020000
 8000754:	00000400 	.word	0x00000400
 8000758:	200001b0 	.word	0x200001b0
 800075c:	20001ee8 	.word	0x20001ee8

08000760 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000764:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <SystemInit+0x20>)
 8000766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800076a:	4a05      	ldr	r2, [pc, #20]	@ (8000780 <SystemInit+0x20>)
 800076c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000770:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000784:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007bc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000788:	f7ff ffea 	bl	8000760 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800078c:	480c      	ldr	r0, [pc, #48]	@ (80007c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800078e:	490d      	ldr	r1, [pc, #52]	@ (80007c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000790:	4a0d      	ldr	r2, [pc, #52]	@ (80007c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000794:	e002      	b.n	800079c <LoopCopyDataInit>

08000796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800079a:	3304      	adds	r3, #4

0800079c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800079c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800079e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a0:	d3f9      	bcc.n	8000796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007a2:	4a0a      	ldr	r2, [pc, #40]	@ (80007cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007a4:	4c0a      	ldr	r4, [pc, #40]	@ (80007d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a8:	e001      	b.n	80007ae <LoopFillZerobss>

080007aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ac:	3204      	adds	r2, #4

080007ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b0:	d3fb      	bcc.n	80007aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007b2:	f006 fc57 	bl	8007064 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007b6:	f7ff fd99 	bl	80002ec <main>
  bx  lr    
 80007ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80007bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c4:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 80007c8:	08007d0c 	.word	0x08007d0c
  ldr r2, =_sbss
 80007cc:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 80007d0:	20001ee4 	.word	0x20001ee4

080007d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007d4:	e7fe      	b.n	80007d4 <ADC_IRQHandler>
	...

080007d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <HAL_Init+0x40>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000818 <HAL_Init+0x40>)
 80007e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000818 <HAL_Init+0x40>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a0a      	ldr	r2, [pc, #40]	@ (8000818 <HAL_Init+0x40>)
 80007ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f4:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <HAL_Init+0x40>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a07      	ldr	r2, [pc, #28]	@ (8000818 <HAL_Init+0x40>)
 80007fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80007fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000800:	2003      	movs	r0, #3
 8000802:	f000 f94f 	bl	8000aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000806:	2000      	movs	r0, #0
 8000808:	f000 f808 	bl	800081c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800080c:	f7ff feee 	bl	80005ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000810:	2300      	movs	r3, #0
}
 8000812:	4618      	mov	r0, r3
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023c00 	.word	0x40023c00

0800081c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000824:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <HAL_InitTick+0x54>)
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <HAL_InitTick+0x58>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	4619      	mov	r1, r3
 800082e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000832:	fbb3 f3f1 	udiv	r3, r3, r1
 8000836:	fbb2 f3f3 	udiv	r3, r2, r3
 800083a:	4618      	mov	r0, r3
 800083c:	f000 f967 	bl	8000b0e <HAL_SYSTICK_Config>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000846:	2301      	movs	r3, #1
 8000848:	e00e      	b.n	8000868 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	2b0f      	cmp	r3, #15
 800084e:	d80a      	bhi.n	8000866 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000850:	2200      	movs	r2, #0
 8000852:	6879      	ldr	r1, [r7, #4]
 8000854:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000858:	f000 f92f 	bl	8000aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800085c:	4a06      	ldr	r2, [pc, #24]	@ (8000878 <HAL_InitTick+0x5c>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000862:	2300      	movs	r3, #0
 8000864:	e000      	b.n	8000868 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000866:	2301      	movs	r3, #1
}
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	20000000 	.word	0x20000000
 8000874:	20000008 	.word	0x20000008
 8000878:	20000004 	.word	0x20000004

0800087c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <HAL_IncTick+0x20>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	461a      	mov	r2, r3
 8000886:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <HAL_IncTick+0x24>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4413      	add	r3, r2
 800088c:	4a04      	ldr	r2, [pc, #16]	@ (80008a0 <HAL_IncTick+0x24>)
 800088e:	6013      	str	r3, [r2, #0]
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	20000008 	.word	0x20000008
 80008a0:	200001b4 	.word	0x200001b4

080008a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  return uwTick;
 80008a8:	4b03      	ldr	r3, [pc, #12]	@ (80008b8 <HAL_GetTick+0x14>)
 80008aa:	681b      	ldr	r3, [r3, #0]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	200001b4 	.word	0x200001b4

080008bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008c4:	f7ff ffee 	bl	80008a4 <HAL_GetTick>
 80008c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80008d4:	d005      	beq.n	80008e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000900 <HAL_Delay+0x44>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	461a      	mov	r2, r3
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	4413      	add	r3, r2
 80008e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008e2:	bf00      	nop
 80008e4:	f7ff ffde 	bl	80008a4 <HAL_GetTick>
 80008e8:	4602      	mov	r2, r0
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	68fa      	ldr	r2, [r7, #12]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d8f7      	bhi.n	80008e4 <HAL_Delay+0x28>
  {
  }
}
 80008f4:	bf00      	nop
 80008f6:	bf00      	nop
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000008 	.word	0x20000008

08000904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f003 0307 	and.w	r3, r3, #7
 8000912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000914:	4b0c      	ldr	r3, [pc, #48]	@ (8000948 <__NVIC_SetPriorityGrouping+0x44>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000920:	4013      	ands	r3, r2
 8000922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800092c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000930:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000936:	4a04      	ldr	r2, [pc, #16]	@ (8000948 <__NVIC_SetPriorityGrouping+0x44>)
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	60d3      	str	r3, [r2, #12]
}
 800093c:	bf00      	nop
 800093e:	3714      	adds	r7, #20
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	e000ed00 	.word	0xe000ed00

0800094c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000950:	4b04      	ldr	r3, [pc, #16]	@ (8000964 <__NVIC_GetPriorityGrouping+0x18>)
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	0a1b      	lsrs	r3, r3, #8
 8000956:	f003 0307 	and.w	r3, r3, #7
}
 800095a:	4618      	mov	r0, r3
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000976:	2b00      	cmp	r3, #0
 8000978:	db0b      	blt.n	8000992 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	f003 021f 	and.w	r2, r3, #31
 8000980:	4907      	ldr	r1, [pc, #28]	@ (80009a0 <__NVIC_EnableIRQ+0x38>)
 8000982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000986:	095b      	lsrs	r3, r3, #5
 8000988:	2001      	movs	r0, #1
 800098a:	fa00 f202 	lsl.w	r2, r0, r2
 800098e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000e100 	.word	0xe000e100

080009a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	6039      	str	r1, [r7, #0]
 80009ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	db0a      	blt.n	80009ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	490c      	ldr	r1, [pc, #48]	@ (80009f0 <__NVIC_SetPriority+0x4c>)
 80009be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c2:	0112      	lsls	r2, r2, #4
 80009c4:	b2d2      	uxtb	r2, r2
 80009c6:	440b      	add	r3, r1
 80009c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009cc:	e00a      	b.n	80009e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4908      	ldr	r1, [pc, #32]	@ (80009f4 <__NVIC_SetPriority+0x50>)
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	f003 030f 	and.w	r3, r3, #15
 80009da:	3b04      	subs	r3, #4
 80009dc:	0112      	lsls	r2, r2, #4
 80009de:	b2d2      	uxtb	r2, r2
 80009e0:	440b      	add	r3, r1
 80009e2:	761a      	strb	r2, [r3, #24]
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	e000e100 	.word	0xe000e100
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b089      	sub	sp, #36	@ 0x24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f003 0307 	and.w	r3, r3, #7
 8000a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	f1c3 0307 	rsb	r3, r3, #7
 8000a12:	2b04      	cmp	r3, #4
 8000a14:	bf28      	it	cs
 8000a16:	2304      	movcs	r3, #4
 8000a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	2b06      	cmp	r3, #6
 8000a20:	d902      	bls.n	8000a28 <NVIC_EncodePriority+0x30>
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	3b03      	subs	r3, #3
 8000a26:	e000      	b.n	8000a2a <NVIC_EncodePriority+0x32>
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a30:	69bb      	ldr	r3, [r7, #24]
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	43da      	mvns	r2, r3
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	401a      	ands	r2, r3
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a40:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4a:	43d9      	mvns	r1, r3
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a50:	4313      	orrs	r3, r2
         );
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3724      	adds	r7, #36	@ 0x24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
	...

08000a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a70:	d301      	bcc.n	8000a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a72:	2301      	movs	r3, #1
 8000a74:	e00f      	b.n	8000a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a76:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa0 <SysTick_Config+0x40>)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a7e:	210f      	movs	r1, #15
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a84:	f7ff ff8e 	bl	80009a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a88:	4b05      	ldr	r3, [pc, #20]	@ (8000aa0 <SysTick_Config+0x40>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8e:	4b04      	ldr	r3, [pc, #16]	@ (8000aa0 <SysTick_Config+0x40>)
 8000a90:	2207      	movs	r2, #7
 8000a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	e000e010 	.word	0xe000e010

08000aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f7ff ff29 	bl	8000904 <__NVIC_SetPriorityGrouping>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b086      	sub	sp, #24
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
 8000ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000acc:	f7ff ff3e 	bl	800094c <__NVIC_GetPriorityGrouping>
 8000ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	68b9      	ldr	r1, [r7, #8]
 8000ad6:	6978      	ldr	r0, [r7, #20]
 8000ad8:	f7ff ff8e 	bl	80009f8 <NVIC_EncodePriority>
 8000adc:	4602      	mov	r2, r0
 8000ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff5d 	bl	80009a4 <__NVIC_SetPriority>
}
 8000aea:	bf00      	nop
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	4603      	mov	r3, r0
 8000afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff ff31 	bl	8000968 <__NVIC_EnableIRQ>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff ffa2 	bl	8000a60 <SysTick_Config>
 8000b1c:	4603      	mov	r3, r0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b089      	sub	sp, #36	@ 0x24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
 8000b42:	e16b      	b.n	8000e1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b44:	2201      	movs	r2, #1
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	697a      	ldr	r2, [r7, #20]
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	f040 815a 	bne.w	8000e16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f003 0303 	and.w	r3, r3, #3
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d005      	beq.n	8000b7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d130      	bne.n	8000bdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	2203      	movs	r2, #3
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	69ba      	ldr	r2, [r7, #24]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	68da      	ldr	r2, [r3, #12]
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	69ba      	ldr	r2, [r7, #24]
 8000ba8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	69ba      	ldr	r2, [r7, #24]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	091b      	lsrs	r3, r3, #4
 8000bc6:	f003 0201 	and.w	r2, r3, #1
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	69ba      	ldr	r2, [r7, #24]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	69ba      	ldr	r2, [r7, #24]
 8000bda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f003 0303 	and.w	r3, r3, #3
 8000be4:	2b03      	cmp	r3, #3
 8000be6:	d017      	beq.n	8000c18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	2203      	movs	r2, #3
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	69ba      	ldr	r2, [r7, #24]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	689a      	ldr	r2, [r3, #8]
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f003 0303 	and.w	r3, r3, #3
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d123      	bne.n	8000c6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	08da      	lsrs	r2, r3, #3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3208      	adds	r2, #8
 8000c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	f003 0307 	and.w	r3, r3, #7
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	220f      	movs	r2, #15
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	4013      	ands	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	691a      	ldr	r2, [r3, #16]
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	08da      	lsrs	r2, r3, #3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	3208      	adds	r2, #8
 8000c66:	69b9      	ldr	r1, [r7, #24]
 8000c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	2203      	movs	r2, #3
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	4013      	ands	r3, r2
 8000c82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f003 0203 	and.w	r2, r3, #3
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f000 80b4 	beq.w	8000e16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b60      	ldr	r3, [pc, #384]	@ (8000e34 <HAL_GPIO_Init+0x30c>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb6:	4a5f      	ldr	r2, [pc, #380]	@ (8000e34 <HAL_GPIO_Init+0x30c>)
 8000cb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cbe:	4b5d      	ldr	r3, [pc, #372]	@ (8000e34 <HAL_GPIO_Init+0x30c>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cca:	4a5b      	ldr	r2, [pc, #364]	@ (8000e38 <HAL_GPIO_Init+0x310>)
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	089b      	lsrs	r3, r3, #2
 8000cd0:	3302      	adds	r3, #2
 8000cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f003 0303 	and.w	r3, r3, #3
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	220f      	movs	r2, #15
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4013      	ands	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a52      	ldr	r2, [pc, #328]	@ (8000e3c <HAL_GPIO_Init+0x314>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d02b      	beq.n	8000d4e <HAL_GPIO_Init+0x226>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a51      	ldr	r2, [pc, #324]	@ (8000e40 <HAL_GPIO_Init+0x318>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d025      	beq.n	8000d4a <HAL_GPIO_Init+0x222>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a50      	ldr	r2, [pc, #320]	@ (8000e44 <HAL_GPIO_Init+0x31c>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d01f      	beq.n	8000d46 <HAL_GPIO_Init+0x21e>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a4f      	ldr	r2, [pc, #316]	@ (8000e48 <HAL_GPIO_Init+0x320>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d019      	beq.n	8000d42 <HAL_GPIO_Init+0x21a>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a4e      	ldr	r2, [pc, #312]	@ (8000e4c <HAL_GPIO_Init+0x324>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d013      	beq.n	8000d3e <HAL_GPIO_Init+0x216>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a4d      	ldr	r2, [pc, #308]	@ (8000e50 <HAL_GPIO_Init+0x328>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d00d      	beq.n	8000d3a <HAL_GPIO_Init+0x212>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a4c      	ldr	r2, [pc, #304]	@ (8000e54 <HAL_GPIO_Init+0x32c>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d007      	beq.n	8000d36 <HAL_GPIO_Init+0x20e>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a4b      	ldr	r2, [pc, #300]	@ (8000e58 <HAL_GPIO_Init+0x330>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d101      	bne.n	8000d32 <HAL_GPIO_Init+0x20a>
 8000d2e:	2307      	movs	r3, #7
 8000d30:	e00e      	b.n	8000d50 <HAL_GPIO_Init+0x228>
 8000d32:	2308      	movs	r3, #8
 8000d34:	e00c      	b.n	8000d50 <HAL_GPIO_Init+0x228>
 8000d36:	2306      	movs	r3, #6
 8000d38:	e00a      	b.n	8000d50 <HAL_GPIO_Init+0x228>
 8000d3a:	2305      	movs	r3, #5
 8000d3c:	e008      	b.n	8000d50 <HAL_GPIO_Init+0x228>
 8000d3e:	2304      	movs	r3, #4
 8000d40:	e006      	b.n	8000d50 <HAL_GPIO_Init+0x228>
 8000d42:	2303      	movs	r3, #3
 8000d44:	e004      	b.n	8000d50 <HAL_GPIO_Init+0x228>
 8000d46:	2302      	movs	r3, #2
 8000d48:	e002      	b.n	8000d50 <HAL_GPIO_Init+0x228>
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e000      	b.n	8000d50 <HAL_GPIO_Init+0x228>
 8000d4e:	2300      	movs	r3, #0
 8000d50:	69fa      	ldr	r2, [r7, #28]
 8000d52:	f002 0203 	and.w	r2, r2, #3
 8000d56:	0092      	lsls	r2, r2, #2
 8000d58:	4093      	lsls	r3, r2
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d60:	4935      	ldr	r1, [pc, #212]	@ (8000e38 <HAL_GPIO_Init+0x310>)
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	089b      	lsrs	r3, r3, #2
 8000d66:	3302      	adds	r3, #2
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d6e:	4b3b      	ldr	r3, [pc, #236]	@ (8000e5c <HAL_GPIO_Init+0x334>)
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	43db      	mvns	r3, r3
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d003      	beq.n	8000d92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d92:	4a32      	ldr	r2, [pc, #200]	@ (8000e5c <HAL_GPIO_Init+0x334>)
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d98:	4b30      	ldr	r3, [pc, #192]	@ (8000e5c <HAL_GPIO_Init+0x334>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	43db      	mvns	r3, r3
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4013      	ands	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dbc:	4a27      	ldr	r2, [pc, #156]	@ (8000e5c <HAL_GPIO_Init+0x334>)
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dc2:	4b26      	ldr	r3, [pc, #152]	@ (8000e5c <HAL_GPIO_Init+0x334>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d003      	beq.n	8000de6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000de6:	4a1d      	ldr	r2, [pc, #116]	@ (8000e5c <HAL_GPIO_Init+0x334>)
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dec:	4b1b      	ldr	r3, [pc, #108]	@ (8000e5c <HAL_GPIO_Init+0x334>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d003      	beq.n	8000e10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e10:	4a12      	ldr	r2, [pc, #72]	@ (8000e5c <HAL_GPIO_Init+0x334>)
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	61fb      	str	r3, [r7, #28]
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	2b0f      	cmp	r3, #15
 8000e20:	f67f ae90 	bls.w	8000b44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e24:	bf00      	nop
 8000e26:	bf00      	nop
 8000e28:	3724      	adds	r7, #36	@ 0x24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40013800 	.word	0x40013800
 8000e3c:	40020000 	.word	0x40020000
 8000e40:	40020400 	.word	0x40020400
 8000e44:	40020800 	.word	0x40020800
 8000e48:	40020c00 	.word	0x40020c00
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	40021400 	.word	0x40021400
 8000e54:	40021800 	.word	0x40021800
 8000e58:	40021c00 	.word	0x40021c00
 8000e5c:	40013c00 	.word	0x40013c00

08000e60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	691a      	ldr	r2, [r3, #16]
 8000e70:	887b      	ldrh	r3, [r7, #2]
 8000e72:	4013      	ands	r3, r2
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d002      	beq.n	8000e7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	73fb      	strb	r3, [r7, #15]
 8000e7c:	e001      	b.n	8000e82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	807b      	strh	r3, [r7, #2]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ea0:	787b      	ldrb	r3, [r7, #1]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ea6:	887a      	ldrh	r2, [r7, #2]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000eac:	e003      	b.n	8000eb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000eae:	887b      	ldrh	r3, [r7, #2]
 8000eb0:	041a      	lsls	r2, r3, #16
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	619a      	str	r2, [r3, #24]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b086      	sub	sp, #24
 8000ec6:	af02      	add	r7, sp, #8
 8000ec8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d101      	bne.n	8000ed4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e101      	b.n	80010d8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d106      	bne.n	8000ef4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f005 fd74 	bl	80069dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f02:	d102      	bne.n	8000f0a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2200      	movs	r2, #0
 8000f08:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f002 f937 	bl	8003182 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6818      	ldr	r0, [r3, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	7c1a      	ldrb	r2, [r3, #16]
 8000f1c:	f88d 2000 	strb.w	r2, [sp]
 8000f20:	3304      	adds	r3, #4
 8000f22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f24:	f002 f816 	bl	8002f54 <USB_CoreInit>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d005      	beq.n	8000f3a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2202      	movs	r2, #2
 8000f32:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e0ce      	b.n	80010d8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f002 f92f 	bl	80031a4 <USB_SetCurrentMode>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d005      	beq.n	8000f58 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2202      	movs	r2, #2
 8000f50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e0bf      	b.n	80010d8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f58:	2300      	movs	r3, #0
 8000f5a:	73fb      	strb	r3, [r7, #15]
 8000f5c:	e04a      	b.n	8000ff4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f5e:	7bfa      	ldrb	r2, [r7, #15]
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	4613      	mov	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	4413      	add	r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	3315      	adds	r3, #21
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f72:	7bfa      	ldrb	r2, [r7, #15]
 8000f74:	6879      	ldr	r1, [r7, #4]
 8000f76:	4613      	mov	r3, r2
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	4413      	add	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	440b      	add	r3, r1
 8000f80:	3314      	adds	r3, #20
 8000f82:	7bfa      	ldrb	r2, [r7, #15]
 8000f84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f86:	7bfa      	ldrb	r2, [r7, #15]
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	b298      	uxth	r0, r3
 8000f8c:	6879      	ldr	r1, [r7, #4]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	4413      	add	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	440b      	add	r3, r1
 8000f98:	332e      	adds	r3, #46	@ 0x2e
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f9e:	7bfa      	ldrb	r2, [r7, #15]
 8000fa0:	6879      	ldr	r1, [r7, #4]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	4413      	add	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	440b      	add	r3, r1
 8000fac:	3318      	adds	r3, #24
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fb2:	7bfa      	ldrb	r2, [r7, #15]
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	4413      	add	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	331c      	adds	r3, #28
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fc6:	7bfa      	ldrb	r2, [r7, #15]
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	4413      	add	r3, r2
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	440b      	add	r3, r1
 8000fd4:	3320      	adds	r3, #32
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000fda:	7bfa      	ldrb	r2, [r7, #15]
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	4413      	add	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	3324      	adds	r3, #36	@ 0x24
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	73fb      	strb	r3, [r7, #15]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	791b      	ldrb	r3, [r3, #4]
 8000ff8:	7bfa      	ldrb	r2, [r7, #15]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d3af      	bcc.n	8000f5e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ffe:	2300      	movs	r3, #0
 8001000:	73fb      	strb	r3, [r7, #15]
 8001002:	e044      	b.n	800108e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001004:	7bfa      	ldrb	r2, [r7, #15]
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	4613      	mov	r3, r2
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	4413      	add	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	440b      	add	r3, r1
 8001012:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800101a:	7bfa      	ldrb	r2, [r7, #15]
 800101c:	6879      	ldr	r1, [r7, #4]
 800101e:	4613      	mov	r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	4413      	add	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	440b      	add	r3, r1
 8001028:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800102c:	7bfa      	ldrb	r2, [r7, #15]
 800102e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001030:	7bfa      	ldrb	r2, [r7, #15]
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	4613      	mov	r3, r2
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	4413      	add	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	440b      	add	r3, r1
 800103e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001046:	7bfa      	ldrb	r2, [r7, #15]
 8001048:	6879      	ldr	r1, [r7, #4]
 800104a:	4613      	mov	r3, r2
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	4413      	add	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	440b      	add	r3, r1
 8001054:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800105c:	7bfa      	ldrb	r2, [r7, #15]
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	4613      	mov	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	4413      	add	r3, r2
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	440b      	add	r3, r1
 800106a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001072:	7bfa      	ldrb	r2, [r7, #15]
 8001074:	6879      	ldr	r1, [r7, #4]
 8001076:	4613      	mov	r3, r2
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	4413      	add	r3, r2
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	440b      	add	r3, r1
 8001080:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	3301      	adds	r3, #1
 800108c:	73fb      	strb	r3, [r7, #15]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	791b      	ldrb	r3, [r3, #4]
 8001092:	7bfa      	ldrb	r2, [r7, #15]
 8001094:	429a      	cmp	r2, r3
 8001096:	d3b5      	bcc.n	8001004 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7c1a      	ldrb	r2, [r3, #16]
 80010a0:	f88d 2000 	strb.w	r2, [sp]
 80010a4:	3304      	adds	r3, #4
 80010a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010a8:	f002 f8c8 	bl	800323c <USB_DevInit>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d005      	beq.n	80010be <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2202      	movs	r2, #2
 80010b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00c      	b.n	80010d8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2201      	movs	r2, #1
 80010c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f003 f912 	bl	80042fa <USB_DevDisconnect>

  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d101      	bne.n	80010fc <HAL_PCD_Start+0x1c>
 80010f8:	2302      	movs	r3, #2
 80010fa:	e022      	b.n	8001142 <HAL_PCD_Start+0x62>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2201      	movs	r2, #1
 8001100:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800110c:	2b00      	cmp	r3, #0
 800110e:	d009      	beq.n	8001124 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001114:	2b01      	cmp	r3, #1
 8001116:	d105      	bne.n	8001124 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800111c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f002 f819 	bl	8003160 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4618      	mov	r0, r3
 8001134:	f003 f8c0 	bl	80042b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800114a:	b590      	push	{r4, r7, lr}
 800114c:	b08d      	sub	sp, #52	@ 0x34
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001158:	6a3b      	ldr	r3, [r7, #32]
 800115a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f003 f97e 	bl	8004462 <USB_GetMode>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	f040 848c 	bne.w	8001a86 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f003 f8e2 	bl	800433c <USB_ReadInterrupts>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 8482 	beq.w	8001a84 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	0a1b      	lsrs	r3, r3, #8
 800118a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f003 f8cf 	bl	800433c <USB_ReadInterrupts>
 800119e:	4603      	mov	r3, r0
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d107      	bne.n	80011b8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	695a      	ldr	r2, [r3, #20]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f002 0202 	and.w	r2, r2, #2
 80011b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f003 f8bd 	bl	800433c <USB_ReadInterrupts>
 80011c2:	4603      	mov	r3, r0
 80011c4:	f003 0310 	and.w	r3, r3, #16
 80011c8:	2b10      	cmp	r3, #16
 80011ca:	d161      	bne.n	8001290 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	699a      	ldr	r2, [r3, #24]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 0210 	bic.w	r2, r2, #16
 80011da:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80011dc:	6a3b      	ldr	r3, [r7, #32]
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	f003 020f 	and.w	r2, r3, #15
 80011e8:	4613      	mov	r3, r2
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	4413      	add	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	4413      	add	r3, r2
 80011f8:	3304      	adds	r3, #4
 80011fa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001202:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001206:	d124      	bne.n	8001252 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800120e:	4013      	ands	r3, r2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d035      	beq.n	8001280 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	091b      	lsrs	r3, r3, #4
 800121c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800121e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001222:	b29b      	uxth	r3, r3
 8001224:	461a      	mov	r2, r3
 8001226:	6a38      	ldr	r0, [r7, #32]
 8001228:	f002 fef4 	bl	8004014 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	68da      	ldr	r2, [r3, #12]
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	091b      	lsrs	r3, r3, #4
 8001234:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001238:	441a      	add	r2, r3
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	695a      	ldr	r2, [r3, #20]
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	091b      	lsrs	r3, r3, #4
 8001246:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800124a:	441a      	add	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	615a      	str	r2, [r3, #20]
 8001250:	e016      	b.n	8001280 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001258:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800125c:	d110      	bne.n	8001280 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001264:	2208      	movs	r2, #8
 8001266:	4619      	mov	r1, r3
 8001268:	6a38      	ldr	r0, [r7, #32]
 800126a:	f002 fed3 	bl	8004014 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	695a      	ldr	r2, [r3, #20]
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	091b      	lsrs	r3, r3, #4
 8001276:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800127a:	441a      	add	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	699a      	ldr	r2, [r3, #24]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f042 0210 	orr.w	r2, r2, #16
 800128e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f003 f851 	bl	800433c <USB_ReadInterrupts>
 800129a:	4603      	mov	r3, r0
 800129c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80012a0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80012a4:	f040 80a7 	bne.w	80013f6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80012a8:	2300      	movs	r3, #0
 80012aa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f003 f856 	bl	8004362 <USB_ReadDevAllOutEpInterrupt>
 80012b6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80012b8:	e099      	b.n	80013ee <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80012ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 808e 	beq.w	80013e2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012cc:	b2d2      	uxtb	r2, r2
 80012ce:	4611      	mov	r1, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f003 f87a 	bl	80043ca <USB_ReadDevOutEPInterrupt>
 80012d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00c      	beq.n	80012fc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80012e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e4:	015a      	lsls	r2, r3, #5
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	4413      	add	r3, r2
 80012ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80012ee:	461a      	mov	r2, r3
 80012f0:	2301      	movs	r3, #1
 80012f2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80012f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 fea4 	bl	8002044 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	f003 0308 	and.w	r3, r3, #8
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00c      	beq.n	8001320 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001308:	015a      	lsls	r2, r3, #5
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	4413      	add	r3, r2
 800130e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001312:	461a      	mov	r2, r3
 8001314:	2308      	movs	r3, #8
 8001316:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001318:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 ff7a 	bl	8002214 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	f003 0310 	and.w	r3, r3, #16
 8001326:	2b00      	cmp	r3, #0
 8001328:	d008      	beq.n	800133c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800132a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132c:	015a      	lsls	r2, r3, #5
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	4413      	add	r3, r2
 8001332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001336:	461a      	mov	r2, r3
 8001338:	2310      	movs	r3, #16
 800133a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d030      	beq.n	80013a8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001346:	6a3b      	ldr	r3, [r7, #32]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800134e:	2b80      	cmp	r3, #128	@ 0x80
 8001350:	d109      	bne.n	8001366 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	69fa      	ldr	r2, [r7, #28]
 800135c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001360:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001364:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001368:	4613      	mov	r3, r2
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	4413      	add	r3, r2
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	4413      	add	r3, r2
 8001378:	3304      	adds	r3, #4
 800137a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	78db      	ldrb	r3, [r3, #3]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d108      	bne.n	8001396 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	2200      	movs	r2, #0
 8001388:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800138a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138c:	b2db      	uxtb	r3, r3
 800138e:	4619      	mov	r1, r3
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f005 fc29 	bl	8006be8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001398:	015a      	lsls	r2, r3, #5
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	4413      	add	r3, r2
 800139e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013a2:	461a      	mov	r2, r3
 80013a4:	2302      	movs	r3, #2
 80013a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	f003 0320 	and.w	r3, r3, #32
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d008      	beq.n	80013c4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80013b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b4:	015a      	lsls	r2, r3, #5
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	4413      	add	r3, r2
 80013ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013be:	461a      	mov	r2, r3
 80013c0:	2320      	movs	r3, #32
 80013c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d009      	beq.n	80013e2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80013ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d0:	015a      	lsls	r2, r3, #5
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	4413      	add	r3, r2
 80013d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80013da:	461a      	mov	r2, r3
 80013dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013e0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80013e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e4:	3301      	adds	r3, #1
 80013e6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80013e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013ea:	085b      	lsrs	r3, r3, #1
 80013ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80013ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f47f af62 	bne.w	80012ba <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f002 ff9e 	bl	800433c <USB_ReadInterrupts>
 8001400:	4603      	mov	r3, r0
 8001402:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001406:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800140a:	f040 80db 	bne.w	80015c4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f002 ffbf 	bl	8004396 <USB_ReadDevAllInEpInterrupt>
 8001418:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800141a:	2300      	movs	r3, #0
 800141c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800141e:	e0cd      	b.n	80015bc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 80c2 	beq.w	80015b0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f002 ffe5 	bl	8004406 <USB_ReadDevInEPInterrupt>
 800143c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	2b00      	cmp	r3, #0
 8001446:	d057      	beq.n	80014f8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	2201      	movs	r2, #1
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800145c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	43db      	mvns	r3, r3
 8001462:	69f9      	ldr	r1, [r7, #28]
 8001464:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001468:	4013      	ands	r3, r2
 800146a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800146c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146e:	015a      	lsls	r2, r3, #5
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	4413      	add	r3, r2
 8001474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001478:	461a      	mov	r2, r3
 800147a:	2301      	movs	r3, #1
 800147c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	799b      	ldrb	r3, [r3, #6]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d132      	bne.n	80014ec <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001486:	6879      	ldr	r1, [r7, #4]
 8001488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800148a:	4613      	mov	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	4413      	add	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	440b      	add	r3, r1
 8001494:	3320      	adds	r3, #32
 8001496:	6819      	ldr	r1, [r3, #0]
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800149c:	4613      	mov	r3, r2
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	4413      	add	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4403      	add	r3, r0
 80014a6:	331c      	adds	r3, #28
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4419      	add	r1, r3
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014b0:	4613      	mov	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	4413      	add	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4403      	add	r3, r0
 80014ba:	3320      	adds	r3, #32
 80014bc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80014be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d113      	bne.n	80014ec <HAL_PCD_IRQHandler+0x3a2>
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014c8:	4613      	mov	r3, r2
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	3324      	adds	r3, #36	@ 0x24
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d108      	bne.n	80014ec <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6818      	ldr	r0, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80014e4:	461a      	mov	r2, r3
 80014e6:	2101      	movs	r1, #1
 80014e8:	f002 ffec 	bl	80044c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80014ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	4619      	mov	r1, r3
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f005 faf3 	bl	8006ade <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d008      	beq.n	8001514 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001504:	015a      	lsls	r2, r3, #5
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	4413      	add	r3, r2
 800150a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800150e:	461a      	mov	r2, r3
 8001510:	2308      	movs	r3, #8
 8001512:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	f003 0310 	and.w	r3, r3, #16
 800151a:	2b00      	cmp	r3, #0
 800151c:	d008      	beq.n	8001530 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800151e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001520:	015a      	lsls	r2, r3, #5
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	4413      	add	r3, r2
 8001526:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800152a:	461a      	mov	r2, r3
 800152c:	2310      	movs	r3, #16
 800152e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001536:	2b00      	cmp	r3, #0
 8001538:	d008      	beq.n	800154c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800153a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153c:	015a      	lsls	r2, r3, #5
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	4413      	add	r3, r2
 8001542:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001546:	461a      	mov	r2, r3
 8001548:	2340      	movs	r3, #64	@ 0x40
 800154a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d023      	beq.n	800159e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001556:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001558:	6a38      	ldr	r0, [r7, #32]
 800155a:	f001 ffd3 	bl	8003504 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800155e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001560:	4613      	mov	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4413      	add	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	3310      	adds	r3, #16
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	3304      	adds	r3, #4
 8001570:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	78db      	ldrb	r3, [r3, #3]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d108      	bne.n	800158c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	2200      	movs	r2, #0
 800157e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001582:	b2db      	uxtb	r3, r3
 8001584:	4619      	mov	r1, r3
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f005 fb40 	bl	8006c0c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800158c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158e:	015a      	lsls	r2, r3, #5
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	4413      	add	r3, r2
 8001594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001598:	461a      	mov	r2, r3
 800159a:	2302      	movs	r3, #2
 800159c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80015a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 fcbd 	bl	8001f2a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80015b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b2:	3301      	adds	r3, #1
 80015b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80015b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015b8:	085b      	lsrs	r3, r3, #1
 80015ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80015bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f47f af2e 	bne.w	8001420 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f002 feb7 	bl	800433c <USB_ReadInterrupts>
 80015ce:	4603      	mov	r3, r0
 80015d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80015d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80015d8:	d122      	bne.n	8001620 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	69fa      	ldr	r2, [r7, #28]
 80015e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80015e8:	f023 0301 	bic.w	r3, r3, #1
 80015ec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d108      	bne.n	800160a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001600:	2100      	movs	r1, #0
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 fea4 	bl	8002350 <HAL_PCDEx_LPM_Callback>
 8001608:	e002      	b.n	8001610 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f005 fade 	bl	8006bcc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	695a      	ldr	r2, [r3, #20]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800161e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f002 fe89 	bl	800433c <USB_ReadInterrupts>
 800162a:	4603      	mov	r3, r0
 800162c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001630:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001634:	d112      	bne.n	800165c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b01      	cmp	r3, #1
 8001644:	d102      	bne.n	800164c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f005 fa9a 	bl	8006b80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	695a      	ldr	r2, [r3, #20]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800165a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f002 fe6b 	bl	800433c <USB_ReadInterrupts>
 8001666:	4603      	mov	r3, r0
 8001668:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800166c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001670:	f040 80b7 	bne.w	80017e2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	69fa      	ldr	r2, [r7, #28]
 800167e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001682:	f023 0301 	bic.w	r3, r3, #1
 8001686:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2110      	movs	r1, #16
 800168e:	4618      	mov	r0, r3
 8001690:	f001 ff38 	bl	8003504 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001694:	2300      	movs	r3, #0
 8001696:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001698:	e046      	b.n	8001728 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800169a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800169c:	015a      	lsls	r2, r3, #5
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	4413      	add	r3, r2
 80016a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016a6:	461a      	mov	r2, r3
 80016a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80016ac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80016ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016b0:	015a      	lsls	r2, r3, #5
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	4413      	add	r3, r2
 80016b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016be:	0151      	lsls	r1, r2, #5
 80016c0:	69fa      	ldr	r2, [r7, #28]
 80016c2:	440a      	add	r2, r1
 80016c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80016c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80016cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80016ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016d0:	015a      	lsls	r2, r3, #5
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	4413      	add	r3, r2
 80016d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016da:	461a      	mov	r2, r3
 80016dc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80016e0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80016e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016e4:	015a      	lsls	r2, r3, #5
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	4413      	add	r3, r2
 80016ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016f2:	0151      	lsls	r1, r2, #5
 80016f4:	69fa      	ldr	r2, [r7, #28]
 80016f6:	440a      	add	r2, r1
 80016f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80016fc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001700:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001704:	015a      	lsls	r2, r3, #5
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	4413      	add	r3, r2
 800170a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001712:	0151      	lsls	r1, r2, #5
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	440a      	add	r2, r1
 8001718:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800171c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001720:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001724:	3301      	adds	r3, #1
 8001726:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	791b      	ldrb	r3, [r3, #4]
 800172c:	461a      	mov	r2, r3
 800172e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001730:	4293      	cmp	r3, r2
 8001732:	d3b2      	bcc.n	800169a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	69fa      	ldr	r2, [r7, #28]
 800173e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001742:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001746:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	7bdb      	ldrb	r3, [r3, #15]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d016      	beq.n	800177e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001756:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800175a:	69fa      	ldr	r2, [r7, #28]
 800175c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001760:	f043 030b 	orr.w	r3, r3, #11
 8001764:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800176e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001770:	69fa      	ldr	r2, [r7, #28]
 8001772:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001776:	f043 030b 	orr.w	r3, r3, #11
 800177a:	6453      	str	r3, [r2, #68]	@ 0x44
 800177c:	e015      	b.n	80017aa <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	69fa      	ldr	r2, [r7, #28]
 8001788:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800178c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001790:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001794:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	69fa      	ldr	r2, [r7, #28]
 80017a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017a4:	f043 030b 	orr.w	r3, r3, #11
 80017a8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	69fa      	ldr	r2, [r7, #28]
 80017b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80017b8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80017bc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6818      	ldr	r0, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017cc:	461a      	mov	r2, r3
 80017ce:	f002 fe79 	bl	80044c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	695a      	ldr	r2, [r3, #20]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80017e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f002 fda8 	bl	800433c <USB_ReadInterrupts>
 80017ec:	4603      	mov	r3, r0
 80017ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017f6:	d123      	bne.n	8001840 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f002 fe3e 	bl	800447e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f001 fef5 	bl	80035f6 <USB_GetDevSpeed>
 800180c:	4603      	mov	r3, r0
 800180e:	461a      	mov	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681c      	ldr	r4, [r3, #0]
 8001818:	f001 fa0a 	bl	8002c30 <HAL_RCC_GetHCLKFreq>
 800181c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001822:	461a      	mov	r2, r3
 8001824:	4620      	mov	r0, r4
 8001826:	f001 fbf9 	bl	800301c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f005 f97f 	bl	8006b2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	695a      	ldr	r2, [r3, #20]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800183e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f002 fd79 	bl	800433c <USB_ReadInterrupts>
 800184a:	4603      	mov	r3, r0
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	2b08      	cmp	r3, #8
 8001852:	d10a      	bne.n	800186a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f005 f95c 	bl	8006b12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	695a      	ldr	r2, [r3, #20]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f002 0208 	and.w	r2, r2, #8
 8001868:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f002 fd64 	bl	800433c <USB_ReadInterrupts>
 8001874:	4603      	mov	r3, r0
 8001876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800187a:	2b80      	cmp	r3, #128	@ 0x80
 800187c:	d123      	bne.n	80018c6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001886:	6a3b      	ldr	r3, [r7, #32]
 8001888:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800188a:	2301      	movs	r3, #1
 800188c:	627b      	str	r3, [r7, #36]	@ 0x24
 800188e:	e014      	b.n	80018ba <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001894:	4613      	mov	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	4413      	add	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d105      	bne.n	80018b4 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80018a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	4619      	mov	r1, r3
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 fb0a 	bl	8001ec8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b6:	3301      	adds	r3, #1
 80018b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	791b      	ldrb	r3, [r3, #4]
 80018be:	461a      	mov	r2, r3
 80018c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d3e4      	bcc.n	8001890 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f002 fd36 	bl	800433c <USB_ReadInterrupts>
 80018d0:	4603      	mov	r3, r0
 80018d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80018da:	d13c      	bne.n	8001956 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018dc:	2301      	movs	r3, #1
 80018de:	627b      	str	r3, [r7, #36]	@ 0x24
 80018e0:	e02b      	b.n	800193a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80018e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e4:	015a      	lsls	r2, r3, #5
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	4413      	add	r3, r2
 80018ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80018f2:	6879      	ldr	r1, [r7, #4]
 80018f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018f6:	4613      	mov	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	4413      	add	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	440b      	add	r3, r1
 8001900:	3318      	adds	r3, #24
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d115      	bne.n	8001934 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001908:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800190a:	2b00      	cmp	r3, #0
 800190c:	da12      	bge.n	8001934 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001912:	4613      	mov	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	4413      	add	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	3317      	adds	r3, #23
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001924:	b2db      	uxtb	r3, r3
 8001926:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800192a:	b2db      	uxtb	r3, r3
 800192c:	4619      	mov	r1, r3
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 faca 	bl	8001ec8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001936:	3301      	adds	r3, #1
 8001938:	627b      	str	r3, [r7, #36]	@ 0x24
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	791b      	ldrb	r3, [r3, #4]
 800193e:	461a      	mov	r2, r3
 8001940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001942:	4293      	cmp	r3, r2
 8001944:	d3cd      	bcc.n	80018e2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	695a      	ldr	r2, [r3, #20]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001954:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f002 fcee 	bl	800433c <USB_ReadInterrupts>
 8001960:	4603      	mov	r3, r0
 8001962:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001966:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800196a:	d156      	bne.n	8001a1a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800196c:	2301      	movs	r3, #1
 800196e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001970:	e045      	b.n	80019fe <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001974:	015a      	lsls	r2, r3, #5
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	4413      	add	r3, r2
 800197a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001986:	4613      	mov	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	4413      	add	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	440b      	add	r3, r1
 8001990:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d12e      	bne.n	80019f8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800199a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800199c:	2b00      	cmp	r3, #0
 800199e:	da2b      	bge.n	80019f8 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	0c1a      	lsrs	r2, r3, #16
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80019aa:	4053      	eors	r3, r2
 80019ac:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d121      	bne.n	80019f8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019b8:	4613      	mov	r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	4413      	add	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80019c6:	2201      	movs	r2, #1
 80019c8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80019ca:	6a3b      	ldr	r3, [r7, #32]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10a      	bne.n	80019f8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	69fa      	ldr	r2, [r7, #28]
 80019ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80019f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019f4:	6053      	str	r3, [r2, #4]
            break;
 80019f6:	e008      	b.n	8001a0a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fa:	3301      	adds	r3, #1
 80019fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	791b      	ldrb	r3, [r3, #4]
 8001a02:	461a      	mov	r2, r3
 8001a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d3b3      	bcc.n	8001972 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	695a      	ldr	r2, [r3, #20]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001a18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f002 fc8c 	bl	800433c <USB_ReadInterrupts>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a2e:	d10a      	bne.n	8001a46 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f005 f8fd 	bl	8006c30 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	695a      	ldr	r2, [r3, #20]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8001a44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f002 fc76 	bl	800433c <USB_ReadInterrupts>
 8001a50:	4603      	mov	r3, r0
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d115      	bne.n	8001a86 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f005 f8ed 	bl	8006c4c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6859      	ldr	r1, [r3, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	e000      	b.n	8001a86 <HAL_PCD_IRQHandler+0x93c>
      return;
 8001a84:	bf00      	nop
    }
  }
}
 8001a86:	3734      	adds	r7, #52	@ 0x34
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd90      	pop	{r4, r7, pc}

08001a8c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d101      	bne.n	8001aa6 <HAL_PCD_SetAddress+0x1a>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e012      	b.n	8001acc <HAL_PCD_SetAddress+0x40>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	78fa      	ldrb	r2, [r7, #3]
 8001ab2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	78fa      	ldrb	r2, [r7, #3]
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f002 fbd5 	bl	800426c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	4608      	mov	r0, r1
 8001ade:	4611      	mov	r1, r2
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	70fb      	strb	r3, [r7, #3]
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	803b      	strh	r3, [r7, #0]
 8001aea:	4613      	mov	r3, r2
 8001aec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001af2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	da0f      	bge.n	8001b1a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001afa:	78fb      	ldrb	r3, [r7, #3]
 8001afc:	f003 020f 	and.w	r2, r3, #15
 8001b00:	4613      	mov	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4413      	add	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	3310      	adds	r3, #16
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	3304      	adds	r3, #4
 8001b10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2201      	movs	r2, #1
 8001b16:	705a      	strb	r2, [r3, #1]
 8001b18:	e00f      	b.n	8001b3a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b1a:	78fb      	ldrb	r3, [r7, #3]
 8001b1c:	f003 020f 	and.w	r2, r3, #15
 8001b20:	4613      	mov	r3, r2
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	4413      	add	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	4413      	add	r3, r2
 8001b30:	3304      	adds	r3, #4
 8001b32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b3a:	78fb      	ldrb	r3, [r7, #3]
 8001b3c:	f003 030f 	and.w	r3, r3, #15
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8001b46:	883b      	ldrh	r3, [r7, #0]
 8001b48:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	78ba      	ldrb	r2, [r7, #2]
 8001b54:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	785b      	ldrb	r3, [r3, #1]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d004      	beq.n	8001b68 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b68:	78bb      	ldrb	r3, [r7, #2]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d102      	bne.n	8001b74 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d101      	bne.n	8001b82 <HAL_PCD_EP_Open+0xae>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e00e      	b.n	8001ba0 <HAL_PCD_EP_Open+0xcc>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68f9      	ldr	r1, [r7, #12]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f001 fd55 	bl	8003640 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8001b9e:	7afb      	ldrb	r3, [r7, #11]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	da0f      	bge.n	8001bdc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	f003 020f 	and.w	r2, r3, #15
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	4413      	add	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	3310      	adds	r3, #16
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	4413      	add	r3, r2
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	705a      	strb	r2, [r3, #1]
 8001bda:	e00f      	b.n	8001bfc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bdc:	78fb      	ldrb	r3, [r7, #3]
 8001bde:	f003 020f 	and.w	r2, r3, #15
 8001be2:	4613      	mov	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	4413      	add	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d101      	bne.n	8001c16 <HAL_PCD_EP_Close+0x6e>
 8001c12:	2302      	movs	r3, #2
 8001c14:	e00e      	b.n	8001c34 <HAL_PCD_EP_Close+0x8c>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68f9      	ldr	r1, [r7, #12]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f001 fd93 	bl	8003750 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	607a      	str	r2, [r7, #4]
 8001c46:	603b      	str	r3, [r7, #0]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c4c:	7afb      	ldrb	r3, [r7, #11]
 8001c4e:	f003 020f 	and.w	r2, r3, #15
 8001c52:	4613      	mov	r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	4413      	add	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	4413      	add	r3, r2
 8001c62:	3304      	adds	r3, #4
 8001c64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	2200      	movs	r2, #0
 8001c76:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c7e:	7afb      	ldrb	r3, [r7, #11]
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	799b      	ldrb	r3, [r3, #6]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d102      	bne.n	8001c98 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6818      	ldr	r0, [r3, #0]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	799b      	ldrb	r3, [r3, #6]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	6979      	ldr	r1, [r7, #20]
 8001ca4:	f001 fe30 	bl	8003908 <USB_EPStartXfer>

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	460b      	mov	r3, r1
 8001cbc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001cbe:	78fb      	ldrb	r3, [r7, #3]
 8001cc0:	f003 020f 	and.w	r2, r3, #15
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	4413      	add	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	440b      	add	r3, r1
 8001cd0:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8001cd4:	681b      	ldr	r3, [r3, #0]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b086      	sub	sp, #24
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	603b      	str	r3, [r7, #0]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cf2:	7afb      	ldrb	r3, [r7, #11]
 8001cf4:	f003 020f 	and.w	r2, r3, #15
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	3310      	adds	r3, #16
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	4413      	add	r3, r2
 8001d06:	3304      	adds	r3, #4
 8001d08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d22:	7afb      	ldrb	r3, [r7, #11]
 8001d24:	f003 030f 	and.w	r3, r3, #15
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	799b      	ldrb	r3, [r3, #6]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d102      	bne.n	8001d3c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	799b      	ldrb	r3, [r3, #6]
 8001d44:	461a      	mov	r2, r3
 8001d46:	6979      	ldr	r1, [r7, #20]
 8001d48:	f001 fdde 	bl	8003908 <USB_EPStartXfer>

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b084      	sub	sp, #16
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d62:	78fb      	ldrb	r3, [r7, #3]
 8001d64:	f003 030f 	and.w	r3, r3, #15
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	7912      	ldrb	r2, [r2, #4]
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d901      	bls.n	8001d74 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e04f      	b.n	8001e14 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	da0f      	bge.n	8001d9c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	f003 020f 	and.w	r2, r3, #15
 8001d82:	4613      	mov	r3, r2
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4413      	add	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	3310      	adds	r3, #16
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	4413      	add	r3, r2
 8001d90:	3304      	adds	r3, #4
 8001d92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2201      	movs	r2, #1
 8001d98:	705a      	strb	r2, [r3, #1]
 8001d9a:	e00d      	b.n	8001db8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d9c:	78fa      	ldrb	r2, [r7, #3]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	4413      	add	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	3304      	adds	r3, #4
 8001db0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dbe:	78fb      	ldrb	r3, [r7, #3]
 8001dc0:	f003 030f 	and.w	r3, r3, #15
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d101      	bne.n	8001dd8 <HAL_PCD_EP_SetStall+0x82>
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e01d      	b.n	8001e14 <HAL_PCD_EP_SetStall+0xbe>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68f9      	ldr	r1, [r7, #12]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f002 f96c 	bl	80040c4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dec:	78fb      	ldrb	r3, [r7, #3]
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d109      	bne.n	8001e0a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	7999      	ldrb	r1, [r3, #6]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001e04:	461a      	mov	r2, r3
 8001e06:	f002 fb5d 	bl	80044c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	7912      	ldrb	r2, [r2, #4]
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e042      	b.n	8001ec0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	da0f      	bge.n	8001e62 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e42:	78fb      	ldrb	r3, [r7, #3]
 8001e44:	f003 020f 	and.w	r2, r3, #15
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	3310      	adds	r3, #16
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	3304      	adds	r3, #4
 8001e58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	705a      	strb	r2, [r3, #1]
 8001e60:	e00f      	b.n	8001e82 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e62:	78fb      	ldrb	r3, [r7, #3]
 8001e64:	f003 020f 	and.w	r2, r3, #15
 8001e68:	4613      	mov	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	4413      	add	r3, r2
 8001e78:	3304      	adds	r3, #4
 8001e7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_PCD_EP_ClrStall+0x86>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e00e      	b.n	8001ec0 <HAL_PCD_EP_ClrStall+0xa4>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68f9      	ldr	r1, [r7, #12]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f002 f975 	bl	80041a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001ed4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	da0c      	bge.n	8001ef6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001edc:	78fb      	ldrb	r3, [r7, #3]
 8001ede:	f003 020f 	and.w	r2, r3, #15
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	3310      	adds	r3, #16
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	4413      	add	r3, r2
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	e00c      	b.n	8001f10 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ef6:	78fb      	ldrb	r3, [r7, #3]
 8001ef8:	f003 020f 	and.w	r2, r3, #15
 8001efc:	4613      	mov	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68f9      	ldr	r1, [r7, #12]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f001 ff94 	bl	8003e44 <USB_EPStopXfer>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001f20:	7afb      	ldrb	r3, [r7, #11]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b08a      	sub	sp, #40	@ 0x28
 8001f2e:	af02      	add	r7, sp, #8
 8001f30:	6078      	str	r0, [r7, #4]
 8001f32:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	4613      	mov	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4413      	add	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	3310      	adds	r3, #16
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3304      	adds	r3, #4
 8001f50:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	695a      	ldr	r2, [r3, #20]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d901      	bls.n	8001f62 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e06b      	b.n	800203a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	691a      	ldr	r2, [r3, #16]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	69fa      	ldr	r2, [r7, #28]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d902      	bls.n	8001f7e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3303      	adds	r3, #3
 8001f82:	089b      	lsrs	r3, r3, #2
 8001f84:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f86:	e02a      	b.n	8001fde <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	691a      	ldr	r2, [r3, #16]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	69fa      	ldr	r2, [r7, #28]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d902      	bls.n	8001fa4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	3303      	adds	r3, #3
 8001fa8:	089b      	lsrs	r3, r3, #2
 8001faa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	68d9      	ldr	r1, [r3, #12]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6978      	ldr	r0, [r7, #20]
 8001fc2:	f001 ffe9 	bl	8003f98 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	441a      	add	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	695a      	ldr	r2, [r3, #20]
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	441a      	add	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	015a      	lsls	r2, r3, #5
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d809      	bhi.n	8002008 <PCD_WriteEmptyTxFifo+0xde>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	695a      	ldr	r2, [r3, #20]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d203      	bcs.n	8002008 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1bf      	bne.n	8001f88 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	691a      	ldr	r2, [r3, #16]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	429a      	cmp	r2, r3
 8002012:	d811      	bhi.n	8002038 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	2201      	movs	r2, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002028:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	43db      	mvns	r3, r3
 800202e:	6939      	ldr	r1, [r7, #16]
 8002030:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002034:	4013      	ands	r3, r2
 8002036:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3720      	adds	r7, #32
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	333c      	adds	r3, #60	@ 0x3c
 800205c:	3304      	adds	r3, #4
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	015a      	lsls	r2, r3, #5
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	4413      	add	r3, r2
 800206a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	799b      	ldrb	r3, [r3, #6]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d17b      	bne.n	8002172 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	f003 0308 	and.w	r3, r3, #8
 8002080:	2b00      	cmp	r3, #0
 8002082:	d015      	beq.n	80020b0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	4a61      	ldr	r2, [pc, #388]	@ (800220c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002088:	4293      	cmp	r3, r2
 800208a:	f240 80b9 	bls.w	8002200 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 80b3 	beq.w	8002200 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	015a      	lsls	r2, r3, #5
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020a6:	461a      	mov	r2, r3
 80020a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020ac:	6093      	str	r3, [r2, #8]
 80020ae:	e0a7      	b.n	8002200 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	f003 0320 	and.w	r3, r3, #32
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d009      	beq.n	80020ce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	015a      	lsls	r2, r3, #5
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	4413      	add	r3, r2
 80020c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020c6:	461a      	mov	r2, r3
 80020c8:	2320      	movs	r3, #32
 80020ca:	6093      	str	r3, [r2, #8]
 80020cc:	e098      	b.n	8002200 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f040 8093 	bne.w	8002200 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	4a4b      	ldr	r2, [pc, #300]	@ (800220c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d90f      	bls.n	8002102 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00a      	beq.n	8002102 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020f8:	461a      	mov	r2, r3
 80020fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020fe:	6093      	str	r3, [r2, #8]
 8002100:	e07e      	b.n	8002200 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	4413      	add	r3, r2
 8002114:	3304      	adds	r3, #4
 8002116:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a1a      	ldr	r2, [r3, #32]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	0159      	lsls	r1, r3, #5
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	440b      	add	r3, r1
 8002124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800212e:	1ad2      	subs	r2, r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d114      	bne.n	8002164 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d109      	bne.n	8002156 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6818      	ldr	r0, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800214c:	461a      	mov	r2, r3
 800214e:	2101      	movs	r1, #1
 8002150:	f002 f9b8 	bl	80044c4 <USB_EP0_OutStart>
 8002154:	e006      	b.n	8002164 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	441a      	add	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	b2db      	uxtb	r3, r3
 8002168:	4619      	mov	r1, r3
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f004 fc9c 	bl	8006aa8 <HAL_PCD_DataOutStageCallback>
 8002170:	e046      	b.n	8002200 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	4a26      	ldr	r2, [pc, #152]	@ (8002210 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d124      	bne.n	80021c4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00a      	beq.n	800219a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	015a      	lsls	r2, r3, #5
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	4413      	add	r3, r2
 800218c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002190:	461a      	mov	r2, r3
 8002192:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002196:	6093      	str	r3, [r2, #8]
 8002198:	e032      	b.n	8002200 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	f003 0320 	and.w	r3, r3, #32
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d008      	beq.n	80021b6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021b0:	461a      	mov	r2, r3
 80021b2:	2320      	movs	r3, #32
 80021b4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	4619      	mov	r1, r3
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f004 fc73 	bl	8006aa8 <HAL_PCD_DataOutStageCallback>
 80021c2:	e01d      	b.n	8002200 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d114      	bne.n	80021f4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	4613      	mov	r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4413      	add	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d108      	bne.n	80021f4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6818      	ldr	r0, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80021ec:	461a      	mov	r2, r3
 80021ee:	2100      	movs	r1, #0
 80021f0:	f002 f968 	bl	80044c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	4619      	mov	r1, r3
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f004 fc54 	bl	8006aa8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3720      	adds	r7, #32
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	4f54300a 	.word	0x4f54300a
 8002210:	4f54310a 	.word	0x4f54310a

08002214 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	333c      	adds	r3, #60	@ 0x3c
 800222c:	3304      	adds	r3, #4
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	4413      	add	r3, r2
 800223a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4a15      	ldr	r2, [pc, #84]	@ (800229c <PCD_EP_OutSetupPacket_int+0x88>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d90e      	bls.n	8002268 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002250:	2b00      	cmp	r3, #0
 8002252:	d009      	beq.n	8002268 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4413      	add	r3, r2
 800225c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002260:	461a      	mov	r2, r3
 8002262:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002266:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f004 fc0b 	bl	8006a84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4a0a      	ldr	r2, [pc, #40]	@ (800229c <PCD_EP_OutSetupPacket_int+0x88>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d90c      	bls.n	8002290 <PCD_EP_OutSetupPacket_int+0x7c>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	799b      	ldrb	r3, [r3, #6]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d108      	bne.n	8002290 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002288:	461a      	mov	r2, r3
 800228a:	2101      	movs	r1, #1
 800228c:	f002 f91a 	bl	80044c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	4f54300a 	.word	0x4f54300a

080022a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	70fb      	strb	r3, [r7, #3]
 80022ac:	4613      	mov	r3, r2
 80022ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d107      	bne.n	80022ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80022be:	883b      	ldrh	r3, [r7, #0]
 80022c0:	0419      	lsls	r1, r3, #16
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80022cc:	e028      	b.n	8002320 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d4:	0c1b      	lsrs	r3, r3, #16
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	4413      	add	r3, r2
 80022da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022dc:	2300      	movs	r3, #0
 80022de:	73fb      	strb	r3, [r7, #15]
 80022e0:	e00d      	b.n	80022fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	3340      	adds	r3, #64	@ 0x40
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	0c1b      	lsrs	r3, r3, #16
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	4413      	add	r3, r2
 80022f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	3301      	adds	r3, #1
 80022fc:	73fb      	strb	r3, [r7, #15]
 80022fe:	7bfa      	ldrb	r2, [r7, #15]
 8002300:	78fb      	ldrb	r3, [r7, #3]
 8002302:	3b01      	subs	r3, #1
 8002304:	429a      	cmp	r2, r3
 8002306:	d3ec      	bcc.n	80022e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002308:	883b      	ldrh	r3, [r7, #0]
 800230a:	0418      	lsls	r0, r3, #16
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6819      	ldr	r1, [r3, #0]
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	3b01      	subs	r3, #1
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	4302      	orrs	r2, r0
 8002318:	3340      	adds	r3, #64	@ 0x40
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
 8002336:	460b      	mov	r3, r1
 8002338:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	887a      	ldrh	r2, [r7, #2]
 8002340:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e267      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d075      	beq.n	8002472 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002386:	4b88      	ldr	r3, [pc, #544]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	2b04      	cmp	r3, #4
 8002390:	d00c      	beq.n	80023ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002392:	4b85      	ldr	r3, [pc, #532]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800239a:	2b08      	cmp	r3, #8
 800239c:	d112      	bne.n	80023c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800239e:	4b82      	ldr	r3, [pc, #520]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023aa:	d10b      	bne.n	80023c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ac:	4b7e      	ldr	r3, [pc, #504]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d05b      	beq.n	8002470 <HAL_RCC_OscConfig+0x108>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d157      	bne.n	8002470 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e242      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023cc:	d106      	bne.n	80023dc <HAL_RCC_OscConfig+0x74>
 80023ce:	4b76      	ldr	r3, [pc, #472]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a75      	ldr	r2, [pc, #468]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e01d      	b.n	8002418 <HAL_RCC_OscConfig+0xb0>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023e4:	d10c      	bne.n	8002400 <HAL_RCC_OscConfig+0x98>
 80023e6:	4b70      	ldr	r3, [pc, #448]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a6f      	ldr	r2, [pc, #444]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	4b6d      	ldr	r3, [pc, #436]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a6c      	ldr	r2, [pc, #432]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023fc:	6013      	str	r3, [r2, #0]
 80023fe:	e00b      	b.n	8002418 <HAL_RCC_OscConfig+0xb0>
 8002400:	4b69      	ldr	r3, [pc, #420]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a68      	ldr	r2, [pc, #416]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002406:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	4b66      	ldr	r3, [pc, #408]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a65      	ldr	r2, [pc, #404]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002412:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d013      	beq.n	8002448 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7fe fa40 	bl	80008a4 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002428:	f7fe fa3c 	bl	80008a4 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b64      	cmp	r3, #100	@ 0x64
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e207      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243a:	4b5b      	ldr	r3, [pc, #364]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0xc0>
 8002446:	e014      	b.n	8002472 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002448:	f7fe fa2c 	bl	80008a4 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002450:	f7fe fa28 	bl	80008a4 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b64      	cmp	r3, #100	@ 0x64
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e1f3      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002462:	4b51      	ldr	r3, [pc, #324]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f0      	bne.n	8002450 <HAL_RCC_OscConfig+0xe8>
 800246e:	e000      	b.n	8002472 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d063      	beq.n	8002546 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800247e:	4b4a      	ldr	r3, [pc, #296]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00b      	beq.n	80024a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800248a:	4b47      	ldr	r3, [pc, #284]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002492:	2b08      	cmp	r3, #8
 8002494:	d11c      	bne.n	80024d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002496:	4b44      	ldr	r3, [pc, #272]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d116      	bne.n	80024d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a2:	4b41      	ldr	r3, [pc, #260]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d005      	beq.n	80024ba <HAL_RCC_OscConfig+0x152>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d001      	beq.n	80024ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e1c7      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ba:	4b3b      	ldr	r3, [pc, #236]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4937      	ldr	r1, [pc, #220]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ce:	e03a      	b.n	8002546 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d020      	beq.n	800251a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d8:	4b34      	ldr	r3, [pc, #208]	@ (80025ac <HAL_RCC_OscConfig+0x244>)
 80024da:	2201      	movs	r2, #1
 80024dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024de:	f7fe f9e1 	bl	80008a4 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e6:	f7fe f9dd 	bl	80008a4 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e1a8      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f8:	4b2b      	ldr	r3, [pc, #172]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002504:	4b28      	ldr	r3, [pc, #160]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4925      	ldr	r1, [pc, #148]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 8002514:	4313      	orrs	r3, r2
 8002516:	600b      	str	r3, [r1, #0]
 8002518:	e015      	b.n	8002546 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800251a:	4b24      	ldr	r3, [pc, #144]	@ (80025ac <HAL_RCC_OscConfig+0x244>)
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002520:	f7fe f9c0 	bl	80008a4 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002528:	f7fe f9bc 	bl	80008a4 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e187      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253a:	4b1b      	ldr	r3, [pc, #108]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	2b00      	cmp	r3, #0
 8002550:	d036      	beq.n	80025c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d016      	beq.n	8002588 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800255a:	4b15      	ldr	r3, [pc, #84]	@ (80025b0 <HAL_RCC_OscConfig+0x248>)
 800255c:	2201      	movs	r2, #1
 800255e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002560:	f7fe f9a0 	bl	80008a4 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002568:	f7fe f99c 	bl	80008a4 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e167      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257a:	4b0b      	ldr	r3, [pc, #44]	@ (80025a8 <HAL_RCC_OscConfig+0x240>)
 800257c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0x200>
 8002586:	e01b      	b.n	80025c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002588:	4b09      	ldr	r3, [pc, #36]	@ (80025b0 <HAL_RCC_OscConfig+0x248>)
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258e:	f7fe f989 	bl	80008a4 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002594:	e00e      	b.n	80025b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002596:	f7fe f985 	bl	80008a4 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d907      	bls.n	80025b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e150      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
 80025a8:	40023800 	.word	0x40023800
 80025ac:	42470000 	.word	0x42470000
 80025b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b4:	4b88      	ldr	r3, [pc, #544]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 80025b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1ea      	bne.n	8002596 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 8097 	beq.w	80026fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ce:	2300      	movs	r3, #0
 80025d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d2:	4b81      	ldr	r3, [pc, #516]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10f      	bne.n	80025fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	4b7d      	ldr	r3, [pc, #500]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	4a7c      	ldr	r2, [pc, #496]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 80025e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ee:	4b7a      	ldr	r3, [pc, #488]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025fa:	2301      	movs	r3, #1
 80025fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fe:	4b77      	ldr	r3, [pc, #476]	@ (80027dc <HAL_RCC_OscConfig+0x474>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002606:	2b00      	cmp	r3, #0
 8002608:	d118      	bne.n	800263c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800260a:	4b74      	ldr	r3, [pc, #464]	@ (80027dc <HAL_RCC_OscConfig+0x474>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a73      	ldr	r2, [pc, #460]	@ (80027dc <HAL_RCC_OscConfig+0x474>)
 8002610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002616:	f7fe f945 	bl	80008a4 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800261e:	f7fe f941 	bl	80008a4 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e10c      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002630:	4b6a      	ldr	r3, [pc, #424]	@ (80027dc <HAL_RCC_OscConfig+0x474>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d106      	bne.n	8002652 <HAL_RCC_OscConfig+0x2ea>
 8002644:	4b64      	ldr	r3, [pc, #400]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002648:	4a63      	ldr	r2, [pc, #396]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002650:	e01c      	b.n	800268c <HAL_RCC_OscConfig+0x324>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	2b05      	cmp	r3, #5
 8002658:	d10c      	bne.n	8002674 <HAL_RCC_OscConfig+0x30c>
 800265a:	4b5f      	ldr	r3, [pc, #380]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 800265c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800265e:	4a5e      	ldr	r2, [pc, #376]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002660:	f043 0304 	orr.w	r3, r3, #4
 8002664:	6713      	str	r3, [r2, #112]	@ 0x70
 8002666:	4b5c      	ldr	r3, [pc, #368]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800266a:	4a5b      	ldr	r2, [pc, #364]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6713      	str	r3, [r2, #112]	@ 0x70
 8002672:	e00b      	b.n	800268c <HAL_RCC_OscConfig+0x324>
 8002674:	4b58      	ldr	r3, [pc, #352]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002678:	4a57      	ldr	r2, [pc, #348]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 800267a:	f023 0301 	bic.w	r3, r3, #1
 800267e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002680:	4b55      	ldr	r3, [pc, #340]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002684:	4a54      	ldr	r2, [pc, #336]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002686:	f023 0304 	bic.w	r3, r3, #4
 800268a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d015      	beq.n	80026c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002694:	f7fe f906 	bl	80008a4 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269a:	e00a      	b.n	80026b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269c:	f7fe f902 	bl	80008a4 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e0cb      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b2:	4b49      	ldr	r3, [pc, #292]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 80026b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0ee      	beq.n	800269c <HAL_RCC_OscConfig+0x334>
 80026be:	e014      	b.n	80026ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c0:	f7fe f8f0 	bl	80008a4 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c6:	e00a      	b.n	80026de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c8:	f7fe f8ec 	bl	80008a4 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e0b5      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026de:	4b3e      	ldr	r3, [pc, #248]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 80026e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1ee      	bne.n	80026c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026ea:	7dfb      	ldrb	r3, [r7, #23]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d105      	bne.n	80026fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026f0:	4b39      	ldr	r3, [pc, #228]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 80026f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f4:	4a38      	ldr	r2, [pc, #224]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 80026f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 80a1 	beq.w	8002848 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002706:	4b34      	ldr	r3, [pc, #208]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b08      	cmp	r3, #8
 8002710:	d05c      	beq.n	80027cc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d141      	bne.n	800279e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271a:	4b31      	ldr	r3, [pc, #196]	@ (80027e0 <HAL_RCC_OscConfig+0x478>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002720:	f7fe f8c0 	bl	80008a4 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002728:	f7fe f8bc 	bl	80008a4 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e087      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273a:	4b27      	ldr	r3, [pc, #156]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69da      	ldr	r2, [r3, #28]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002754:	019b      	lsls	r3, r3, #6
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275c:	085b      	lsrs	r3, r3, #1
 800275e:	3b01      	subs	r3, #1
 8002760:	041b      	lsls	r3, r3, #16
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002768:	061b      	lsls	r3, r3, #24
 800276a:	491b      	ldr	r1, [pc, #108]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 800276c:	4313      	orrs	r3, r2
 800276e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002770:	4b1b      	ldr	r3, [pc, #108]	@ (80027e0 <HAL_RCC_OscConfig+0x478>)
 8002772:	2201      	movs	r2, #1
 8002774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002776:	f7fe f895 	bl	80008a4 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277e:	f7fe f891 	bl	80008a4 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e05c      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002790:	4b11      	ldr	r3, [pc, #68]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x416>
 800279c:	e054      	b.n	8002848 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279e:	4b10      	ldr	r3, [pc, #64]	@ (80027e0 <HAL_RCC_OscConfig+0x478>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a4:	f7fe f87e 	bl	80008a4 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ac:	f7fe f87a 	bl	80008a4 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e045      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027be:	4b06      	ldr	r3, [pc, #24]	@ (80027d8 <HAL_RCC_OscConfig+0x470>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x444>
 80027ca:	e03d      	b.n	8002848 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d107      	bne.n	80027e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e038      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40007000 	.word	0x40007000
 80027e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002854 <HAL_RCC_OscConfig+0x4ec>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d028      	beq.n	8002844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d121      	bne.n	8002844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280a:	429a      	cmp	r2, r3
 800280c:	d11a      	bne.n	8002844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002814:	4013      	ands	r3, r2
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800281a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800281c:	4293      	cmp	r3, r2
 800281e:	d111      	bne.n	8002844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800282a:	085b      	lsrs	r3, r3, #1
 800282c:	3b01      	subs	r3, #1
 800282e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002830:	429a      	cmp	r2, r3
 8002832:	d107      	bne.n	8002844 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002840:	429a      	cmp	r2, r3
 8002842:	d001      	beq.n	8002848 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e000      	b.n	800284a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40023800 	.word	0x40023800

08002858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e0cc      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800286c:	4b68      	ldr	r3, [pc, #416]	@ (8002a10 <HAL_RCC_ClockConfig+0x1b8>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d90c      	bls.n	8002894 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287a:	4b65      	ldr	r3, [pc, #404]	@ (8002a10 <HAL_RCC_ClockConfig+0x1b8>)
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002882:	4b63      	ldr	r3, [pc, #396]	@ (8002a10 <HAL_RCC_ClockConfig+0x1b8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	429a      	cmp	r2, r3
 800288e:	d001      	beq.n	8002894 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0b8      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d020      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d005      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028ac:	4b59      	ldr	r3, [pc, #356]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	4a58      	ldr	r2, [pc, #352]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80028b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d005      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028c4:	4b53      	ldr	r3, [pc, #332]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	4a52      	ldr	r2, [pc, #328]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80028ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d0:	4b50      	ldr	r3, [pc, #320]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	494d      	ldr	r1, [pc, #308]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d044      	beq.n	8002978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d107      	bne.n	8002906 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f6:	4b47      	ldr	r3, [pc, #284]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d119      	bne.n	8002936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e07f      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d003      	beq.n	8002916 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002912:	2b03      	cmp	r3, #3
 8002914:	d107      	bne.n	8002926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002916:	4b3f      	ldr	r3, [pc, #252]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d109      	bne.n	8002936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e06f      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002926:	4b3b      	ldr	r3, [pc, #236]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e067      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002936:	4b37      	ldr	r3, [pc, #220]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f023 0203 	bic.w	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	4934      	ldr	r1, [pc, #208]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 8002944:	4313      	orrs	r3, r2
 8002946:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002948:	f7fd ffac 	bl	80008a4 <HAL_GetTick>
 800294c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294e:	e00a      	b.n	8002966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002950:	f7fd ffa8 	bl	80008a4 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e04f      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002966:	4b2b      	ldr	r3, [pc, #172]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 020c 	and.w	r2, r3, #12
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	429a      	cmp	r2, r3
 8002976:	d1eb      	bne.n	8002950 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002978:	4b25      	ldr	r3, [pc, #148]	@ (8002a10 <HAL_RCC_ClockConfig+0x1b8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d20c      	bcs.n	80029a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002986:	4b22      	ldr	r3, [pc, #136]	@ (8002a10 <HAL_RCC_ClockConfig+0x1b8>)
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800298e:	4b20      	ldr	r3, [pc, #128]	@ (8002a10 <HAL_RCC_ClockConfig+0x1b8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d001      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e032      	b.n	8002a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d008      	beq.n	80029be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ac:	4b19      	ldr	r3, [pc, #100]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	4916      	ldr	r1, [pc, #88]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d009      	beq.n	80029de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ca:	4b12      	ldr	r3, [pc, #72]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	490e      	ldr	r1, [pc, #56]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029de:	f000 f821 	bl	8002a24 <HAL_RCC_GetSysClockFreq>
 80029e2:	4602      	mov	r2, r0
 80029e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a14 <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	490a      	ldr	r1, [pc, #40]	@ (8002a18 <HAL_RCC_ClockConfig+0x1c0>)
 80029f0:	5ccb      	ldrb	r3, [r1, r3]
 80029f2:	fa22 f303 	lsr.w	r3, r2, r3
 80029f6:	4a09      	ldr	r2, [pc, #36]	@ (8002a1c <HAL_RCC_ClockConfig+0x1c4>)
 80029f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80029fa:	4b09      	ldr	r3, [pc, #36]	@ (8002a20 <HAL_RCC_ClockConfig+0x1c8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fd ff0c 	bl	800081c <HAL_InitTick>

  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40023c00 	.word	0x40023c00
 8002a14:	40023800 	.word	0x40023800
 8002a18:	08007cb8 	.word	0x08007cb8
 8002a1c:	20000000 	.word	0x20000000
 8002a20:	20000004 	.word	0x20000004

08002a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a28:	b094      	sub	sp, #80	@ 0x50
 8002a2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002a30:	2300      	movs	r3, #0
 8002a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a3c:	4b79      	ldr	r3, [pc, #484]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 030c 	and.w	r3, r3, #12
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d00d      	beq.n	8002a64 <HAL_RCC_GetSysClockFreq+0x40>
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	f200 80e1 	bhi.w	8002c10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d002      	beq.n	8002a58 <HAL_RCC_GetSysClockFreq+0x34>
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	d003      	beq.n	8002a5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a56:	e0db      	b.n	8002c10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a58:	4b73      	ldr	r3, [pc, #460]	@ (8002c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a5c:	e0db      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a5e:	4b73      	ldr	r3, [pc, #460]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0x208>)
 8002a60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a62:	e0d8      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a64:	4b6f      	ldr	r3, [pc, #444]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a6c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a6e:	4b6d      	ldr	r3, [pc, #436]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d063      	beq.n	8002b42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a7a:	4b6a      	ldr	r3, [pc, #424]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	099b      	lsrs	r3, r3, #6
 8002a80:	2200      	movs	r2, #0
 8002a82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a84:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a8e:	2300      	movs	r3, #0
 8002a90:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a96:	4622      	mov	r2, r4
 8002a98:	462b      	mov	r3, r5
 8002a9a:	f04f 0000 	mov.w	r0, #0
 8002a9e:	f04f 0100 	mov.w	r1, #0
 8002aa2:	0159      	lsls	r1, r3, #5
 8002aa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aa8:	0150      	lsls	r0, r2, #5
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4621      	mov	r1, r4
 8002ab0:	1a51      	subs	r1, r2, r1
 8002ab2:	6139      	str	r1, [r7, #16]
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ac8:	4659      	mov	r1, fp
 8002aca:	018b      	lsls	r3, r1, #6
 8002acc:	4651      	mov	r1, sl
 8002ace:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ad2:	4651      	mov	r1, sl
 8002ad4:	018a      	lsls	r2, r1, #6
 8002ad6:	4651      	mov	r1, sl
 8002ad8:	ebb2 0801 	subs.w	r8, r2, r1
 8002adc:	4659      	mov	r1, fp
 8002ade:	eb63 0901 	sbc.w	r9, r3, r1
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	f04f 0300 	mov.w	r3, #0
 8002aea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002aee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002af2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002af6:	4690      	mov	r8, r2
 8002af8:	4699      	mov	r9, r3
 8002afa:	4623      	mov	r3, r4
 8002afc:	eb18 0303 	adds.w	r3, r8, r3
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	462b      	mov	r3, r5
 8002b04:	eb49 0303 	adc.w	r3, r9, r3
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b16:	4629      	mov	r1, r5
 8002b18:	024b      	lsls	r3, r1, #9
 8002b1a:	4621      	mov	r1, r4
 8002b1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b20:	4621      	mov	r1, r4
 8002b22:	024a      	lsls	r2, r1, #9
 8002b24:	4610      	mov	r0, r2
 8002b26:	4619      	mov	r1, r3
 8002b28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b34:	f7fd fb84 	bl	8000240 <__aeabi_uldivmod>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b40:	e058      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b42:	4b38      	ldr	r3, [pc, #224]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	099b      	lsrs	r3, r3, #6
 8002b48:	2200      	movs	r2, #0
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	4611      	mov	r1, r2
 8002b4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b52:	623b      	str	r3, [r7, #32]
 8002b54:	2300      	movs	r3, #0
 8002b56:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b5c:	4642      	mov	r2, r8
 8002b5e:	464b      	mov	r3, r9
 8002b60:	f04f 0000 	mov.w	r0, #0
 8002b64:	f04f 0100 	mov.w	r1, #0
 8002b68:	0159      	lsls	r1, r3, #5
 8002b6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b6e:	0150      	lsls	r0, r2, #5
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4641      	mov	r1, r8
 8002b76:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b7a:	4649      	mov	r1, r9
 8002b7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	f04f 0300 	mov.w	r3, #0
 8002b88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b94:	ebb2 040a 	subs.w	r4, r2, sl
 8002b98:	eb63 050b 	sbc.w	r5, r3, fp
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	00eb      	lsls	r3, r5, #3
 8002ba6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002baa:	00e2      	lsls	r2, r4, #3
 8002bac:	4614      	mov	r4, r2
 8002bae:	461d      	mov	r5, r3
 8002bb0:	4643      	mov	r3, r8
 8002bb2:	18e3      	adds	r3, r4, r3
 8002bb4:	603b      	str	r3, [r7, #0]
 8002bb6:	464b      	mov	r3, r9
 8002bb8:	eb45 0303 	adc.w	r3, r5, r3
 8002bbc:	607b      	str	r3, [r7, #4]
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bca:	4629      	mov	r1, r5
 8002bcc:	028b      	lsls	r3, r1, #10
 8002bce:	4621      	mov	r1, r4
 8002bd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bd4:	4621      	mov	r1, r4
 8002bd6:	028a      	lsls	r2, r1, #10
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bde:	2200      	movs	r2, #0
 8002be0:	61bb      	str	r3, [r7, #24]
 8002be2:	61fa      	str	r2, [r7, #28]
 8002be4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002be8:	f7fd fb2a 	bl	8000240 <__aeabi_uldivmod>
 8002bec:	4602      	mov	r2, r0
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	0c1b      	lsrs	r3, r3, #16
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	3301      	adds	r3, #1
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002c04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c0e:	e002      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c10:	4b05      	ldr	r3, [pc, #20]	@ (8002c28 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3750      	adds	r7, #80	@ 0x50
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c22:	bf00      	nop
 8002c24:	40023800 	.word	0x40023800
 8002c28:	00f42400 	.word	0x00f42400
 8002c2c:	007a1200 	.word	0x007a1200

08002c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c34:	4b03      	ldr	r3, [pc, #12]	@ (8002c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c36:	681b      	ldr	r3, [r3, #0]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	20000000 	.word	0x20000000

08002c48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e041      	b.n	8002cde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d106      	bne.n	8002c74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fd fce4 	bl	800063c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3304      	adds	r3, #4
 8002c84:	4619      	mov	r1, r3
 8002c86:	4610      	mov	r0, r2
 8002c88:	f000 f8be 	bl	8002e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
	...

08002ce8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d001      	beq.n	8002d00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e046      	b.n	8002d8e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a23      	ldr	r2, [pc, #140]	@ (8002d9c <HAL_TIM_Base_Start+0xb4>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d022      	beq.n	8002d58 <HAL_TIM_Base_Start+0x70>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d1a:	d01d      	beq.n	8002d58 <HAL_TIM_Base_Start+0x70>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a1f      	ldr	r2, [pc, #124]	@ (8002da0 <HAL_TIM_Base_Start+0xb8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d018      	beq.n	8002d58 <HAL_TIM_Base_Start+0x70>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a1e      	ldr	r2, [pc, #120]	@ (8002da4 <HAL_TIM_Base_Start+0xbc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d013      	beq.n	8002d58 <HAL_TIM_Base_Start+0x70>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a1c      	ldr	r2, [pc, #112]	@ (8002da8 <HAL_TIM_Base_Start+0xc0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d00e      	beq.n	8002d58 <HAL_TIM_Base_Start+0x70>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a1b      	ldr	r2, [pc, #108]	@ (8002dac <HAL_TIM_Base_Start+0xc4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d009      	beq.n	8002d58 <HAL_TIM_Base_Start+0x70>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a19      	ldr	r2, [pc, #100]	@ (8002db0 <HAL_TIM_Base_Start+0xc8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d004      	beq.n	8002d58 <HAL_TIM_Base_Start+0x70>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a18      	ldr	r2, [pc, #96]	@ (8002db4 <HAL_TIM_Base_Start+0xcc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d111      	bne.n	8002d7c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2b06      	cmp	r3, #6
 8002d68:	d010      	beq.n	8002d8c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 0201 	orr.w	r2, r2, #1
 8002d78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d7a:	e007      	b.n	8002d8c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0201 	orr.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40010000 	.word	0x40010000
 8002da0:	40000400 	.word	0x40000400
 8002da4:	40000800 	.word	0x40000800
 8002da8:	40000c00 	.word	0x40000c00
 8002dac:	40010400 	.word	0x40010400
 8002db0:	40014000 	.word	0x40014000
 8002db4:	40001800 	.word	0x40001800

08002db8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6a1a      	ldr	r2, [r3, #32]
 8002dc6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002dca:	4013      	ands	r3, r2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10f      	bne.n	8002df0 <HAL_TIM_Base_Stop+0x38>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	6a1a      	ldr	r2, [r3, #32]
 8002dd6:	f240 4344 	movw	r3, #1092	@ 0x444
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d107      	bne.n	8002df0 <HAL_TIM_Base_Stop+0x38>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0201 	bic.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
	...

08002e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a43      	ldr	r2, [pc, #268]	@ (8002f28 <TIM_Base_SetConfig+0x120>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d013      	beq.n	8002e48 <TIM_Base_SetConfig+0x40>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e26:	d00f      	beq.n	8002e48 <TIM_Base_SetConfig+0x40>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a40      	ldr	r2, [pc, #256]	@ (8002f2c <TIM_Base_SetConfig+0x124>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00b      	beq.n	8002e48 <TIM_Base_SetConfig+0x40>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a3f      	ldr	r2, [pc, #252]	@ (8002f30 <TIM_Base_SetConfig+0x128>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d007      	beq.n	8002e48 <TIM_Base_SetConfig+0x40>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4a3e      	ldr	r2, [pc, #248]	@ (8002f34 <TIM_Base_SetConfig+0x12c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d003      	beq.n	8002e48 <TIM_Base_SetConfig+0x40>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a3d      	ldr	r2, [pc, #244]	@ (8002f38 <TIM_Base_SetConfig+0x130>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d108      	bne.n	8002e5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a32      	ldr	r2, [pc, #200]	@ (8002f28 <TIM_Base_SetConfig+0x120>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d02b      	beq.n	8002eba <TIM_Base_SetConfig+0xb2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e68:	d027      	beq.n	8002eba <TIM_Base_SetConfig+0xb2>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a2f      	ldr	r2, [pc, #188]	@ (8002f2c <TIM_Base_SetConfig+0x124>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d023      	beq.n	8002eba <TIM_Base_SetConfig+0xb2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a2e      	ldr	r2, [pc, #184]	@ (8002f30 <TIM_Base_SetConfig+0x128>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d01f      	beq.n	8002eba <TIM_Base_SetConfig+0xb2>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a2d      	ldr	r2, [pc, #180]	@ (8002f34 <TIM_Base_SetConfig+0x12c>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d01b      	beq.n	8002eba <TIM_Base_SetConfig+0xb2>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a2c      	ldr	r2, [pc, #176]	@ (8002f38 <TIM_Base_SetConfig+0x130>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d017      	beq.n	8002eba <TIM_Base_SetConfig+0xb2>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a2b      	ldr	r2, [pc, #172]	@ (8002f3c <TIM_Base_SetConfig+0x134>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d013      	beq.n	8002eba <TIM_Base_SetConfig+0xb2>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a2a      	ldr	r2, [pc, #168]	@ (8002f40 <TIM_Base_SetConfig+0x138>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d00f      	beq.n	8002eba <TIM_Base_SetConfig+0xb2>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a29      	ldr	r2, [pc, #164]	@ (8002f44 <TIM_Base_SetConfig+0x13c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d00b      	beq.n	8002eba <TIM_Base_SetConfig+0xb2>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a28      	ldr	r2, [pc, #160]	@ (8002f48 <TIM_Base_SetConfig+0x140>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d007      	beq.n	8002eba <TIM_Base_SetConfig+0xb2>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a27      	ldr	r2, [pc, #156]	@ (8002f4c <TIM_Base_SetConfig+0x144>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d003      	beq.n	8002eba <TIM_Base_SetConfig+0xb2>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a26      	ldr	r2, [pc, #152]	@ (8002f50 <TIM_Base_SetConfig+0x148>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d108      	bne.n	8002ecc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ec0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a0e      	ldr	r2, [pc, #56]	@ (8002f28 <TIM_Base_SetConfig+0x120>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d003      	beq.n	8002efa <TIM_Base_SetConfig+0xf2>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a10      	ldr	r2, [pc, #64]	@ (8002f38 <TIM_Base_SetConfig+0x130>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d103      	bne.n	8002f02 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	691a      	ldr	r2, [r3, #16]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f043 0204 	orr.w	r2, r3, #4
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68fa      	ldr	r2, [r7, #12]
 8002f18:	601a      	str	r2, [r3, #0]
}
 8002f1a:	bf00      	nop
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40010000 	.word	0x40010000
 8002f2c:	40000400 	.word	0x40000400
 8002f30:	40000800 	.word	0x40000800
 8002f34:	40000c00 	.word	0x40000c00
 8002f38:	40010400 	.word	0x40010400
 8002f3c:	40014000 	.word	0x40014000
 8002f40:	40014400 	.word	0x40014400
 8002f44:	40014800 	.word	0x40014800
 8002f48:	40001800 	.word	0x40001800
 8002f4c:	40001c00 	.word	0x40001c00
 8002f50:	40002000 	.word	0x40002000

08002f54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f54:	b084      	sub	sp, #16
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b084      	sub	sp, #16
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	f107 001c 	add.w	r0, r7, #28
 8002f62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f66:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d123      	bne.n	8002fb6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f72:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002f82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002f96:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d105      	bne.n	8002faa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f001 fae8 	bl	8004580 <USB_CoreReset>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	73fb      	strb	r3, [r7, #15]
 8002fb4:	e01b      	b.n	8002fee <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f001 fadc 	bl	8004580 <USB_CoreReset>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002fcc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d106      	bne.n	8002fe2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	639a      	str	r2, [r3, #56]	@ 0x38
 8002fe0:	e005      	b.n	8002fee <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002fee:	7fbb      	ldrb	r3, [r7, #30]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d10b      	bne.n	800300c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f043 0206 	orr.w	r2, r3, #6
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f043 0220 	orr.w	r2, r3, #32
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800300c:	7bfb      	ldrb	r3, [r7, #15]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003018:	b004      	add	sp, #16
 800301a:	4770      	bx	lr

0800301c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800301c:	b480      	push	{r7}
 800301e:	b087      	sub	sp, #28
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	4613      	mov	r3, r2
 8003028:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	2b02      	cmp	r3, #2
 800302e:	d165      	bne.n	80030fc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4a41      	ldr	r2, [pc, #260]	@ (8003138 <USB_SetTurnaroundTime+0x11c>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d906      	bls.n	8003046 <USB_SetTurnaroundTime+0x2a>
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	4a40      	ldr	r2, [pc, #256]	@ (800313c <USB_SetTurnaroundTime+0x120>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d202      	bcs.n	8003046 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003040:	230f      	movs	r3, #15
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	e062      	b.n	800310c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	4a3c      	ldr	r2, [pc, #240]	@ (800313c <USB_SetTurnaroundTime+0x120>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d306      	bcc.n	800305c <USB_SetTurnaroundTime+0x40>
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	4a3b      	ldr	r2, [pc, #236]	@ (8003140 <USB_SetTurnaroundTime+0x124>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d202      	bcs.n	800305c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003056:	230e      	movs	r3, #14
 8003058:	617b      	str	r3, [r7, #20]
 800305a:	e057      	b.n	800310c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	4a38      	ldr	r2, [pc, #224]	@ (8003140 <USB_SetTurnaroundTime+0x124>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d306      	bcc.n	8003072 <USB_SetTurnaroundTime+0x56>
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	4a37      	ldr	r2, [pc, #220]	@ (8003144 <USB_SetTurnaroundTime+0x128>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d202      	bcs.n	8003072 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800306c:	230d      	movs	r3, #13
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	e04c      	b.n	800310c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	4a33      	ldr	r2, [pc, #204]	@ (8003144 <USB_SetTurnaroundTime+0x128>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d306      	bcc.n	8003088 <USB_SetTurnaroundTime+0x6c>
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	4a32      	ldr	r2, [pc, #200]	@ (8003148 <USB_SetTurnaroundTime+0x12c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d802      	bhi.n	8003088 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003082:	230c      	movs	r3, #12
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	e041      	b.n	800310c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	4a2f      	ldr	r2, [pc, #188]	@ (8003148 <USB_SetTurnaroundTime+0x12c>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d906      	bls.n	800309e <USB_SetTurnaroundTime+0x82>
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	4a2e      	ldr	r2, [pc, #184]	@ (800314c <USB_SetTurnaroundTime+0x130>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d802      	bhi.n	800309e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003098:	230b      	movs	r3, #11
 800309a:	617b      	str	r3, [r7, #20]
 800309c:	e036      	b.n	800310c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	4a2a      	ldr	r2, [pc, #168]	@ (800314c <USB_SetTurnaroundTime+0x130>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d906      	bls.n	80030b4 <USB_SetTurnaroundTime+0x98>
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	4a29      	ldr	r2, [pc, #164]	@ (8003150 <USB_SetTurnaroundTime+0x134>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d802      	bhi.n	80030b4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80030ae:	230a      	movs	r3, #10
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	e02b      	b.n	800310c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	4a26      	ldr	r2, [pc, #152]	@ (8003150 <USB_SetTurnaroundTime+0x134>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d906      	bls.n	80030ca <USB_SetTurnaroundTime+0xae>
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	4a25      	ldr	r2, [pc, #148]	@ (8003154 <USB_SetTurnaroundTime+0x138>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d202      	bcs.n	80030ca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80030c4:	2309      	movs	r3, #9
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	e020      	b.n	800310c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	4a21      	ldr	r2, [pc, #132]	@ (8003154 <USB_SetTurnaroundTime+0x138>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d306      	bcc.n	80030e0 <USB_SetTurnaroundTime+0xc4>
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	4a20      	ldr	r2, [pc, #128]	@ (8003158 <USB_SetTurnaroundTime+0x13c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d802      	bhi.n	80030e0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80030da:	2308      	movs	r3, #8
 80030dc:	617b      	str	r3, [r7, #20]
 80030de:	e015      	b.n	800310c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	4a1d      	ldr	r2, [pc, #116]	@ (8003158 <USB_SetTurnaroundTime+0x13c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d906      	bls.n	80030f6 <USB_SetTurnaroundTime+0xda>
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	4a1c      	ldr	r2, [pc, #112]	@ (800315c <USB_SetTurnaroundTime+0x140>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d202      	bcs.n	80030f6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80030f0:	2307      	movs	r3, #7
 80030f2:	617b      	str	r3, [r7, #20]
 80030f4:	e00a      	b.n	800310c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80030f6:	2306      	movs	r3, #6
 80030f8:	617b      	str	r3, [r7, #20]
 80030fa:	e007      	b.n	800310c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d102      	bne.n	8003108 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003102:	2309      	movs	r3, #9
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	e001      	b.n	800310c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003108:	2309      	movs	r3, #9
 800310a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	68da      	ldr	r2, [r3, #12]
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	029b      	lsls	r3, r3, #10
 8003120:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003124:	431a      	orrs	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	371c      	adds	r7, #28
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	00d8acbf 	.word	0x00d8acbf
 800313c:	00e4e1c0 	.word	0x00e4e1c0
 8003140:	00f42400 	.word	0x00f42400
 8003144:	01067380 	.word	0x01067380
 8003148:	011a499f 	.word	0x011a499f
 800314c:	01312cff 	.word	0x01312cff
 8003150:	014ca43f 	.word	0x014ca43f
 8003154:	016e3600 	.word	0x016e3600
 8003158:	01a6ab1f 	.word	0x01a6ab1f
 800315c:	01e84800 	.word	0x01e84800

08003160 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f043 0201 	orr.w	r2, r3, #1
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f023 0201 	bic.w	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80031c0:	78fb      	ldrb	r3, [r7, #3]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d115      	bne.n	80031f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80031d2:	200a      	movs	r0, #10
 80031d4:	f7fd fb72 	bl	80008bc <HAL_Delay>
      ms += 10U;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	330a      	adds	r3, #10
 80031dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f001 f93f 	bl	8004462 <USB_GetMode>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d01e      	beq.n	8003228 <USB_SetCurrentMode+0x84>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2bc7      	cmp	r3, #199	@ 0xc7
 80031ee:	d9f0      	bls.n	80031d2 <USB_SetCurrentMode+0x2e>
 80031f0:	e01a      	b.n	8003228 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d115      	bne.n	8003224 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003204:	200a      	movs	r0, #10
 8003206:	f7fd fb59 	bl	80008bc <HAL_Delay>
      ms += 10U;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	330a      	adds	r3, #10
 800320e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f001 f926 	bl	8004462 <USB_GetMode>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d005      	beq.n	8003228 <USB_SetCurrentMode+0x84>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003220:	d9f0      	bls.n	8003204 <USB_SetCurrentMode+0x60>
 8003222:	e001      	b.n	8003228 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e005      	b.n	8003234 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2bc8      	cmp	r3, #200	@ 0xc8
 800322c:	d101      	bne.n	8003232 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800323c:	b084      	sub	sp, #16
 800323e:	b580      	push	{r7, lr}
 8003240:	b086      	sub	sp, #24
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
 8003246:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800324a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003256:	2300      	movs	r3, #0
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	e009      	b.n	8003270 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	3340      	adds	r3, #64	@ 0x40
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	2200      	movs	r2, #0
 8003268:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	3301      	adds	r3, #1
 800326e:	613b      	str	r3, [r7, #16]
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	2b0e      	cmp	r3, #14
 8003274:	d9f2      	bls.n	800325c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003276:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800327a:	2b00      	cmp	r3, #0
 800327c:	d11c      	bne.n	80032b8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800328c:	f043 0302 	orr.w	r3, r3, #2
 8003290:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003296:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ae:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	639a      	str	r2, [r3, #56]	@ 0x38
 80032b6:	e00b      	b.n	80032d0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032bc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80032d6:	461a      	mov	r2, r3
 80032d8:	2300      	movs	r3, #0
 80032da:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80032dc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d10d      	bne.n	8003300 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80032e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d104      	bne.n	80032f6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80032ec:	2100      	movs	r1, #0
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f968 	bl	80035c4 <USB_SetDevSpeed>
 80032f4:	e008      	b.n	8003308 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80032f6:	2101      	movs	r1, #1
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f963 	bl	80035c4 <USB_SetDevSpeed>
 80032fe:	e003      	b.n	8003308 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003300:	2103      	movs	r1, #3
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f95e 	bl	80035c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003308:	2110      	movs	r1, #16
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f8fa 	bl	8003504 <USB_FlushTxFifo>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f924 	bl	8003568 <USB_FlushRxFifo>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003330:	461a      	mov	r2, r3
 8003332:	2300      	movs	r3, #0
 8003334:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800333c:	461a      	mov	r2, r3
 800333e:	2300      	movs	r3, #0
 8003340:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003348:	461a      	mov	r2, r3
 800334a:	2300      	movs	r3, #0
 800334c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800334e:	2300      	movs	r3, #0
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	e043      	b.n	80033dc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4413      	add	r3, r2
 800335c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003366:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800336a:	d118      	bne.n	800339e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10a      	bne.n	8003388 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	015a      	lsls	r2, r3, #5
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4413      	add	r3, r2
 800337a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800337e:	461a      	mov	r2, r3
 8003380:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	e013      	b.n	80033b0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	015a      	lsls	r2, r3, #5
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4413      	add	r3, r2
 8003390:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003394:	461a      	mov	r2, r3
 8003396:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	e008      	b.n	80033b0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	015a      	lsls	r2, r3, #5
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4413      	add	r3, r2
 80033a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033aa:	461a      	mov	r2, r3
 80033ac:	2300      	movs	r3, #0
 80033ae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033bc:	461a      	mov	r2, r3
 80033be:	2300      	movs	r3, #0
 80033c0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033ce:	461a      	mov	r2, r3
 80033d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80033d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	3301      	adds	r3, #1
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80033e0:	461a      	mov	r2, r3
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d3b5      	bcc.n	8003354 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033e8:	2300      	movs	r3, #0
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	e043      	b.n	8003476 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	015a      	lsls	r2, r3, #5
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4413      	add	r3, r2
 80033f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003400:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003404:	d118      	bne.n	8003438 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10a      	bne.n	8003422 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4413      	add	r3, r2
 8003414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003418:	461a      	mov	r2, r3
 800341a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	e013      	b.n	800344a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	015a      	lsls	r2, r3, #5
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4413      	add	r3, r2
 800342a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800342e:	461a      	mov	r2, r3
 8003430:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	e008      	b.n	800344a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4413      	add	r3, r2
 8003440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003444:	461a      	mov	r2, r3
 8003446:	2300      	movs	r3, #0
 8003448:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	015a      	lsls	r2, r3, #5
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4413      	add	r3, r2
 8003452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003456:	461a      	mov	r2, r3
 8003458:	2300      	movs	r3, #0
 800345a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4413      	add	r3, r2
 8003464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003468:	461a      	mov	r2, r3
 800346a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800346e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	3301      	adds	r3, #1
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800347a:	461a      	mov	r2, r3
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4293      	cmp	r3, r2
 8003480:	d3b5      	bcc.n	80033ee <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003490:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003494:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80034a2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80034a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d105      	bne.n	80034b8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	f043 0210 	orr.w	r2, r3, #16
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	699a      	ldr	r2, [r3, #24]
 80034bc:	4b10      	ldr	r3, [pc, #64]	@ (8003500 <USB_DevInit+0x2c4>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80034c4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d005      	beq.n	80034d8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	f043 0208 	orr.w	r2, r3, #8
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80034d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d107      	bne.n	80034f0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80034e8:	f043 0304 	orr.w	r3, r3, #4
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80034f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034fc:	b004      	add	sp, #16
 80034fe:	4770      	bx	lr
 8003500:	803c3800 	.word	0x803c3800

08003504 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	3301      	adds	r3, #1
 8003516:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800351e:	d901      	bls.n	8003524 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e01b      	b.n	800355c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	2b00      	cmp	r3, #0
 800352a:	daf2      	bge.n	8003512 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	019b      	lsls	r3, r3, #6
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	3301      	adds	r3, #1
 8003540:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003548:	d901      	bls.n	800354e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e006      	b.n	800355c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f003 0320 	and.w	r3, r3, #32
 8003556:	2b20      	cmp	r3, #32
 8003558:	d0f0      	beq.n	800353c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	3301      	adds	r3, #1
 8003578:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003580:	d901      	bls.n	8003586 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e018      	b.n	80035b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	2b00      	cmp	r3, #0
 800358c:	daf2      	bge.n	8003574 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2210      	movs	r2, #16
 8003596:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	3301      	adds	r3, #1
 800359c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80035a4:	d901      	bls.n	80035aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e006      	b.n	80035b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f003 0310 	and.w	r3, r3, #16
 80035b2:	2b10      	cmp	r3, #16
 80035b4:	d0f0      	beq.n	8003598 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	68f9      	ldr	r1, [r7, #12]
 80035e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035e4:	4313      	orrs	r3, r2
 80035e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b087      	sub	sp, #28
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 0306 	and.w	r3, r3, #6
 800360e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d102      	bne.n	800361c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003616:	2300      	movs	r3, #0
 8003618:	75fb      	strb	r3, [r7, #23]
 800361a:	e00a      	b.n	8003632 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b02      	cmp	r3, #2
 8003620:	d002      	beq.n	8003628 <USB_GetDevSpeed+0x32>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2b06      	cmp	r3, #6
 8003626:	d102      	bne.n	800362e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003628:	2302      	movs	r3, #2
 800362a:	75fb      	strb	r3, [r7, #23]
 800362c:	e001      	b.n	8003632 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800362e:	230f      	movs	r3, #15
 8003630:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003632:	7dfb      	ldrb	r3, [r7, #23]
}
 8003634:	4618      	mov	r0, r3
 8003636:	371c      	adds	r7, #28
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	785b      	ldrb	r3, [r3, #1]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d13a      	bne.n	80036d2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003662:	69da      	ldr	r2, [r3, #28]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	f003 030f 	and.w	r3, r3, #15
 800366c:	2101      	movs	r1, #1
 800366e:	fa01 f303 	lsl.w	r3, r1, r3
 8003672:	b29b      	uxth	r3, r3
 8003674:	68f9      	ldr	r1, [r7, #12]
 8003676:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800367a:	4313      	orrs	r3, r2
 800367c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4413      	add	r3, r2
 8003686:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d155      	bne.n	8003740 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4413      	add	r3, r2
 800369c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	791b      	ldrb	r3, [r3, #4]
 80036ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80036b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	059b      	lsls	r3, r3, #22
 80036b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80036b8:	4313      	orrs	r3, r2
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	0151      	lsls	r1, r2, #5
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	440a      	add	r2, r1
 80036c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	e036      	b.n	8003740 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036d8:	69da      	ldr	r2, [r3, #28]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	2101      	movs	r1, #1
 80036e4:	fa01 f303 	lsl.w	r3, r1, r3
 80036e8:	041b      	lsls	r3, r3, #16
 80036ea:	68f9      	ldr	r1, [r7, #12]
 80036ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80036f0:	4313      	orrs	r3, r2
 80036f2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	015a      	lsls	r2, r3, #5
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4413      	add	r3, r2
 80036fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d11a      	bne.n	8003740 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4413      	add	r3, r2
 8003712:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	791b      	ldrb	r3, [r3, #4]
 8003724:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003726:	430b      	orrs	r3, r1
 8003728:	4313      	orrs	r3, r2
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	0151      	lsls	r1, r2, #5
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	440a      	add	r2, r1
 8003732:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800373a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800373e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
	...

08003750 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	785b      	ldrb	r3, [r3, #1]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d161      	bne.n	8003830 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	015a      	lsls	r2, r3, #5
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	4413      	add	r3, r2
 8003774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800377e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003782:	d11f      	bne.n	80037c4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4413      	add	r3, r2
 800378c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	0151      	lsls	r1, r2, #5
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	440a      	add	r2, r1
 800379a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800379e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80037a2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	0151      	lsls	r1, r2, #5
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	440a      	add	r2, r1
 80037ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80037c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	2101      	movs	r1, #1
 80037d6:	fa01 f303 	lsl.w	r3, r1, r3
 80037da:	b29b      	uxth	r3, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	68f9      	ldr	r1, [r7, #12]
 80037e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80037e4:	4013      	ands	r3, r2
 80037e6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037ee:	69da      	ldr	r2, [r3, #28]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	f003 030f 	and.w	r3, r3, #15
 80037f8:	2101      	movs	r1, #1
 80037fa:	fa01 f303 	lsl.w	r3, r1, r3
 80037fe:	b29b      	uxth	r3, r3
 8003800:	43db      	mvns	r3, r3
 8003802:	68f9      	ldr	r1, [r7, #12]
 8003804:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003808:	4013      	ands	r3, r2
 800380a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4413      	add	r3, r2
 8003814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	0159      	lsls	r1, r3, #5
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	440b      	add	r3, r1
 8003822:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003826:	4619      	mov	r1, r3
 8003828:	4b35      	ldr	r3, [pc, #212]	@ (8003900 <USB_DeactivateEndpoint+0x1b0>)
 800382a:	4013      	ands	r3, r2
 800382c:	600b      	str	r3, [r1, #0]
 800382e:	e060      	b.n	80038f2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4413      	add	r3, r2
 8003838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003842:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003846:	d11f      	bne.n	8003888 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4413      	add	r3, r2
 8003850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	0151      	lsls	r1, r2, #5
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	440a      	add	r2, r1
 800385e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003862:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003866:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4413      	add	r3, r2
 8003870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	0151      	lsls	r1, r2, #5
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	440a      	add	r2, r1
 800387e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003882:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003886:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800388e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	f003 030f 	and.w	r3, r3, #15
 8003898:	2101      	movs	r1, #1
 800389a:	fa01 f303 	lsl.w	r3, r1, r3
 800389e:	041b      	lsls	r3, r3, #16
 80038a0:	43db      	mvns	r3, r3
 80038a2:	68f9      	ldr	r1, [r7, #12]
 80038a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80038a8:	4013      	ands	r3, r2
 80038aa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038b2:	69da      	ldr	r2, [r3, #28]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	2101      	movs	r1, #1
 80038be:	fa01 f303 	lsl.w	r3, r1, r3
 80038c2:	041b      	lsls	r3, r3, #16
 80038c4:	43db      	mvns	r3, r3
 80038c6:	68f9      	ldr	r1, [r7, #12]
 80038c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80038cc:	4013      	ands	r3, r2
 80038ce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	0159      	lsls	r1, r3, #5
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	440b      	add	r3, r1
 80038e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038ea:	4619      	mov	r1, r3
 80038ec:	4b05      	ldr	r3, [pc, #20]	@ (8003904 <USB_DeactivateEndpoint+0x1b4>)
 80038ee:	4013      	ands	r3, r2
 80038f0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	ec337800 	.word	0xec337800
 8003904:	eff37800 	.word	0xeff37800

08003908 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b08a      	sub	sp, #40	@ 0x28
 800390c:	af02      	add	r7, sp, #8
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	4613      	mov	r3, r2
 8003914:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	785b      	ldrb	r3, [r3, #1]
 8003924:	2b01      	cmp	r3, #1
 8003926:	f040 817f 	bne.w	8003c28 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d132      	bne.n	8003998 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	015a      	lsls	r2, r3, #5
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	4413      	add	r3, r2
 800393a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	0151      	lsls	r1, r2, #5
 8003944:	69fa      	ldr	r2, [r7, #28]
 8003946:	440a      	add	r2, r1
 8003948:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800394c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003950:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003954:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	015a      	lsls	r2, r3, #5
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	4413      	add	r3, r2
 800395e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	0151      	lsls	r1, r2, #5
 8003968:	69fa      	ldr	r2, [r7, #28]
 800396a:	440a      	add	r2, r1
 800396c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003970:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003974:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	015a      	lsls	r2, r3, #5
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	4413      	add	r3, r2
 800397e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	0151      	lsls	r1, r2, #5
 8003988:	69fa      	ldr	r2, [r7, #28]
 800398a:	440a      	add	r2, r1
 800398c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003990:	0cdb      	lsrs	r3, r3, #19
 8003992:	04db      	lsls	r3, r3, #19
 8003994:	6113      	str	r3, [r2, #16]
 8003996:	e097      	b.n	8003ac8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	0151      	lsls	r1, r2, #5
 80039aa:	69fa      	ldr	r2, [r7, #28]
 80039ac:	440a      	add	r2, r1
 80039ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039b2:	0cdb      	lsrs	r3, r3, #19
 80039b4:	04db      	lsls	r3, r3, #19
 80039b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	0151      	lsls	r1, r2, #5
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	440a      	add	r2, r1
 80039ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80039d2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80039d6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80039da:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d11a      	bne.n	8003a18 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	691a      	ldr	r2, [r3, #16]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d903      	bls.n	80039f6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	015a      	lsls	r2, r3, #5
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	0151      	lsls	r1, r2, #5
 8003a08:	69fa      	ldr	r2, [r7, #28]
 8003a0a:	440a      	add	r2, r1
 8003a0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a10:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003a14:	6113      	str	r3, [r2, #16]
 8003a16:	e044      	b.n	8003aa2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	691a      	ldr	r2, [r3, #16]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	4413      	add	r3, r2
 8003a22:	1e5a      	subs	r2, r3, #1
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	015a      	lsls	r2, r3, #5
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	8afb      	ldrh	r3, [r7, #22]
 8003a3e:	04d9      	lsls	r1, r3, #19
 8003a40:	4ba4      	ldr	r3, [pc, #656]	@ (8003cd4 <USB_EPStartXfer+0x3cc>)
 8003a42:	400b      	ands	r3, r1
 8003a44:	69b9      	ldr	r1, [r7, #24]
 8003a46:	0148      	lsls	r0, r1, #5
 8003a48:	69f9      	ldr	r1, [r7, #28]
 8003a4a:	4401      	add	r1, r0
 8003a4c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003a50:	4313      	orrs	r3, r2
 8003a52:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	791b      	ldrb	r3, [r3, #4]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d122      	bne.n	8003aa2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	0151      	lsls	r1, r2, #5
 8003a6e:	69fa      	ldr	r2, [r7, #28]
 8003a70:	440a      	add	r2, r1
 8003a72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a76:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8003a7a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a88:	691a      	ldr	r2, [r3, #16]
 8003a8a:	8afb      	ldrh	r3, [r7, #22]
 8003a8c:	075b      	lsls	r3, r3, #29
 8003a8e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8003a92:	69b9      	ldr	r1, [r7, #24]
 8003a94:	0148      	lsls	r0, r1, #5
 8003a96:	69f9      	ldr	r1, [r7, #28]
 8003a98:	4401      	add	r1, r0
 8003a9a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ab8:	69b9      	ldr	r1, [r7, #24]
 8003aba:	0148      	lsls	r0, r1, #5
 8003abc:	69f9      	ldr	r1, [r7, #28]
 8003abe:	4401      	add	r1, r0
 8003ac0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003ac8:	79fb      	ldrb	r3, [r7, #7]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d14b      	bne.n	8003b66 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d009      	beq.n	8003aea <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	791b      	ldrb	r3, [r3, #4]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d128      	bne.n	8003b44 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d110      	bne.n	8003b24 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	015a      	lsls	r2, r3, #5
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	4413      	add	r3, r2
 8003b0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	0151      	lsls	r1, r2, #5
 8003b14:	69fa      	ldr	r2, [r7, #28]
 8003b16:	440a      	add	r2, r1
 8003b18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b1c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	e00f      	b.n	8003b44 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	015a      	lsls	r2, r3, #5
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	0151      	lsls	r1, r2, #5
 8003b36:	69fa      	ldr	r2, [r7, #28]
 8003b38:	440a      	add	r2, r1
 8003b3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b42:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	0151      	lsls	r1, r2, #5
 8003b56:	69fa      	ldr	r2, [r7, #28]
 8003b58:	440a      	add	r2, r1
 8003b5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b5e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003b62:	6013      	str	r3, [r2, #0]
 8003b64:	e166      	b.n	8003e34 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	015a      	lsls	r2, r3, #5
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	0151      	lsls	r1, r2, #5
 8003b78:	69fa      	ldr	r2, [r7, #28]
 8003b7a:	440a      	add	r2, r1
 8003b7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b80:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003b84:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	791b      	ldrb	r3, [r3, #4]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d015      	beq.n	8003bba <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 814e 	beq.w	8003e34 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	f003 030f 	and.w	r3, r3, #15
 8003ba8:	2101      	movs	r1, #1
 8003baa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bae:	69f9      	ldr	r1, [r7, #28]
 8003bb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	634b      	str	r3, [r1, #52]	@ 0x34
 8003bb8:	e13c      	b.n	8003e34 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d110      	bne.n	8003bec <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	0151      	lsls	r1, r2, #5
 8003bdc:	69fa      	ldr	r2, [r7, #28]
 8003bde:	440a      	add	r2, r1
 8003be0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003be4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	e00f      	b.n	8003c0c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	0151      	lsls	r1, r2, #5
 8003bfe:	69fa      	ldr	r2, [r7, #28]
 8003c00:	440a      	add	r2, r1
 8003c02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c0a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	68d9      	ldr	r1, [r3, #12]
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	781a      	ldrb	r2, [r3, #0]
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	b298      	uxth	r0, r3
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	4603      	mov	r3, r0
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 f9b9 	bl	8003f98 <USB_WritePacket>
 8003c26:	e105      	b.n	8003e34 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	0151      	lsls	r1, r2, #5
 8003c3a:	69fa      	ldr	r2, [r7, #28]
 8003c3c:	440a      	add	r2, r1
 8003c3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c42:	0cdb      	lsrs	r3, r3, #19
 8003c44:	04db      	lsls	r3, r3, #19
 8003c46:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	0151      	lsls	r1, r2, #5
 8003c5a:	69fa      	ldr	r2, [r7, #28]
 8003c5c:	440a      	add	r2, r1
 8003c5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c62:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8003c66:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8003c6a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d132      	bne.n	8003cd8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ca0:	69b9      	ldr	r1, [r7, #24]
 8003ca2:	0148      	lsls	r0, r1, #5
 8003ca4:	69f9      	ldr	r1, [r7, #28]
 8003ca6:	4401      	add	r1, r0
 8003ca8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003cac:	4313      	orrs	r3, r2
 8003cae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	0151      	lsls	r1, r2, #5
 8003cc2:	69fa      	ldr	r2, [r7, #28]
 8003cc4:	440a      	add	r2, r1
 8003cc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003cca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003cce:	6113      	str	r3, [r2, #16]
 8003cd0:	e062      	b.n	8003d98 <USB_EPStartXfer+0x490>
 8003cd2:	bf00      	nop
 8003cd4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d123      	bne.n	8003d28 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	015a      	lsls	r2, r3, #5
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cec:	691a      	ldr	r2, [r3, #16]
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cf6:	69b9      	ldr	r1, [r7, #24]
 8003cf8:	0148      	lsls	r0, r1, #5
 8003cfa:	69f9      	ldr	r1, [r7, #28]
 8003cfc:	4401      	add	r1, r0
 8003cfe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003d02:	4313      	orrs	r3, r2
 8003d04:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	015a      	lsls	r2, r3, #5
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	0151      	lsls	r1, r2, #5
 8003d18:	69fa      	ldr	r2, [r7, #28]
 8003d1a:	440a      	add	r2, r1
 8003d1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003d20:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003d24:	6113      	str	r3, [r2, #16]
 8003d26:	e037      	b.n	8003d98 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	4413      	add	r3, r2
 8003d32:	1e5a      	subs	r2, r3, #1
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	8afa      	ldrh	r2, [r7, #22]
 8003d44:	fb03 f202 	mul.w	r2, r3, r2
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	015a      	lsls	r2, r3, #5
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d58:	691a      	ldr	r2, [r3, #16]
 8003d5a:	8afb      	ldrh	r3, [r7, #22]
 8003d5c:	04d9      	lsls	r1, r3, #19
 8003d5e:	4b38      	ldr	r3, [pc, #224]	@ (8003e40 <USB_EPStartXfer+0x538>)
 8003d60:	400b      	ands	r3, r1
 8003d62:	69b9      	ldr	r1, [r7, #24]
 8003d64:	0148      	lsls	r0, r1, #5
 8003d66:	69f9      	ldr	r1, [r7, #28]
 8003d68:	4401      	add	r1, r0
 8003d6a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d7e:	691a      	ldr	r2, [r3, #16]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d88:	69b9      	ldr	r1, [r7, #24]
 8003d8a:	0148      	lsls	r0, r1, #5
 8003d8c:	69f9      	ldr	r1, [r7, #28]
 8003d8e:	4401      	add	r1, r0
 8003d90:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8003d94:	4313      	orrs	r3, r2
 8003d96:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8003d98:	79fb      	ldrb	r3, [r7, #7]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d10d      	bne.n	8003dba <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d009      	beq.n	8003dba <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	68d9      	ldr	r1, [r3, #12]
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003db6:	460a      	mov	r2, r1
 8003db8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	791b      	ldrb	r3, [r3, #4]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d128      	bne.n	8003e14 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d110      	bne.n	8003df4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	0151      	lsls	r1, r2, #5
 8003de4:	69fa      	ldr	r2, [r7, #28]
 8003de6:	440a      	add	r2, r1
 8003de8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003dec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	e00f      	b.n	8003e14 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	0151      	lsls	r1, r2, #5
 8003e06:	69fa      	ldr	r2, [r7, #28]
 8003e08:	440a      	add	r2, r1
 8003e0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e12:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	0151      	lsls	r1, r2, #5
 8003e26:	69fa      	ldr	r2, [r7, #28]
 8003e28:	440a      	add	r2, r1
 8003e2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003e2e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8003e32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3720      	adds	r7, #32
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	1ff80000 	.word	0x1ff80000

08003e44 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003e52:	2300      	movs	r3, #0
 8003e54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	785b      	ldrb	r3, [r3, #1]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d14a      	bne.n	8003ef8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003e7a:	f040 8086 	bne.w	8003f8a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	7812      	ldrb	r2, [r2, #0]
 8003e92:	0151      	lsls	r1, r2, #5
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	440a      	add	r2, r1
 8003e98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003e9c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003ea0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	7812      	ldrb	r2, [r2, #0]
 8003eb6:	0151      	lsls	r1, r2, #5
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	440a      	add	r2, r1
 8003ebc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003ec0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003ec4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d902      	bls.n	8003edc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	75fb      	strb	r3, [r7, #23]
          break;
 8003eda:	e056      	b.n	8003f8a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	015a      	lsls	r2, r3, #5
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ef4:	d0e7      	beq.n	8003ec6 <USB_EPStopXfer+0x82>
 8003ef6:	e048      	b.n	8003f8a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	015a      	lsls	r2, r3, #5
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f10:	d13b      	bne.n	8003f8a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	7812      	ldrb	r2, [r2, #0]
 8003f26:	0151      	lsls	r1, r2, #5
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	440a      	add	r2, r1
 8003f2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f30:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003f34:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	7812      	ldrb	r2, [r2, #0]
 8003f4a:	0151      	lsls	r1, r2, #5
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	440a      	add	r2, r1
 8003f50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003f54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003f58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d902      	bls.n	8003f70 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	75fb      	strb	r3, [r7, #23]
          break;
 8003f6e:	e00c      	b.n	8003f8a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	015a      	lsls	r2, r3, #5
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f88:	d0e7      	beq.n	8003f5a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	371c      	adds	r7, #28
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b089      	sub	sp, #36	@ 0x24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	71fb      	strb	r3, [r7, #7]
 8003faa:	4613      	mov	r3, r2
 8003fac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003fb6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d123      	bne.n	8004006 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003fbe:	88bb      	ldrh	r3, [r7, #4]
 8003fc0:	3303      	adds	r3, #3
 8003fc2:	089b      	lsrs	r3, r3, #2
 8003fc4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61bb      	str	r3, [r7, #24]
 8003fca:	e018      	b.n	8003ffe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003fcc:	79fb      	ldrb	r3, [r7, #7]
 8003fce:	031a      	lsls	r2, r3, #12
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fd8:	461a      	mov	r2, r3
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	61bb      	str	r3, [r7, #24]
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	429a      	cmp	r2, r3
 8004004:	d3e2      	bcc.n	8003fcc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	3724      	adds	r7, #36	@ 0x24
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004014:	b480      	push	{r7}
 8004016:	b08b      	sub	sp, #44	@ 0x2c
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	4613      	mov	r3, r2
 8004020:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800402a:	88fb      	ldrh	r3, [r7, #6]
 800402c:	089b      	lsrs	r3, r3, #2
 800402e:	b29b      	uxth	r3, r3
 8004030:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004032:	88fb      	ldrh	r3, [r7, #6]
 8004034:	f003 0303 	and.w	r3, r3, #3
 8004038:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800403a:	2300      	movs	r3, #0
 800403c:	623b      	str	r3, [r7, #32]
 800403e:	e014      	b.n	800406a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404a:	601a      	str	r2, [r3, #0]
    pDest++;
 800404c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404e:	3301      	adds	r3, #1
 8004050:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004054:	3301      	adds	r3, #1
 8004056:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405a:	3301      	adds	r3, #1
 800405c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800405e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004060:	3301      	adds	r3, #1
 8004062:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004064:	6a3b      	ldr	r3, [r7, #32]
 8004066:	3301      	adds	r3, #1
 8004068:	623b      	str	r3, [r7, #32]
 800406a:	6a3a      	ldr	r2, [r7, #32]
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	429a      	cmp	r2, r3
 8004070:	d3e6      	bcc.n	8004040 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004072:	8bfb      	ldrh	r3, [r7, #30]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d01e      	beq.n	80040b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004082:	461a      	mov	r2, r3
 8004084:	f107 0310 	add.w	r3, r7, #16
 8004088:	6812      	ldr	r2, [r2, #0]
 800408a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	b2db      	uxtb	r3, r3
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	fa22 f303 	lsr.w	r3, r2, r3
 8004098:	b2da      	uxtb	r2, r3
 800409a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409c:	701a      	strb	r2, [r3, #0]
      i++;
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	3301      	adds	r3, #1
 80040a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80040a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a6:	3301      	adds	r3, #1
 80040a8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80040aa:	8bfb      	ldrh	r3, [r7, #30]
 80040ac:	3b01      	subs	r3, #1
 80040ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80040b0:	8bfb      	ldrh	r3, [r7, #30]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1ea      	bne.n	800408c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80040b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	372c      	adds	r7, #44	@ 0x2c
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	785b      	ldrb	r3, [r3, #1]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d12c      	bne.n	800413a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	db12      	blt.n	8004118 <USB_EPSetStall+0x54>
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00f      	beq.n	8004118 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	0151      	lsls	r1, r2, #5
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	440a      	add	r2, r1
 800410e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004112:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004116:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4413      	add	r3, r2
 8004120:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	0151      	lsls	r1, r2, #5
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	440a      	add	r2, r1
 800412e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004132:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004136:	6013      	str	r3, [r2, #0]
 8004138:	e02b      	b.n	8004192 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	015a      	lsls	r2, r3, #5
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	4413      	add	r3, r2
 8004142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	db12      	blt.n	8004172 <USB_EPSetStall+0xae>
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00f      	beq.n	8004172 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	0151      	lsls	r1, r2, #5
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	440a      	add	r2, r1
 8004168:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800416c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004170:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	4413      	add	r3, r2
 800417a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	0151      	lsls	r1, r2, #5
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	440a      	add	r2, r1
 8004188:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800418c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004190:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	785b      	ldrb	r3, [r3, #1]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d128      	bne.n	800420e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	0151      	lsls	r1, r2, #5
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	440a      	add	r2, r1
 80041d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80041d6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80041da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	791b      	ldrb	r3, [r3, #4]
 80041e0:	2b03      	cmp	r3, #3
 80041e2:	d003      	beq.n	80041ec <USB_EPClearStall+0x4c>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	791b      	ldrb	r3, [r3, #4]
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d138      	bne.n	800425e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	0151      	lsls	r1, r2, #5
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	440a      	add	r2, r1
 8004202:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004206:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800420a:	6013      	str	r3, [r2, #0]
 800420c:	e027      	b.n	800425e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	0151      	lsls	r1, r2, #5
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	440a      	add	r2, r1
 8004224:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004228:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800422c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	791b      	ldrb	r3, [r3, #4]
 8004232:	2b03      	cmp	r3, #3
 8004234:	d003      	beq.n	800423e <USB_EPClearStall+0x9e>
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	791b      	ldrb	r3, [r3, #4]
 800423a:	2b02      	cmp	r3, #2
 800423c:	d10f      	bne.n	800425e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4413      	add	r3, r2
 8004246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	0151      	lsls	r1, r2, #5
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	440a      	add	r2, r1
 8004254:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004258:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800425c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800428a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800428e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	78fb      	ldrb	r3, [r7, #3]
 800429a:	011b      	lsls	r3, r3, #4
 800429c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80042a0:	68f9      	ldr	r1, [r7, #12]
 80042a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042a6:	4313      	orrs	r3, r2
 80042a8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68fa      	ldr	r2, [r7, #12]
 80042ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80042d2:	f023 0303 	bic.w	r3, r3, #3
 80042d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042e6:	f023 0302 	bic.w	r3, r3, #2
 80042ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b085      	sub	sp, #20
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004314:	f023 0303 	bic.w	r3, r3, #3
 8004318:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004328:	f043 0302 	orr.w	r3, r3, #2
 800432c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4013      	ands	r3, r2
 8004352:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004354:	68fb      	ldr	r3, [r7, #12]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004362:	b480      	push	{r7}
 8004364:	b085      	sub	sp, #20
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	4013      	ands	r3, r2
 8004384:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	0c1b      	lsrs	r3, r3, #16
}
 800438a:	4618      	mov	r0, r3
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004396:	b480      	push	{r7}
 8004398:	b085      	sub	sp, #20
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	4013      	ands	r3, r2
 80043b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	b29b      	uxth	r3, r3
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b085      	sub	sp, #20
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
 80043d2:	460b      	mov	r3, r1
 80043d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80043da:	78fb      	ldrb	r3, [r7, #3]
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	4013      	ands	r3, r2
 80043f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80043f8:	68bb      	ldr	r3, [r7, #8]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004406:	b480      	push	{r7}
 8004408:	b087      	sub	sp, #28
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	460b      	mov	r3, r1
 8004410:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004428:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800442a:	78fb      	ldrb	r3, [r7, #3]
 800442c:	f003 030f 	and.w	r3, r3, #15
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	fa22 f303 	lsr.w	r3, r2, r3
 8004436:	01db      	lsls	r3, r3, #7
 8004438:	b2db      	uxtb	r3, r3
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004440:	78fb      	ldrb	r3, [r7, #3]
 8004442:	015a      	lsls	r2, r3, #5
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	4413      	add	r3, r2
 8004448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4013      	ands	r3, r2
 8004452:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004454:	68bb      	ldr	r3, [r7, #8]
}
 8004456:	4618      	mov	r0, r3
 8004458:	371c      	adds	r7, #28
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	f003 0301 	and.w	r3, r3, #1
}
 8004472:	4618      	mov	r0, r3
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr

0800447e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800447e:	b480      	push	{r7}
 8004480:	b085      	sub	sp, #20
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004498:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800449c:	f023 0307 	bic.w	r3, r3, #7
 80044a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	460b      	mov	r3, r1
 80044ce:	607a      	str	r2, [r7, #4]
 80044d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	333c      	adds	r3, #60	@ 0x3c
 80044da:	3304      	adds	r3, #4
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	4a26      	ldr	r2, [pc, #152]	@ (800457c <USB_EP0_OutStart+0xb8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d90a      	bls.n	80044fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044f8:	d101      	bne.n	80044fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	e037      	b.n	800456e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004504:	461a      	mov	r2, r3
 8004506:	2300      	movs	r3, #0
 8004508:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004518:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800451c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800452c:	f043 0318 	orr.w	r3, r3, #24
 8004530:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004540:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8004544:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004546:	7afb      	ldrb	r3, [r7, #11]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d10f      	bne.n	800456c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004552:	461a      	mov	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004566:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800456a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	371c      	adds	r7, #28
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	4f54300a 	.word	0x4f54300a

08004580 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	3301      	adds	r3, #1
 8004590:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004598:	d901      	bls.n	800459e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e022      	b.n	80045e4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	daf2      	bge.n	800458c <USB_CoreReset+0xc>

  count = 10U;
 80045a6:	230a      	movs	r3, #10
 80045a8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80045aa:	e002      	b.n	80045b2 <USB_CoreReset+0x32>
  {
    count--;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	3b01      	subs	r3, #1
 80045b0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1f9      	bne.n	80045ac <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	f043 0201 	orr.w	r2, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	3301      	adds	r3, #1
 80045c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80045d0:	d901      	bls.n	80045d6 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e006      	b.n	80045e4 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d0f0      	beq.n	80045c4 <USB_CoreReset+0x44>

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	460b      	mov	r3, r1
 80045fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80045fc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8004600:	f002 fcbc 	bl	8006f7c <USBD_static_malloc>
 8004604:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d109      	bne.n	8004620 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	32b0      	adds	r2, #176	@ 0xb0
 8004616:	2100      	movs	r1, #0
 8004618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800461c:	2302      	movs	r3, #2
 800461e:	e0d4      	b.n	80047ca <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004620:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8004624:	2100      	movs	r1, #0
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f002 fd0e 	bl	8007048 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	32b0      	adds	r2, #176	@ 0xb0
 8004636:	68f9      	ldr	r1, [r7, #12]
 8004638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	32b0      	adds	r2, #176	@ 0xb0
 8004646:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	7c1b      	ldrb	r3, [r3, #16]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d138      	bne.n	80046ca <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004658:	4b5e      	ldr	r3, [pc, #376]	@ (80047d4 <USBD_CDC_Init+0x1e4>)
 800465a:	7819      	ldrb	r1, [r3, #0]
 800465c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004660:	2202      	movs	r2, #2
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f002 fb67 	bl	8006d36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004668:	4b5a      	ldr	r3, [pc, #360]	@ (80047d4 <USBD_CDC_Init+0x1e4>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	f003 020f 	and.w	r2, r3, #15
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	4613      	mov	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4413      	add	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	440b      	add	r3, r1
 800467c:	3323      	adds	r3, #35	@ 0x23
 800467e:	2201      	movs	r2, #1
 8004680:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004682:	4b55      	ldr	r3, [pc, #340]	@ (80047d8 <USBD_CDC_Init+0x1e8>)
 8004684:	7819      	ldrb	r1, [r3, #0]
 8004686:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800468a:	2202      	movs	r2, #2
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f002 fb52 	bl	8006d36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004692:	4b51      	ldr	r3, [pc, #324]	@ (80047d8 <USBD_CDC_Init+0x1e8>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	f003 020f 	and.w	r2, r3, #15
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80046aa:	2201      	movs	r2, #1
 80046ac:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80046ae:	4b4b      	ldr	r3, [pc, #300]	@ (80047dc <USBD_CDC_Init+0x1ec>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	f003 020f 	and.w	r2, r3, #15
 80046b6:	6879      	ldr	r1, [r7, #4]
 80046b8:	4613      	mov	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	440b      	add	r3, r1
 80046c2:	331c      	adds	r3, #28
 80046c4:	2210      	movs	r2, #16
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	e035      	b.n	8004736 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80046ca:	4b42      	ldr	r3, [pc, #264]	@ (80047d4 <USBD_CDC_Init+0x1e4>)
 80046cc:	7819      	ldrb	r1, [r3, #0]
 80046ce:	2340      	movs	r3, #64	@ 0x40
 80046d0:	2202      	movs	r2, #2
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f002 fb2f 	bl	8006d36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80046d8:	4b3e      	ldr	r3, [pc, #248]	@ (80047d4 <USBD_CDC_Init+0x1e4>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	f003 020f 	and.w	r2, r3, #15
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	4613      	mov	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4413      	add	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	440b      	add	r3, r1
 80046ec:	3323      	adds	r3, #35	@ 0x23
 80046ee:	2201      	movs	r2, #1
 80046f0:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80046f2:	4b39      	ldr	r3, [pc, #228]	@ (80047d8 <USBD_CDC_Init+0x1e8>)
 80046f4:	7819      	ldrb	r1, [r3, #0]
 80046f6:	2340      	movs	r3, #64	@ 0x40
 80046f8:	2202      	movs	r2, #2
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f002 fb1b 	bl	8006d36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004700:	4b35      	ldr	r3, [pc, #212]	@ (80047d8 <USBD_CDC_Init+0x1e8>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	f003 020f 	and.w	r2, r3, #15
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	4613      	mov	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	440b      	add	r3, r1
 8004714:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8004718:	2201      	movs	r2, #1
 800471a:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800471c:	4b2f      	ldr	r3, [pc, #188]	@ (80047dc <USBD_CDC_Init+0x1ec>)
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	f003 020f 	and.w	r2, r3, #15
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	4613      	mov	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4413      	add	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	440b      	add	r3, r1
 8004730:	331c      	adds	r3, #28
 8004732:	2210      	movs	r2, #16
 8004734:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004736:	4b29      	ldr	r3, [pc, #164]	@ (80047dc <USBD_CDC_Init+0x1ec>)
 8004738:	7819      	ldrb	r1, [r3, #0]
 800473a:	2308      	movs	r3, #8
 800473c:	2203      	movs	r2, #3
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f002 faf9 	bl	8006d36 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004744:	4b25      	ldr	r3, [pc, #148]	@ (80047dc <USBD_CDC_Init+0x1ec>)
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	f003 020f 	and.w	r2, r3, #15
 800474c:	6879      	ldr	r1, [r7, #4]
 800474e:	4613      	mov	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4413      	add	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	440b      	add	r3, r1
 8004758:	3323      	adds	r3, #35	@ 0x23
 800475a:	2201      	movs	r2, #1
 800475c:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	33b0      	adds	r3, #176	@ 0xb0
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4413      	add	r3, r2
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004794:	2302      	movs	r3, #2
 8004796:	e018      	b.n	80047ca <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	7c1b      	ldrb	r3, [r3, #16]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10a      	bne.n	80047b6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80047a0:	4b0d      	ldr	r3, [pc, #52]	@ (80047d8 <USBD_CDC_Init+0x1e8>)
 80047a2:	7819      	ldrb	r1, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80047aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f002 fbb0 	bl	8006f14 <USBD_LL_PrepareReceive>
 80047b4:	e008      	b.n	80047c8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80047b6:	4b08      	ldr	r3, [pc, #32]	@ (80047d8 <USBD_CDC_Init+0x1e8>)
 80047b8:	7819      	ldrb	r1, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80047c0:	2340      	movs	r3, #64	@ 0x40
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f002 fba6 	bl	8006f14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20000093 	.word	0x20000093
 80047d8:	20000094 	.word	0x20000094
 80047dc:	20000095 	.word	0x20000095

080047e0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	460b      	mov	r3, r1
 80047ea:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80047ec:	4b3a      	ldr	r3, [pc, #232]	@ (80048d8 <USBD_CDC_DeInit+0xf8>)
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	4619      	mov	r1, r3
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f002 fac5 	bl	8006d82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80047f8:	4b37      	ldr	r3, [pc, #220]	@ (80048d8 <USBD_CDC_DeInit+0xf8>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	f003 020f 	and.w	r2, r3, #15
 8004800:	6879      	ldr	r1, [r7, #4]
 8004802:	4613      	mov	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	440b      	add	r3, r1
 800480c:	3323      	adds	r3, #35	@ 0x23
 800480e:	2200      	movs	r2, #0
 8004810:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004812:	4b32      	ldr	r3, [pc, #200]	@ (80048dc <USBD_CDC_DeInit+0xfc>)
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	4619      	mov	r1, r3
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f002 fab2 	bl	8006d82 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800481e:	4b2f      	ldr	r3, [pc, #188]	@ (80048dc <USBD_CDC_DeInit+0xfc>)
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	f003 020f 	and.w	r2, r3, #15
 8004826:	6879      	ldr	r1, [r7, #4]
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	440b      	add	r3, r1
 8004832:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8004836:	2200      	movs	r2, #0
 8004838:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800483a:	4b29      	ldr	r3, [pc, #164]	@ (80048e0 <USBD_CDC_DeInit+0x100>)
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	4619      	mov	r1, r3
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f002 fa9e 	bl	8006d82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004846:	4b26      	ldr	r3, [pc, #152]	@ (80048e0 <USBD_CDC_DeInit+0x100>)
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	f003 020f 	and.w	r2, r3, #15
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	3323      	adds	r3, #35	@ 0x23
 800485c:	2200      	movs	r2, #0
 800485e:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004860:	4b1f      	ldr	r3, [pc, #124]	@ (80048e0 <USBD_CDC_DeInit+0x100>)
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	f003 020f 	and.w	r2, r3, #15
 8004868:	6879      	ldr	r1, [r7, #4]
 800486a:	4613      	mov	r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	4413      	add	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	440b      	add	r3, r1
 8004874:	331c      	adds	r3, #28
 8004876:	2200      	movs	r2, #0
 8004878:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	32b0      	adds	r2, #176	@ 0xb0
 8004884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d01f      	beq.n	80048cc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	33b0      	adds	r3, #176	@ 0xb0
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	32b0      	adds	r2, #176	@ 0xb0
 80048aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f002 fb72 	bl	8006f98 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	32b0      	adds	r2, #176	@ 0xb0
 80048be:	2100      	movs	r1, #0
 80048c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	20000093 	.word	0x20000093
 80048dc:	20000094 	.word	0x20000094
 80048e0:	20000095 	.word	0x20000095

080048e4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	32b0      	adds	r2, #176	@ 0xb0
 80048f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048fc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004910:	2303      	movs	r3, #3
 8004912:	e0bf      	b.n	8004a94 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800491c:	2b00      	cmp	r3, #0
 800491e:	d050      	beq.n	80049c2 <USBD_CDC_Setup+0xde>
 8004920:	2b20      	cmp	r3, #32
 8004922:	f040 80af 	bne.w	8004a84 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	88db      	ldrh	r3, [r3, #6]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d03a      	beq.n	80049a4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	b25b      	sxtb	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	da1b      	bge.n	8004970 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	33b0      	adds	r3, #176	@ 0xb0
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800494e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	88d2      	ldrh	r2, [r2, #6]
 8004954:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	88db      	ldrh	r3, [r3, #6]
 800495a:	2b07      	cmp	r3, #7
 800495c:	bf28      	it	cs
 800495e:	2307      	movcs	r3, #7
 8004960:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	89fa      	ldrh	r2, [r7, #14]
 8004966:	4619      	mov	r1, r3
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f001 fda9 	bl	80064c0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800496e:	e090      	b.n	8004a92 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	785a      	ldrb	r2, [r3, #1]
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	88db      	ldrh	r3, [r3, #6]
 800497e:	2b3f      	cmp	r3, #63	@ 0x3f
 8004980:	d803      	bhi.n	800498a <USBD_CDC_Setup+0xa6>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	88db      	ldrh	r3, [r3, #6]
 8004986:	b2da      	uxtb	r2, r3
 8004988:	e000      	b.n	800498c <USBD_CDC_Setup+0xa8>
 800498a:	2240      	movs	r2, #64	@ 0x40
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004992:	6939      	ldr	r1, [r7, #16]
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800499a:	461a      	mov	r2, r3
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f001 fdbe 	bl	800651e <USBD_CtlPrepareRx>
      break;
 80049a2:	e076      	b.n	8004a92 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	33b0      	adds	r3, #176	@ 0xb0
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	7850      	ldrb	r0, [r2, #1]
 80049ba:	2200      	movs	r2, #0
 80049bc:	6839      	ldr	r1, [r7, #0]
 80049be:	4798      	blx	r3
      break;
 80049c0:	e067      	b.n	8004a92 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	785b      	ldrb	r3, [r3, #1]
 80049c6:	2b0b      	cmp	r3, #11
 80049c8:	d851      	bhi.n	8004a6e <USBD_CDC_Setup+0x18a>
 80049ca:	a201      	add	r2, pc, #4	@ (adr r2, 80049d0 <USBD_CDC_Setup+0xec>)
 80049cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d0:	08004a01 	.word	0x08004a01
 80049d4:	08004a7d 	.word	0x08004a7d
 80049d8:	08004a6f 	.word	0x08004a6f
 80049dc:	08004a6f 	.word	0x08004a6f
 80049e0:	08004a6f 	.word	0x08004a6f
 80049e4:	08004a6f 	.word	0x08004a6f
 80049e8:	08004a6f 	.word	0x08004a6f
 80049ec:	08004a6f 	.word	0x08004a6f
 80049f0:	08004a6f 	.word	0x08004a6f
 80049f4:	08004a6f 	.word	0x08004a6f
 80049f8:	08004a2b 	.word	0x08004a2b
 80049fc:	08004a55 	.word	0x08004a55
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b03      	cmp	r3, #3
 8004a0a:	d107      	bne.n	8004a1c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004a0c:	f107 030a 	add.w	r3, r7, #10
 8004a10:	2202      	movs	r2, #2
 8004a12:	4619      	mov	r1, r3
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f001 fd53 	bl	80064c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004a1a:	e032      	b.n	8004a82 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004a1c:	6839      	ldr	r1, [r7, #0]
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f001 fcd1 	bl	80063c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8004a24:	2303      	movs	r3, #3
 8004a26:	75fb      	strb	r3, [r7, #23]
          break;
 8004a28:	e02b      	b.n	8004a82 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b03      	cmp	r3, #3
 8004a34:	d107      	bne.n	8004a46 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004a36:	f107 030d 	add.w	r3, r7, #13
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f001 fd3e 	bl	80064c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004a44:	e01d      	b.n	8004a82 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004a46:	6839      	ldr	r1, [r7, #0]
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f001 fcbc 	bl	80063c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	75fb      	strb	r3, [r7, #23]
          break;
 8004a52:	e016      	b.n	8004a82 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b03      	cmp	r3, #3
 8004a5e:	d00f      	beq.n	8004a80 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004a60:	6839      	ldr	r1, [r7, #0]
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f001 fcaf 	bl	80063c6 <USBD_CtlError>
            ret = USBD_FAIL;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004a6c:	e008      	b.n	8004a80 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004a6e:	6839      	ldr	r1, [r7, #0]
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f001 fca8 	bl	80063c6 <USBD_CtlError>
          ret = USBD_FAIL;
 8004a76:	2303      	movs	r3, #3
 8004a78:	75fb      	strb	r3, [r7, #23]
          break;
 8004a7a:	e002      	b.n	8004a82 <USBD_CDC_Setup+0x19e>
          break;
 8004a7c:	bf00      	nop
 8004a7e:	e008      	b.n	8004a92 <USBD_CDC_Setup+0x1ae>
          break;
 8004a80:	bf00      	nop
      }
      break;
 8004a82:	e006      	b.n	8004a92 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004a84:	6839      	ldr	r1, [r7, #0]
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f001 fc9d 	bl	80063c6 <USBD_CtlError>
      ret = USBD_FAIL;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a90:	bf00      	nop
  }

  return (uint8_t)ret;
 8004a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8004aae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	32b0      	adds	r2, #176	@ 0xb0
 8004aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e065      	b.n	8004b92 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	32b0      	adds	r2, #176	@ 0xb0
 8004ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ad4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004ad6:	78fb      	ldrb	r3, [r7, #3]
 8004ad8:	f003 020f 	and.w	r2, r3, #15
 8004adc:	6879      	ldr	r1, [r7, #4]
 8004ade:	4613      	mov	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	3314      	adds	r3, #20
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d02f      	beq.n	8004b50 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004af0:	78fb      	ldrb	r3, [r7, #3]
 8004af2:	f003 020f 	and.w	r2, r3, #15
 8004af6:	6879      	ldr	r1, [r7, #4]
 8004af8:	4613      	mov	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	440b      	add	r3, r1
 8004b02:	3314      	adds	r3, #20
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	78fb      	ldrb	r3, [r7, #3]
 8004b08:	f003 010f 	and.w	r1, r3, #15
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	460b      	mov	r3, r1
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	440b      	add	r3, r1
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4403      	add	r3, r0
 8004b18:	331c      	adds	r3, #28
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004b20:	fb01 f303 	mul.w	r3, r1, r3
 8004b24:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d112      	bne.n	8004b50 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004b2a:	78fb      	ldrb	r3, [r7, #3]
 8004b2c:	f003 020f 	and.w	r2, r3, #15
 8004b30:	6879      	ldr	r1, [r7, #4]
 8004b32:	4613      	mov	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	440b      	add	r3, r1
 8004b3c:	3314      	adds	r3, #20
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004b42:	78f9      	ldrb	r1, [r7, #3]
 8004b44:	2300      	movs	r3, #0
 8004b46:	2200      	movs	r2, #0
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f002 f9c2 	bl	8006ed2 <USBD_LL_Transmit>
 8004b4e:	e01f      	b.n	8004b90 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	33b0      	adds	r3, #176	@ 0xb0
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d010      	beq.n	8004b90 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	33b0      	adds	r3, #176	@ 0xb0
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8004b8c:	78fa      	ldrb	r2, [r7, #3]
 8004b8e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b084      	sub	sp, #16
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	32b0      	adds	r2, #176	@ 0xb0
 8004bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bb4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	32b0      	adds	r2, #176	@ 0xb0
 8004bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d101      	bne.n	8004bcc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e01a      	b.n	8004c02 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004bcc:	78fb      	ldrb	r3, [r7, #3]
 8004bce:	4619      	mov	r1, r3
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f002 f9c0 	bl	8006f56 <USBD_LL_GetRxDataSize>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	33b0      	adds	r3, #176	@ 0xb0
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8004bfc:	4611      	mov	r1, r2
 8004bfe:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b084      	sub	sp, #16
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	32b0      	adds	r2, #176	@ 0xb0
 8004c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c20:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e024      	b.n	8004c76 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	33b0      	adds	r3, #176	@ 0xb0
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d019      	beq.n	8004c74 <USBD_CDC_EP0_RxReady+0x6a>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8004c46:	2bff      	cmp	r3, #255	@ 0xff
 8004c48:	d014      	beq.n	8004c74 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	33b0      	adds	r3, #176	@ 0xb0
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8004c62:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004c6a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	22ff      	movs	r2, #255	@ 0xff
 8004c70:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
	...

08004c80 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004c88:	2182      	movs	r1, #130	@ 0x82
 8004c8a:	4818      	ldr	r0, [pc, #96]	@ (8004cec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004c8c:	f000 fd62 	bl	8005754 <USBD_GetEpDesc>
 8004c90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004c92:	2101      	movs	r1, #1
 8004c94:	4815      	ldr	r0, [pc, #84]	@ (8004cec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004c96:	f000 fd5d 	bl	8005754 <USBD_GetEpDesc>
 8004c9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004c9c:	2181      	movs	r1, #129	@ 0x81
 8004c9e:	4813      	ldr	r0, [pc, #76]	@ (8004cec <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004ca0:	f000 fd58 	bl	8005754 <USBD_GetEpDesc>
 8004ca4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	2210      	movs	r2, #16
 8004cb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d006      	beq.n	8004cc6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cc0:	711a      	strb	r2, [r3, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d006      	beq.n	8004cda <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cd4:	711a      	strb	r2, [r3, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2243      	movs	r2, #67	@ 0x43
 8004cde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004ce0:	4b02      	ldr	r3, [pc, #8]	@ (8004cec <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3718      	adds	r7, #24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20000050 	.word	0x20000050

08004cf0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004cf8:	2182      	movs	r1, #130	@ 0x82
 8004cfa:	4818      	ldr	r0, [pc, #96]	@ (8004d5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004cfc:	f000 fd2a 	bl	8005754 <USBD_GetEpDesc>
 8004d00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004d02:	2101      	movs	r1, #1
 8004d04:	4815      	ldr	r0, [pc, #84]	@ (8004d5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004d06:	f000 fd25 	bl	8005754 <USBD_GetEpDesc>
 8004d0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004d0c:	2181      	movs	r1, #129	@ 0x81
 8004d0e:	4813      	ldr	r0, [pc, #76]	@ (8004d5c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004d10:	f000 fd20 	bl	8005754 <USBD_GetEpDesc>
 8004d14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d002      	beq.n	8004d22 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	2210      	movs	r2, #16
 8004d20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d006      	beq.n	8004d36 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	711a      	strb	r2, [r3, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f042 0202 	orr.w	r2, r2, #2
 8004d34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d006      	beq.n	8004d4a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	711a      	strb	r2, [r3, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f042 0202 	orr.w	r2, r2, #2
 8004d48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2243      	movs	r2, #67	@ 0x43
 8004d4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004d50:	4b02      	ldr	r3, [pc, #8]	@ (8004d5c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3718      	adds	r7, #24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000050 	.word	0x20000050

08004d60 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004d68:	2182      	movs	r1, #130	@ 0x82
 8004d6a:	4818      	ldr	r0, [pc, #96]	@ (8004dcc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004d6c:	f000 fcf2 	bl	8005754 <USBD_GetEpDesc>
 8004d70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004d72:	2101      	movs	r1, #1
 8004d74:	4815      	ldr	r0, [pc, #84]	@ (8004dcc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004d76:	f000 fced 	bl	8005754 <USBD_GetEpDesc>
 8004d7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004d7c:	2181      	movs	r1, #129	@ 0x81
 8004d7e:	4813      	ldr	r0, [pc, #76]	@ (8004dcc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004d80:	f000 fce8 	bl	8005754 <USBD_GetEpDesc>
 8004d84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	2210      	movs	r2, #16
 8004d90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d006      	beq.n	8004da6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004da0:	711a      	strb	r2, [r3, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d006      	beq.n	8004dba <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004db4:	711a      	strb	r2, [r3, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2243      	movs	r2, #67	@ 0x43
 8004dbe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004dc0:	4b02      	ldr	r3, [pc, #8]	@ (8004dcc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3718      	adds	r7, #24
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	20000050 	.word	0x20000050

08004dd0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	220a      	movs	r2, #10
 8004ddc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004dde:	4b03      	ldr	r3, [pc, #12]	@ (8004dec <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	370c      	adds	r7, #12
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	2000000c 	.word	0x2000000c

08004df0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e009      	b.n	8004e18 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	33b0      	adds	r3, #176	@ 0xb0
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	32b0      	adds	r2, #176	@ 0xb0
 8004e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e3e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e008      	b.n	8004e5c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	371c      	adds	r7, #28
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	32b0      	adds	r2, #176	@ 0xb0
 8004e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e80:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e004      	b.n	8004e96 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	683a      	ldr	r2, [r7, #0]
 8004e90:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
	...

08004ea4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	32b0      	adds	r2, #176	@ 0xb0
 8004eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eba:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e025      	b.n	8004f16 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d11f      	bne.n	8004f14 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8004edc:	4b10      	ldr	r3, [pc, #64]	@ (8004f20 <USBD_CDC_TransmitPacket+0x7c>)
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	f003 020f 	and.w	r2, r3, #15
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	4613      	mov	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4403      	add	r3, r0
 8004ef6:	3314      	adds	r3, #20
 8004ef8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8004efa:	4b09      	ldr	r3, [pc, #36]	@ (8004f20 <USBD_CDC_TransmitPacket+0x7c>)
 8004efc:	7819      	ldrb	r1, [r3, #0]
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f001 ffe1 	bl	8006ed2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8004f10:	2300      	movs	r3, #0
 8004f12:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	20000093 	.word	0x20000093

08004f24 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	32b0      	adds	r2, #176	@ 0xb0
 8004f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f3a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	32b0      	adds	r2, #176	@ 0xb0
 8004f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e018      	b.n	8004f84 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	7c1b      	ldrb	r3, [r3, #16]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10a      	bne.n	8004f70 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f8c <USBD_CDC_ReceivePacket+0x68>)
 8004f5c:	7819      	ldrb	r1, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004f64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f001 ffd3 	bl	8006f14 <USBD_LL_PrepareReceive>
 8004f6e:	e008      	b.n	8004f82 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004f70:	4b06      	ldr	r3, [pc, #24]	@ (8004f8c <USBD_CDC_ReceivePacket+0x68>)
 8004f72:	7819      	ldrb	r1, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004f7a:	2340      	movs	r3, #64	@ 0x40
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f001 ffc9 	bl	8006f14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	20000094 	.word	0x20000094

08004f90 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d101      	bne.n	8004fa8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e01f      	b.n	8004fe8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	79fa      	ldrb	r2, [r7, #7]
 8004fda:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f001 fe43 	bl	8006c68 <USBD_LL_Init>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3718      	adds	r7, #24
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005004:	2303      	movs	r3, #3
 8005006:	e025      	b.n	8005054 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	32ae      	adds	r2, #174	@ 0xae
 800501a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800501e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00f      	beq.n	8005044 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	32ae      	adds	r2, #174	@ 0xae
 800502e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005034:	f107 020e 	add.w	r2, r7, #14
 8005038:	4610      	mov	r0, r2
 800503a:	4798      	blx	r3
 800503c:	4602      	mov	r2, r0
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f001 fe4b 	bl	8006d00 <USBD_LL_Start>
 800506a:	4603      	mov	r3, r0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800507c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800507e:	4618      	mov	r0, r3
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b084      	sub	sp, #16
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
 8005092:	460b      	mov	r3, r1
 8005094:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005096:	2300      	movs	r3, #0
 8005098:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d009      	beq.n	80050b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	78fa      	ldrb	r2, [r7, #3]
 80050ae:	4611      	mov	r1, r2
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	4798      	blx	r3
 80050b4:	4603      	mov	r3, r0
 80050b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b084      	sub	sp, #16
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
 80050ca:	460b      	mov	r3, r1
 80050cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	78fa      	ldrb	r2, [r7, #3]
 80050dc:	4611      	mov	r1, r2
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	4798      	blx	r3
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80050e8:	2303      	movs	r3, #3
 80050ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b084      	sub	sp, #16
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
 80050fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005106:	6839      	ldr	r1, [r7, #0]
 8005108:	4618      	mov	r0, r3
 800510a:	f001 f922 	bl	8006352 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800511c:	461a      	mov	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800512a:	f003 031f 	and.w	r3, r3, #31
 800512e:	2b02      	cmp	r3, #2
 8005130:	d01a      	beq.n	8005168 <USBD_LL_SetupStage+0x72>
 8005132:	2b02      	cmp	r3, #2
 8005134:	d822      	bhi.n	800517c <USBD_LL_SetupStage+0x86>
 8005136:	2b00      	cmp	r3, #0
 8005138:	d002      	beq.n	8005140 <USBD_LL_SetupStage+0x4a>
 800513a:	2b01      	cmp	r3, #1
 800513c:	d00a      	beq.n	8005154 <USBD_LL_SetupStage+0x5e>
 800513e:	e01d      	b.n	800517c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005146:	4619      	mov	r1, r3
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fb77 	bl	800583c <USBD_StdDevReq>
 800514e:	4603      	mov	r3, r0
 8005150:	73fb      	strb	r3, [r7, #15]
      break;
 8005152:	e020      	b.n	8005196 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800515a:	4619      	mov	r1, r3
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 fbdf 	bl	8005920 <USBD_StdItfReq>
 8005162:	4603      	mov	r3, r0
 8005164:	73fb      	strb	r3, [r7, #15]
      break;
 8005166:	e016      	b.n	8005196 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800516e:	4619      	mov	r1, r3
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 fc41 	bl	80059f8 <USBD_StdEPReq>
 8005176:	4603      	mov	r3, r0
 8005178:	73fb      	strb	r3, [r7, #15]
      break;
 800517a:	e00c      	b.n	8005196 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005182:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005186:	b2db      	uxtb	r3, r3
 8005188:	4619      	mov	r1, r3
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f001 fe18 	bl	8006dc0 <USBD_LL_StallEP>
 8005190:	4603      	mov	r3, r0
 8005192:	73fb      	strb	r3, [r7, #15]
      break;
 8005194:	bf00      	nop
  }

  return ret;
 8005196:	7bfb      	ldrb	r3, [r7, #15]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	460b      	mov	r3, r1
 80051aa:	607a      	str	r2, [r7, #4]
 80051ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80051ae:	2300      	movs	r3, #0
 80051b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80051b2:	7afb      	ldrb	r3, [r7, #11]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d177      	bne.n	80052a8 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80051be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	f040 80a1 	bne.w	800530e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	8992      	ldrh	r2, [r2, #12]
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d91c      	bls.n	8005212 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	8992      	ldrh	r2, [r2, #12]
 80051e0:	1a9a      	subs	r2, r3, r2
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	8992      	ldrh	r2, [r2, #12]
 80051ee:	441a      	add	r2, r3
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	6919      	ldr	r1, [r3, #16]
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	899b      	ldrh	r3, [r3, #12]
 80051fc:	461a      	mov	r2, r3
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	4293      	cmp	r3, r2
 8005204:	bf38      	it	cc
 8005206:	4613      	movcc	r3, r2
 8005208:	461a      	mov	r2, r3
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f001 f9a8 	bl	8006560 <USBD_CtlContinueRx>
 8005210:	e07d      	b.n	800530e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005218:	f003 031f 	and.w	r3, r3, #31
 800521c:	2b02      	cmp	r3, #2
 800521e:	d014      	beq.n	800524a <USBD_LL_DataOutStage+0xaa>
 8005220:	2b02      	cmp	r3, #2
 8005222:	d81d      	bhi.n	8005260 <USBD_LL_DataOutStage+0xc0>
 8005224:	2b00      	cmp	r3, #0
 8005226:	d002      	beq.n	800522e <USBD_LL_DataOutStage+0x8e>
 8005228:	2b01      	cmp	r3, #1
 800522a:	d003      	beq.n	8005234 <USBD_LL_DataOutStage+0x94>
 800522c:	e018      	b.n	8005260 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	75bb      	strb	r3, [r7, #22]
            break;
 8005232:	e018      	b.n	8005266 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800523a:	b2db      	uxtb	r3, r3
 800523c:	4619      	mov	r1, r3
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 fa6e 	bl	8005720 <USBD_CoreFindIF>
 8005244:	4603      	mov	r3, r0
 8005246:	75bb      	strb	r3, [r7, #22]
            break;
 8005248:	e00d      	b.n	8005266 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005250:	b2db      	uxtb	r3, r3
 8005252:	4619      	mov	r1, r3
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 fa70 	bl	800573a <USBD_CoreFindEP>
 800525a:	4603      	mov	r3, r0
 800525c:	75bb      	strb	r3, [r7, #22]
            break;
 800525e:	e002      	b.n	8005266 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	75bb      	strb	r3, [r7, #22]
            break;
 8005264:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005266:	7dbb      	ldrb	r3, [r7, #22]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d119      	bne.n	80052a0 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b03      	cmp	r3, #3
 8005276:	d113      	bne.n	80052a0 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005278:	7dba      	ldrb	r2, [r7, #22]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	32ae      	adds	r2, #174	@ 0xae
 800527e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00b      	beq.n	80052a0 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8005288:	7dba      	ldrb	r2, [r7, #22]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005290:	7dba      	ldrb	r2, [r7, #22]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	32ae      	adds	r2, #174	@ 0xae
 8005296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f001 f96e 	bl	8006582 <USBD_CtlSendStatus>
 80052a6:	e032      	b.n	800530e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80052a8:	7afb      	ldrb	r3, [r7, #11]
 80052aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	4619      	mov	r1, r3
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 fa41 	bl	800573a <USBD_CoreFindEP>
 80052b8:	4603      	mov	r3, r0
 80052ba:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80052bc:	7dbb      	ldrb	r3, [r7, #22]
 80052be:	2bff      	cmp	r3, #255	@ 0xff
 80052c0:	d025      	beq.n	800530e <USBD_LL_DataOutStage+0x16e>
 80052c2:	7dbb      	ldrb	r3, [r7, #22]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d122      	bne.n	800530e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b03      	cmp	r3, #3
 80052d2:	d117      	bne.n	8005304 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80052d4:	7dba      	ldrb	r2, [r7, #22]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	32ae      	adds	r2, #174	@ 0xae
 80052da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00f      	beq.n	8005304 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80052e4:	7dba      	ldrb	r2, [r7, #22]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80052ec:	7dba      	ldrb	r2, [r7, #22]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	32ae      	adds	r2, #174	@ 0xae
 80052f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	7afa      	ldrb	r2, [r7, #11]
 80052fa:	4611      	mov	r1, r2
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	4798      	blx	r3
 8005300:	4603      	mov	r3, r0
 8005302:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005304:	7dfb      	ldrb	r3, [r7, #23]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800530a:	7dfb      	ldrb	r3, [r7, #23]
 800530c:	e000      	b.n	8005310 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3718      	adds	r7, #24
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	460b      	mov	r3, r1
 8005322:	607a      	str	r2, [r7, #4]
 8005324:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8005326:	7afb      	ldrb	r3, [r7, #11]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d178      	bne.n	800541e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	3314      	adds	r3, #20
 8005330:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005338:	2b02      	cmp	r3, #2
 800533a:	d163      	bne.n	8005404 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	8992      	ldrh	r2, [r2, #12]
 8005344:	4293      	cmp	r3, r2
 8005346:	d91c      	bls.n	8005382 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	8992      	ldrh	r2, [r2, #12]
 8005350:	1a9a      	subs	r2, r3, r2
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	8992      	ldrh	r2, [r2, #12]
 800535e:	441a      	add	r2, r3
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	6919      	ldr	r1, [r3, #16]
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	461a      	mov	r2, r3
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f001 f8c4 	bl	80064fc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005374:	2300      	movs	r3, #0
 8005376:	2200      	movs	r2, #0
 8005378:	2100      	movs	r1, #0
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f001 fdca 	bl	8006f14 <USBD_LL_PrepareReceive>
 8005380:	e040      	b.n	8005404 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	899b      	ldrh	r3, [r3, #12]
 8005386:	461a      	mov	r2, r3
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	429a      	cmp	r2, r3
 800538e:	d11c      	bne.n	80053ca <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005398:	4293      	cmp	r3, r2
 800539a:	d316      	bcc.n	80053ca <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d20f      	bcs.n	80053ca <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80053aa:	2200      	movs	r2, #0
 80053ac:	2100      	movs	r1, #0
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f001 f8a4 	bl	80064fc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80053bc:	2300      	movs	r3, #0
 80053be:	2200      	movs	r2, #0
 80053c0:	2100      	movs	r1, #0
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f001 fda6 	bl	8006f14 <USBD_LL_PrepareReceive>
 80053c8:	e01c      	b.n	8005404 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b03      	cmp	r3, #3
 80053d4:	d10f      	bne.n	80053f6 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d009      	beq.n	80053f6 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80053f6:	2180      	movs	r1, #128	@ 0x80
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f001 fce1 	bl	8006dc0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f001 f8d2 	bl	80065a8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d03a      	beq.n	8005484 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f7ff fe30 	bl	8005074 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800541c:	e032      	b.n	8005484 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800541e:	7afb      	ldrb	r3, [r7, #11]
 8005420:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005424:	b2db      	uxtb	r3, r3
 8005426:	4619      	mov	r1, r3
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 f986 	bl	800573a <USBD_CoreFindEP>
 800542e:	4603      	mov	r3, r0
 8005430:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005432:	7dfb      	ldrb	r3, [r7, #23]
 8005434:	2bff      	cmp	r3, #255	@ 0xff
 8005436:	d025      	beq.n	8005484 <USBD_LL_DataInStage+0x16c>
 8005438:	7dfb      	ldrb	r3, [r7, #23]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d122      	bne.n	8005484 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b03      	cmp	r3, #3
 8005448:	d11c      	bne.n	8005484 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800544a:	7dfa      	ldrb	r2, [r7, #23]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	32ae      	adds	r2, #174	@ 0xae
 8005450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d014      	beq.n	8005484 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800545a:	7dfa      	ldrb	r2, [r7, #23]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005462:	7dfa      	ldrb	r2, [r7, #23]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	32ae      	adds	r2, #174	@ 0xae
 8005468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	7afa      	ldrb	r2, [r7, #11]
 8005470:	4611      	mov	r1, r2
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	4798      	blx	r3
 8005476:	4603      	mov	r3, r0
 8005478:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800547a:	7dbb      	ldrb	r3, [r7, #22]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8005480:	7dbb      	ldrb	r3, [r7, #22]
 8005482:	e000      	b.n	8005486 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2201      	movs	r2, #1
 800549e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d014      	beq.n	80054f4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00e      	beq.n	80054f4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	6852      	ldr	r2, [r2, #4]
 80054e2:	b2d2      	uxtb	r2, r2
 80054e4:	4611      	mov	r1, r2
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	4798      	blx	r3
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80054f0:	2303      	movs	r3, #3
 80054f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80054f4:	2340      	movs	r3, #64	@ 0x40
 80054f6:	2200      	movs	r2, #0
 80054f8:	2100      	movs	r1, #0
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f001 fc1b 	bl	8006d36 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2240      	movs	r2, #64	@ 0x40
 800550c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005510:	2340      	movs	r3, #64	@ 0x40
 8005512:	2200      	movs	r2, #0
 8005514:	2180      	movs	r1, #128	@ 0x80
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f001 fc0d 	bl	8006d36 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2240      	movs	r2, #64	@ 0x40
 8005528:	841a      	strh	r2, [r3, #32]

  return ret;
 800552a:	7bfb      	ldrb	r3, [r7, #15]
}
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	460b      	mov	r3, r1
 800553e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	78fa      	ldrb	r2, [r7, #3]
 8005544:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b04      	cmp	r3, #4
 8005566:	d006      	beq.n	8005576 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800556e:	b2da      	uxtb	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2204      	movs	r2, #4
 800557a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b04      	cmp	r3, #4
 800559e:	d106      	bne.n	80055ae <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d110      	bne.n	80055f2 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00b      	beq.n	80055f2 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d005      	beq.n	80055f2 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	460b      	mov	r3, r1
 8005606:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	32ae      	adds	r2, #174	@ 0xae
 8005612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800561a:	2303      	movs	r3, #3
 800561c:	e01c      	b.n	8005658 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b03      	cmp	r3, #3
 8005628:	d115      	bne.n	8005656 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	32ae      	adds	r2, #174	@ 0xae
 8005634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00b      	beq.n	8005656 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	32ae      	adds	r2, #174	@ 0xae
 8005648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	78fa      	ldrb	r2, [r7, #3]
 8005650:	4611      	mov	r1, r2
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3708      	adds	r7, #8
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	32ae      	adds	r2, #174	@ 0xae
 8005676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800567e:	2303      	movs	r3, #3
 8005680:	e01c      	b.n	80056bc <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b03      	cmp	r3, #3
 800568c:	d115      	bne.n	80056ba <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	32ae      	adds	r2, #174	@ 0xae
 8005698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800569c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00b      	beq.n	80056ba <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	32ae      	adds	r2, #174	@ 0xae
 80056ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b2:	78fa      	ldrb	r2, [r7, #3]
 80056b4:	4611      	mov	r1, r2
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3708      	adds	r7, #8
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b084      	sub	sp, #16
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80056e2:	2300      	movs	r3, #0
 80056e4:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2201      	movs	r2, #1
 80056ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00e      	beq.n	8005716 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6852      	ldr	r2, [r2, #4]
 8005704:	b2d2      	uxtb	r2, r2
 8005706:	4611      	mov	r1, r2
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	4798      	blx	r3
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005712:	2303      	movs	r3, #3
 8005714:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005716:	7bfb      	ldrb	r3, [r7, #15]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3710      	adds	r7, #16
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	460b      	mov	r3, r1
 800572a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800572c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800572e:	4618      	mov	r0, r3
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	460b      	mov	r3, r1
 8005744:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005746:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005748:	4618      	mov	r0, r3
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	460b      	mov	r3, r1
 800575e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005768:	2300      	movs	r3, #0
 800576a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	885b      	ldrh	r3, [r3, #2]
 8005770:	b29b      	uxth	r3, r3
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	7812      	ldrb	r2, [r2, #0]
 8005776:	4293      	cmp	r3, r2
 8005778:	d91f      	bls.n	80057ba <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005780:	e013      	b.n	80057aa <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005782:	f107 030a 	add.w	r3, r7, #10
 8005786:	4619      	mov	r1, r3
 8005788:	6978      	ldr	r0, [r7, #20]
 800578a:	f000 f81b 	bl	80057c4 <USBD_GetNextDesc>
 800578e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	785b      	ldrb	r3, [r3, #1]
 8005794:	2b05      	cmp	r3, #5
 8005796:	d108      	bne.n	80057aa <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	789b      	ldrb	r3, [r3, #2]
 80057a0:	78fa      	ldrb	r2, [r7, #3]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d008      	beq.n	80057b8 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80057a6:	2300      	movs	r3, #0
 80057a8:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	885b      	ldrh	r3, [r3, #2]
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	897b      	ldrh	r3, [r7, #10]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d8e5      	bhi.n	8005782 <USBD_GetEpDesc+0x2e>
 80057b6:	e000      	b.n	80057ba <USBD_GetEpDesc+0x66>
          break;
 80057b8:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80057ba:	693b      	ldr	r3, [r7, #16]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3718      	adds	r7, #24
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	7812      	ldrb	r2, [r2, #0]
 80057da:	4413      	add	r3, r2
 80057dc:	b29a      	uxth	r2, r3
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	461a      	mov	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4413      	add	r3, r2
 80057ec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80057ee:	68fb      	ldr	r3, [r7, #12]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	3301      	adds	r3, #1
 8005812:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800581a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800581e:	021b      	lsls	r3, r3, #8
 8005820:	b21a      	sxth	r2, r3
 8005822:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005826:	4313      	orrs	r3, r2
 8005828:	b21b      	sxth	r3, r3
 800582a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800582c:	89fb      	ldrh	r3, [r7, #14]
}
 800582e:	4618      	mov	r0, r3
 8005830:	371c      	adds	r7, #28
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
	...

0800583c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005846:	2300      	movs	r3, #0
 8005848:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005852:	2b40      	cmp	r3, #64	@ 0x40
 8005854:	d005      	beq.n	8005862 <USBD_StdDevReq+0x26>
 8005856:	2b40      	cmp	r3, #64	@ 0x40
 8005858:	d857      	bhi.n	800590a <USBD_StdDevReq+0xce>
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00f      	beq.n	800587e <USBD_StdDevReq+0x42>
 800585e:	2b20      	cmp	r3, #32
 8005860:	d153      	bne.n	800590a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	32ae      	adds	r2, #174	@ 0xae
 800586c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	6839      	ldr	r1, [r7, #0]
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	4798      	blx	r3
 8005878:	4603      	mov	r3, r0
 800587a:	73fb      	strb	r3, [r7, #15]
      break;
 800587c:	e04a      	b.n	8005914 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	785b      	ldrb	r3, [r3, #1]
 8005882:	2b09      	cmp	r3, #9
 8005884:	d83b      	bhi.n	80058fe <USBD_StdDevReq+0xc2>
 8005886:	a201      	add	r2, pc, #4	@ (adr r2, 800588c <USBD_StdDevReq+0x50>)
 8005888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588c:	080058e1 	.word	0x080058e1
 8005890:	080058f5 	.word	0x080058f5
 8005894:	080058ff 	.word	0x080058ff
 8005898:	080058eb 	.word	0x080058eb
 800589c:	080058ff 	.word	0x080058ff
 80058a0:	080058bf 	.word	0x080058bf
 80058a4:	080058b5 	.word	0x080058b5
 80058a8:	080058ff 	.word	0x080058ff
 80058ac:	080058d7 	.word	0x080058d7
 80058b0:	080058c9 	.word	0x080058c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80058b4:	6839      	ldr	r1, [r7, #0]
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 fa3e 	bl	8005d38 <USBD_GetDescriptor>
          break;
 80058bc:	e024      	b.n	8005908 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80058be:	6839      	ldr	r1, [r7, #0]
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 fba3 	bl	800600c <USBD_SetAddress>
          break;
 80058c6:	e01f      	b.n	8005908 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80058c8:	6839      	ldr	r1, [r7, #0]
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 fbe2 	bl	8006094 <USBD_SetConfig>
 80058d0:	4603      	mov	r3, r0
 80058d2:	73fb      	strb	r3, [r7, #15]
          break;
 80058d4:	e018      	b.n	8005908 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80058d6:	6839      	ldr	r1, [r7, #0]
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fc85 	bl	80061e8 <USBD_GetConfig>
          break;
 80058de:	e013      	b.n	8005908 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80058e0:	6839      	ldr	r1, [r7, #0]
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 fcb6 	bl	8006254 <USBD_GetStatus>
          break;
 80058e8:	e00e      	b.n	8005908 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80058ea:	6839      	ldr	r1, [r7, #0]
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 fce5 	bl	80062bc <USBD_SetFeature>
          break;
 80058f2:	e009      	b.n	8005908 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80058f4:	6839      	ldr	r1, [r7, #0]
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 fd09 	bl	800630e <USBD_ClrFeature>
          break;
 80058fc:	e004      	b.n	8005908 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80058fe:	6839      	ldr	r1, [r7, #0]
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fd60 	bl	80063c6 <USBD_CtlError>
          break;
 8005906:	bf00      	nop
      }
      break;
 8005908:	e004      	b.n	8005914 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800590a:	6839      	ldr	r1, [r7, #0]
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 fd5a 	bl	80063c6 <USBD_CtlError>
      break;
 8005912:	bf00      	nop
  }

  return ret;
 8005914:	7bfb      	ldrb	r3, [r7, #15]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop

08005920 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800592a:	2300      	movs	r3, #0
 800592c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005936:	2b40      	cmp	r3, #64	@ 0x40
 8005938:	d005      	beq.n	8005946 <USBD_StdItfReq+0x26>
 800593a:	2b40      	cmp	r3, #64	@ 0x40
 800593c:	d852      	bhi.n	80059e4 <USBD_StdItfReq+0xc4>
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <USBD_StdItfReq+0x26>
 8005942:	2b20      	cmp	r3, #32
 8005944:	d14e      	bne.n	80059e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800594c:	b2db      	uxtb	r3, r3
 800594e:	3b01      	subs	r3, #1
 8005950:	2b02      	cmp	r3, #2
 8005952:	d840      	bhi.n	80059d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	889b      	ldrh	r3, [r3, #4]
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b01      	cmp	r3, #1
 800595c:	d836      	bhi.n	80059cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	889b      	ldrh	r3, [r3, #4]
 8005962:	b2db      	uxtb	r3, r3
 8005964:	4619      	mov	r1, r3
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7ff feda 	bl	8005720 <USBD_CoreFindIF>
 800596c:	4603      	mov	r3, r0
 800596e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005970:	7bbb      	ldrb	r3, [r7, #14]
 8005972:	2bff      	cmp	r3, #255	@ 0xff
 8005974:	d01d      	beq.n	80059b2 <USBD_StdItfReq+0x92>
 8005976:	7bbb      	ldrb	r3, [r7, #14]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d11a      	bne.n	80059b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800597c:	7bba      	ldrb	r2, [r7, #14]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	32ae      	adds	r2, #174	@ 0xae
 8005982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00f      	beq.n	80059ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800598c:	7bba      	ldrb	r2, [r7, #14]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005994:	7bba      	ldrb	r2, [r7, #14]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	32ae      	adds	r2, #174	@ 0xae
 800599a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	6839      	ldr	r1, [r7, #0]
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	4798      	blx	r3
 80059a6:	4603      	mov	r3, r0
 80059a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80059aa:	e004      	b.n	80059b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80059ac:	2303      	movs	r3, #3
 80059ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80059b0:	e001      	b.n	80059b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80059b2:	2303      	movs	r3, #3
 80059b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	88db      	ldrh	r3, [r3, #6]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d110      	bne.n	80059e0 <USBD_StdItfReq+0xc0>
 80059be:	7bfb      	ldrb	r3, [r7, #15]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10d      	bne.n	80059e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 fddc 	bl	8006582 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80059ca:	e009      	b.n	80059e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80059cc:	6839      	ldr	r1, [r7, #0]
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fcf9 	bl	80063c6 <USBD_CtlError>
          break;
 80059d4:	e004      	b.n	80059e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80059d6:	6839      	ldr	r1, [r7, #0]
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 fcf4 	bl	80063c6 <USBD_CtlError>
          break;
 80059de:	e000      	b.n	80059e2 <USBD_StdItfReq+0xc2>
          break;
 80059e0:	bf00      	nop
      }
      break;
 80059e2:	e004      	b.n	80059ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80059e4:	6839      	ldr	r1, [r7, #0]
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 fced 	bl	80063c6 <USBD_CtlError>
      break;
 80059ec:	bf00      	nop
  }

  return ret;
 80059ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005a02:	2300      	movs	r3, #0
 8005a04:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	889b      	ldrh	r3, [r3, #4]
 8005a0a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005a14:	2b40      	cmp	r3, #64	@ 0x40
 8005a16:	d007      	beq.n	8005a28 <USBD_StdEPReq+0x30>
 8005a18:	2b40      	cmp	r3, #64	@ 0x40
 8005a1a:	f200 8181 	bhi.w	8005d20 <USBD_StdEPReq+0x328>
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d02a      	beq.n	8005a78 <USBD_StdEPReq+0x80>
 8005a22:	2b20      	cmp	r3, #32
 8005a24:	f040 817c 	bne.w	8005d20 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005a28:	7bbb      	ldrb	r3, [r7, #14]
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f7ff fe84 	bl	800573a <USBD_CoreFindEP>
 8005a32:	4603      	mov	r3, r0
 8005a34:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a36:	7b7b      	ldrb	r3, [r7, #13]
 8005a38:	2bff      	cmp	r3, #255	@ 0xff
 8005a3a:	f000 8176 	beq.w	8005d2a <USBD_StdEPReq+0x332>
 8005a3e:	7b7b      	ldrb	r3, [r7, #13]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f040 8172 	bne.w	8005d2a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8005a46:	7b7a      	ldrb	r2, [r7, #13]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005a4e:	7b7a      	ldrb	r2, [r7, #13]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	32ae      	adds	r2, #174	@ 0xae
 8005a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f000 8165 	beq.w	8005d2a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005a60:	7b7a      	ldrb	r2, [r7, #13]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	32ae      	adds	r2, #174	@ 0xae
 8005a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	6839      	ldr	r1, [r7, #0]
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	4798      	blx	r3
 8005a72:	4603      	mov	r3, r0
 8005a74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a76:	e158      	b.n	8005d2a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	785b      	ldrb	r3, [r3, #1]
 8005a7c:	2b03      	cmp	r3, #3
 8005a7e:	d008      	beq.n	8005a92 <USBD_StdEPReq+0x9a>
 8005a80:	2b03      	cmp	r3, #3
 8005a82:	f300 8147 	bgt.w	8005d14 <USBD_StdEPReq+0x31c>
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f000 809b 	beq.w	8005bc2 <USBD_StdEPReq+0x1ca>
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d03c      	beq.n	8005b0a <USBD_StdEPReq+0x112>
 8005a90:	e140      	b.n	8005d14 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d002      	beq.n	8005aa4 <USBD_StdEPReq+0xac>
 8005a9e:	2b03      	cmp	r3, #3
 8005aa0:	d016      	beq.n	8005ad0 <USBD_StdEPReq+0xd8>
 8005aa2:	e02c      	b.n	8005afe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005aa4:	7bbb      	ldrb	r3, [r7, #14]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00d      	beq.n	8005ac6 <USBD_StdEPReq+0xce>
 8005aaa:	7bbb      	ldrb	r3, [r7, #14]
 8005aac:	2b80      	cmp	r3, #128	@ 0x80
 8005aae:	d00a      	beq.n	8005ac6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ab0:	7bbb      	ldrb	r3, [r7, #14]
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f001 f983 	bl	8006dc0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005aba:	2180      	movs	r1, #128	@ 0x80
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f001 f97f 	bl	8006dc0 <USBD_LL_StallEP>
 8005ac2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005ac4:	e020      	b.n	8005b08 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005ac6:	6839      	ldr	r1, [r7, #0]
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 fc7c 	bl	80063c6 <USBD_CtlError>
              break;
 8005ace:	e01b      	b.n	8005b08 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	885b      	ldrh	r3, [r3, #2]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10e      	bne.n	8005af6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005ad8:	7bbb      	ldrb	r3, [r7, #14]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00b      	beq.n	8005af6 <USBD_StdEPReq+0xfe>
 8005ade:	7bbb      	ldrb	r3, [r7, #14]
 8005ae0:	2b80      	cmp	r3, #128	@ 0x80
 8005ae2:	d008      	beq.n	8005af6 <USBD_StdEPReq+0xfe>
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	88db      	ldrh	r3, [r3, #6]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d104      	bne.n	8005af6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005aec:	7bbb      	ldrb	r3, [r7, #14]
 8005aee:	4619      	mov	r1, r3
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f001 f965 	bl	8006dc0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fd43 	bl	8006582 <USBD_CtlSendStatus>

              break;
 8005afc:	e004      	b.n	8005b08 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005afe:	6839      	ldr	r1, [r7, #0]
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 fc60 	bl	80063c6 <USBD_CtlError>
              break;
 8005b06:	bf00      	nop
          }
          break;
 8005b08:	e109      	b.n	8005d1e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d002      	beq.n	8005b1c <USBD_StdEPReq+0x124>
 8005b16:	2b03      	cmp	r3, #3
 8005b18:	d016      	beq.n	8005b48 <USBD_StdEPReq+0x150>
 8005b1a:	e04b      	b.n	8005bb4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b1c:	7bbb      	ldrb	r3, [r7, #14]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00d      	beq.n	8005b3e <USBD_StdEPReq+0x146>
 8005b22:	7bbb      	ldrb	r3, [r7, #14]
 8005b24:	2b80      	cmp	r3, #128	@ 0x80
 8005b26:	d00a      	beq.n	8005b3e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005b28:	7bbb      	ldrb	r3, [r7, #14]
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f001 f947 	bl	8006dc0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b32:	2180      	movs	r1, #128	@ 0x80
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f001 f943 	bl	8006dc0 <USBD_LL_StallEP>
 8005b3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005b3c:	e040      	b.n	8005bc0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005b3e:	6839      	ldr	r1, [r7, #0]
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 fc40 	bl	80063c6 <USBD_CtlError>
              break;
 8005b46:	e03b      	b.n	8005bc0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	885b      	ldrh	r3, [r3, #2]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d136      	bne.n	8005bbe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005b50:	7bbb      	ldrb	r3, [r7, #14]
 8005b52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d004      	beq.n	8005b64 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005b5a:	7bbb      	ldrb	r3, [r7, #14]
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f001 f94d 	bl	8006dfe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fd0c 	bl	8006582 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005b6a:	7bbb      	ldrb	r3, [r7, #14]
 8005b6c:	4619      	mov	r1, r3
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7ff fde3 	bl	800573a <USBD_CoreFindEP>
 8005b74:	4603      	mov	r3, r0
 8005b76:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b78:	7b7b      	ldrb	r3, [r7, #13]
 8005b7a:	2bff      	cmp	r3, #255	@ 0xff
 8005b7c:	d01f      	beq.n	8005bbe <USBD_StdEPReq+0x1c6>
 8005b7e:	7b7b      	ldrb	r3, [r7, #13]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d11c      	bne.n	8005bbe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005b84:	7b7a      	ldrb	r2, [r7, #13]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005b8c:	7b7a      	ldrb	r2, [r7, #13]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	32ae      	adds	r2, #174	@ 0xae
 8005b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d010      	beq.n	8005bbe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005b9c:	7b7a      	ldrb	r2, [r7, #13]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	32ae      	adds	r2, #174	@ 0xae
 8005ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	6839      	ldr	r1, [r7, #0]
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	4798      	blx	r3
 8005bae:	4603      	mov	r3, r0
 8005bb0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005bb2:	e004      	b.n	8005bbe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005bb4:	6839      	ldr	r1, [r7, #0]
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fc05 	bl	80063c6 <USBD_CtlError>
              break;
 8005bbc:	e000      	b.n	8005bc0 <USBD_StdEPReq+0x1c8>
              break;
 8005bbe:	bf00      	nop
          }
          break;
 8005bc0:	e0ad      	b.n	8005d1e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d002      	beq.n	8005bd4 <USBD_StdEPReq+0x1dc>
 8005bce:	2b03      	cmp	r3, #3
 8005bd0:	d033      	beq.n	8005c3a <USBD_StdEPReq+0x242>
 8005bd2:	e099      	b.n	8005d08 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005bd4:	7bbb      	ldrb	r3, [r7, #14]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d007      	beq.n	8005bea <USBD_StdEPReq+0x1f2>
 8005bda:	7bbb      	ldrb	r3, [r7, #14]
 8005bdc:	2b80      	cmp	r3, #128	@ 0x80
 8005bde:	d004      	beq.n	8005bea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005be0:	6839      	ldr	r1, [r7, #0]
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fbef 	bl	80063c6 <USBD_CtlError>
                break;
 8005be8:	e093      	b.n	8005d12 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	da0b      	bge.n	8005c0a <USBD_StdEPReq+0x212>
 8005bf2:	7bbb      	ldrb	r3, [r7, #14]
 8005bf4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	3310      	adds	r3, #16
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	4413      	add	r3, r2
 8005c06:	3304      	adds	r3, #4
 8005c08:	e00b      	b.n	8005c22 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005c0a:	7bbb      	ldrb	r3, [r7, #14]
 8005c0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c10:	4613      	mov	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	4413      	add	r3, r2
 8005c20:	3304      	adds	r3, #4
 8005c22:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2200      	movs	r2, #0
 8005c28:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	330e      	adds	r3, #14
 8005c2e:	2202      	movs	r2, #2
 8005c30:	4619      	mov	r1, r3
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 fc44 	bl	80064c0 <USBD_CtlSendData>
              break;
 8005c38:	e06b      	b.n	8005d12 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005c3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	da11      	bge.n	8005c66 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005c42:	7bbb      	ldrb	r3, [r7, #14]
 8005c44:	f003 020f 	and.w	r2, r3, #15
 8005c48:	6879      	ldr	r1, [r7, #4]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4413      	add	r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	440b      	add	r3, r1
 8005c54:	3323      	adds	r3, #35	@ 0x23
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d117      	bne.n	8005c8c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8005c5c:	6839      	ldr	r1, [r7, #0]
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fbb1 	bl	80063c6 <USBD_CtlError>
                  break;
 8005c64:	e055      	b.n	8005d12 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005c66:	7bbb      	ldrb	r3, [r7, #14]
 8005c68:	f003 020f 	and.w	r2, r3, #15
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	440b      	add	r3, r1
 8005c78:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d104      	bne.n	8005c8c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8005c82:	6839      	ldr	r1, [r7, #0]
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 fb9e 	bl	80063c6 <USBD_CtlError>
                  break;
 8005c8a:	e042      	b.n	8005d12 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	da0b      	bge.n	8005cac <USBD_StdEPReq+0x2b4>
 8005c94:	7bbb      	ldrb	r3, [r7, #14]
 8005c96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	3310      	adds	r3, #16
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	3304      	adds	r3, #4
 8005caa:	e00b      	b.n	8005cc4 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005cac:	7bbb      	ldrb	r3, [r7, #14]
 8005cae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	3304      	adds	r3, #4
 8005cc4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005cc6:	7bbb      	ldrb	r3, [r7, #14]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d002      	beq.n	8005cd2 <USBD_StdEPReq+0x2da>
 8005ccc:	7bbb      	ldrb	r3, [r7, #14]
 8005cce:	2b80      	cmp	r3, #128	@ 0x80
 8005cd0:	d103      	bne.n	8005cda <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	739a      	strb	r2, [r3, #14]
 8005cd8:	e00e      	b.n	8005cf8 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005cda:	7bbb      	ldrb	r3, [r7, #14]
 8005cdc:	4619      	mov	r1, r3
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f001 f8ac 	bl	8006e3c <USBD_LL_IsStallEP>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d003      	beq.n	8005cf2 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2201      	movs	r2, #1
 8005cee:	739a      	strb	r2, [r3, #14]
 8005cf0:	e002      	b.n	8005cf8 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	330e      	adds	r3, #14
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	4619      	mov	r1, r3
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 fbdd 	bl	80064c0 <USBD_CtlSendData>
              break;
 8005d06:	e004      	b.n	8005d12 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8005d08:	6839      	ldr	r1, [r7, #0]
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 fb5b 	bl	80063c6 <USBD_CtlError>
              break;
 8005d10:	bf00      	nop
          }
          break;
 8005d12:	e004      	b.n	8005d1e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8005d14:	6839      	ldr	r1, [r7, #0]
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fb55 	bl	80063c6 <USBD_CtlError>
          break;
 8005d1c:	bf00      	nop
      }
      break;
 8005d1e:	e005      	b.n	8005d2c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8005d20:	6839      	ldr	r1, [r7, #0]
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fb4f 	bl	80063c6 <USBD_CtlError>
      break;
 8005d28:	e000      	b.n	8005d2c <USBD_StdEPReq+0x334>
      break;
 8005d2a:	bf00      	nop
  }

  return ret;
 8005d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
	...

08005d38 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	885b      	ldrh	r3, [r3, #2]
 8005d52:	0a1b      	lsrs	r3, r3, #8
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	3b01      	subs	r3, #1
 8005d58:	2b06      	cmp	r3, #6
 8005d5a:	f200 8128 	bhi.w	8005fae <USBD_GetDescriptor+0x276>
 8005d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d64 <USBD_GetDescriptor+0x2c>)
 8005d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d64:	08005d81 	.word	0x08005d81
 8005d68:	08005d99 	.word	0x08005d99
 8005d6c:	08005dd9 	.word	0x08005dd9
 8005d70:	08005faf 	.word	0x08005faf
 8005d74:	08005faf 	.word	0x08005faf
 8005d78:	08005f4f 	.word	0x08005f4f
 8005d7c:	08005f7b 	.word	0x08005f7b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	7c12      	ldrb	r2, [r2, #16]
 8005d8c:	f107 0108 	add.w	r1, r7, #8
 8005d90:	4610      	mov	r0, r2
 8005d92:	4798      	blx	r3
 8005d94:	60f8      	str	r0, [r7, #12]
      break;
 8005d96:	e112      	b.n	8005fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	7c1b      	ldrb	r3, [r3, #16]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10d      	bne.n	8005dbc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da8:	f107 0208 	add.w	r2, r7, #8
 8005dac:	4610      	mov	r0, r2
 8005dae:	4798      	blx	r3
 8005db0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	3301      	adds	r3, #1
 8005db6:	2202      	movs	r2, #2
 8005db8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005dba:	e100      	b.n	8005fbe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc4:	f107 0208 	add.w	r2, r7, #8
 8005dc8:	4610      	mov	r0, r2
 8005dca:	4798      	blx	r3
 8005dcc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	701a      	strb	r2, [r3, #0]
      break;
 8005dd6:	e0f2      	b.n	8005fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	885b      	ldrh	r3, [r3, #2]
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b05      	cmp	r3, #5
 8005de0:	f200 80ac 	bhi.w	8005f3c <USBD_GetDescriptor+0x204>
 8005de4:	a201      	add	r2, pc, #4	@ (adr r2, 8005dec <USBD_GetDescriptor+0xb4>)
 8005de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dea:	bf00      	nop
 8005dec:	08005e05 	.word	0x08005e05
 8005df0:	08005e39 	.word	0x08005e39
 8005df4:	08005e6d 	.word	0x08005e6d
 8005df8:	08005ea1 	.word	0x08005ea1
 8005dfc:	08005ed5 	.word	0x08005ed5
 8005e00:	08005f09 	.word	0x08005f09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00b      	beq.n	8005e28 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	7c12      	ldrb	r2, [r2, #16]
 8005e1c:	f107 0108 	add.w	r1, r7, #8
 8005e20:	4610      	mov	r0, r2
 8005e22:	4798      	blx	r3
 8005e24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e26:	e091      	b.n	8005f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e28:	6839      	ldr	r1, [r7, #0]
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 facb 	bl	80063c6 <USBD_CtlError>
            err++;
 8005e30:	7afb      	ldrb	r3, [r7, #11]
 8005e32:	3301      	adds	r3, #1
 8005e34:	72fb      	strb	r3, [r7, #11]
          break;
 8005e36:	e089      	b.n	8005f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00b      	beq.n	8005e5c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	7c12      	ldrb	r2, [r2, #16]
 8005e50:	f107 0108 	add.w	r1, r7, #8
 8005e54:	4610      	mov	r0, r2
 8005e56:	4798      	blx	r3
 8005e58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e5a:	e077      	b.n	8005f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e5c:	6839      	ldr	r1, [r7, #0]
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fab1 	bl	80063c6 <USBD_CtlError>
            err++;
 8005e64:	7afb      	ldrb	r3, [r7, #11]
 8005e66:	3301      	adds	r3, #1
 8005e68:	72fb      	strb	r3, [r7, #11]
          break;
 8005e6a:	e06f      	b.n	8005f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00b      	beq.n	8005e90 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	7c12      	ldrb	r2, [r2, #16]
 8005e84:	f107 0108 	add.w	r1, r7, #8
 8005e88:	4610      	mov	r0, r2
 8005e8a:	4798      	blx	r3
 8005e8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e8e:	e05d      	b.n	8005f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e90:	6839      	ldr	r1, [r7, #0]
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fa97 	bl	80063c6 <USBD_CtlError>
            err++;
 8005e98:	7afb      	ldrb	r3, [r7, #11]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	72fb      	strb	r3, [r7, #11]
          break;
 8005e9e:	e055      	b.n	8005f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00b      	beq.n	8005ec4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	7c12      	ldrb	r2, [r2, #16]
 8005eb8:	f107 0108 	add.w	r1, r7, #8
 8005ebc:	4610      	mov	r0, r2
 8005ebe:	4798      	blx	r3
 8005ec0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ec2:	e043      	b.n	8005f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ec4:	6839      	ldr	r1, [r7, #0]
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fa7d 	bl	80063c6 <USBD_CtlError>
            err++;
 8005ecc:	7afb      	ldrb	r3, [r7, #11]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	72fb      	strb	r3, [r7, #11]
          break;
 8005ed2:	e03b      	b.n	8005f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00b      	beq.n	8005ef8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005ee6:	695b      	ldr	r3, [r3, #20]
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	7c12      	ldrb	r2, [r2, #16]
 8005eec:	f107 0108 	add.w	r1, r7, #8
 8005ef0:	4610      	mov	r0, r2
 8005ef2:	4798      	blx	r3
 8005ef4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ef6:	e029      	b.n	8005f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ef8:	6839      	ldr	r1, [r7, #0]
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fa63 	bl	80063c6 <USBD_CtlError>
            err++;
 8005f00:	7afb      	ldrb	r3, [r7, #11]
 8005f02:	3301      	adds	r3, #1
 8005f04:	72fb      	strb	r3, [r7, #11]
          break;
 8005f06:	e021      	b.n	8005f4c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00b      	beq.n	8005f2c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	7c12      	ldrb	r2, [r2, #16]
 8005f20:	f107 0108 	add.w	r1, r7, #8
 8005f24:	4610      	mov	r0, r2
 8005f26:	4798      	blx	r3
 8005f28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f2a:	e00f      	b.n	8005f4c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f2c:	6839      	ldr	r1, [r7, #0]
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fa49 	bl	80063c6 <USBD_CtlError>
            err++;
 8005f34:	7afb      	ldrb	r3, [r7, #11]
 8005f36:	3301      	adds	r3, #1
 8005f38:	72fb      	strb	r3, [r7, #11]
          break;
 8005f3a:	e007      	b.n	8005f4c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005f3c:	6839      	ldr	r1, [r7, #0]
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fa41 	bl	80063c6 <USBD_CtlError>
          err++;
 8005f44:	7afb      	ldrb	r3, [r7, #11]
 8005f46:	3301      	adds	r3, #1
 8005f48:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005f4a:	bf00      	nop
      }
      break;
 8005f4c:	e037      	b.n	8005fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	7c1b      	ldrb	r3, [r3, #16]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d109      	bne.n	8005f6a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f5e:	f107 0208 	add.w	r2, r7, #8
 8005f62:	4610      	mov	r0, r2
 8005f64:	4798      	blx	r3
 8005f66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f68:	e029      	b.n	8005fbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005f6a:	6839      	ldr	r1, [r7, #0]
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fa2a 	bl	80063c6 <USBD_CtlError>
        err++;
 8005f72:	7afb      	ldrb	r3, [r7, #11]
 8005f74:	3301      	adds	r3, #1
 8005f76:	72fb      	strb	r3, [r7, #11]
      break;
 8005f78:	e021      	b.n	8005fbe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	7c1b      	ldrb	r3, [r3, #16]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10d      	bne.n	8005f9e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f8a:	f107 0208 	add.w	r2, r7, #8
 8005f8e:	4610      	mov	r0, r2
 8005f90:	4798      	blx	r3
 8005f92:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	3301      	adds	r3, #1
 8005f98:	2207      	movs	r2, #7
 8005f9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f9c:	e00f      	b.n	8005fbe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005f9e:	6839      	ldr	r1, [r7, #0]
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 fa10 	bl	80063c6 <USBD_CtlError>
        err++;
 8005fa6:	7afb      	ldrb	r3, [r7, #11]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	72fb      	strb	r3, [r7, #11]
      break;
 8005fac:	e007      	b.n	8005fbe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005fae:	6839      	ldr	r1, [r7, #0]
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 fa08 	bl	80063c6 <USBD_CtlError>
      err++;
 8005fb6:	7afb      	ldrb	r3, [r7, #11]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	72fb      	strb	r3, [r7, #11]
      break;
 8005fbc:	bf00      	nop
  }

  if (err != 0U)
 8005fbe:	7afb      	ldrb	r3, [r7, #11]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d11e      	bne.n	8006002 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	88db      	ldrh	r3, [r3, #6]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d016      	beq.n	8005ffa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005fcc:	893b      	ldrh	r3, [r7, #8]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00e      	beq.n	8005ff0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	88da      	ldrh	r2, [r3, #6]
 8005fd6:	893b      	ldrh	r3, [r7, #8]
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	bf28      	it	cs
 8005fdc:	4613      	movcs	r3, r2
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005fe2:	893b      	ldrh	r3, [r7, #8]
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	68f9      	ldr	r1, [r7, #12]
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 fa69 	bl	80064c0 <USBD_CtlSendData>
 8005fee:	e009      	b.n	8006004 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005ff0:	6839      	ldr	r1, [r7, #0]
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f9e7 	bl	80063c6 <USBD_CtlError>
 8005ff8:	e004      	b.n	8006004 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fac1 	bl	8006582 <USBD_CtlSendStatus>
 8006000:	e000      	b.n	8006004 <USBD_GetDescriptor+0x2cc>
    return;
 8006002:	bf00      	nop
  }
}
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop

0800600c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	889b      	ldrh	r3, [r3, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d131      	bne.n	8006082 <USBD_SetAddress+0x76>
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	88db      	ldrh	r3, [r3, #6]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d12d      	bne.n	8006082 <USBD_SetAddress+0x76>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	885b      	ldrh	r3, [r3, #2]
 800602a:	2b7f      	cmp	r3, #127	@ 0x7f
 800602c:	d829      	bhi.n	8006082 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	885b      	ldrh	r3, [r3, #2]
 8006032:	b2db      	uxtb	r3, r3
 8006034:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006038:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b03      	cmp	r3, #3
 8006044:	d104      	bne.n	8006050 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006046:	6839      	ldr	r1, [r7, #0]
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f9bc 	bl	80063c6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800604e:	e01d      	b.n	800608c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	7bfa      	ldrb	r2, [r7, #15]
 8006054:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006058:	7bfb      	ldrb	r3, [r7, #15]
 800605a:	4619      	mov	r1, r3
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 ff19 	bl	8006e94 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fa8d 	bl	8006582 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006068:	7bfb      	ldrb	r3, [r7, #15]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d004      	beq.n	8006078 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2202      	movs	r2, #2
 8006072:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006076:	e009      	b.n	800608c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006080:	e004      	b.n	800608c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006082:	6839      	ldr	r1, [r7, #0]
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 f99e 	bl	80063c6 <USBD_CtlError>
  }
}
 800608a:	bf00      	nop
 800608c:	bf00      	nop
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	885b      	ldrh	r3, [r3, #2]
 80060a6:	b2da      	uxtb	r2, r3
 80060a8:	4b4e      	ldr	r3, [pc, #312]	@ (80061e4 <USBD_SetConfig+0x150>)
 80060aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80060ac:	4b4d      	ldr	r3, [pc, #308]	@ (80061e4 <USBD_SetConfig+0x150>)
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d905      	bls.n	80060c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80060b4:	6839      	ldr	r1, [r7, #0]
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f985 	bl	80063c6 <USBD_CtlError>
    return USBD_FAIL;
 80060bc:	2303      	movs	r3, #3
 80060be:	e08c      	b.n	80061da <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d002      	beq.n	80060d2 <USBD_SetConfig+0x3e>
 80060cc:	2b03      	cmp	r3, #3
 80060ce:	d029      	beq.n	8006124 <USBD_SetConfig+0x90>
 80060d0:	e075      	b.n	80061be <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80060d2:	4b44      	ldr	r3, [pc, #272]	@ (80061e4 <USBD_SetConfig+0x150>)
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d020      	beq.n	800611c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80060da:	4b42      	ldr	r3, [pc, #264]	@ (80061e4 <USBD_SetConfig+0x150>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	461a      	mov	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80060e4:	4b3f      	ldr	r3, [pc, #252]	@ (80061e4 <USBD_SetConfig+0x150>)
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	4619      	mov	r1, r3
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f7fe ffcd 	bl	800508a <USBD_SetClassConfig>
 80060f0:	4603      	mov	r3, r0
 80060f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80060f4:	7bfb      	ldrb	r3, [r7, #15]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d008      	beq.n	800610c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80060fa:	6839      	ldr	r1, [r7, #0]
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f962 	bl	80063c6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2202      	movs	r2, #2
 8006106:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800610a:	e065      	b.n	80061d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fa38 	bl	8006582 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2203      	movs	r2, #3
 8006116:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800611a:	e05d      	b.n	80061d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 fa30 	bl	8006582 <USBD_CtlSendStatus>
      break;
 8006122:	e059      	b.n	80061d8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006124:	4b2f      	ldr	r3, [pc, #188]	@ (80061e4 <USBD_SetConfig+0x150>)
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d112      	bne.n	8006152 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006134:	4b2b      	ldr	r3, [pc, #172]	@ (80061e4 <USBD_SetConfig+0x150>)
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	461a      	mov	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800613e:	4b29      	ldr	r3, [pc, #164]	@ (80061e4 <USBD_SetConfig+0x150>)
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	4619      	mov	r1, r3
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f7fe ffbc 	bl	80050c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fa19 	bl	8006582 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006150:	e042      	b.n	80061d8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006152:	4b24      	ldr	r3, [pc, #144]	@ (80061e4 <USBD_SetConfig+0x150>)
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	461a      	mov	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	429a      	cmp	r2, r3
 800615e:	d02a      	beq.n	80061b6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	b2db      	uxtb	r3, r3
 8006166:	4619      	mov	r1, r3
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7fe ffaa 	bl	80050c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800616e:	4b1d      	ldr	r3, [pc, #116]	@ (80061e4 <USBD_SetConfig+0x150>)
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006178:	4b1a      	ldr	r3, [pc, #104]	@ (80061e4 <USBD_SetConfig+0x150>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	4619      	mov	r1, r3
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7fe ff83 	bl	800508a <USBD_SetClassConfig>
 8006184:	4603      	mov	r3, r0
 8006186:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006188:	7bfb      	ldrb	r3, [r7, #15]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00f      	beq.n	80061ae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800618e:	6839      	ldr	r1, [r7, #0]
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f918 	bl	80063c6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	b2db      	uxtb	r3, r3
 800619c:	4619      	mov	r1, r3
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7fe ff8f 	bl	80050c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2202      	movs	r2, #2
 80061a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80061ac:	e014      	b.n	80061d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f9e7 	bl	8006582 <USBD_CtlSendStatus>
      break;
 80061b4:	e010      	b.n	80061d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f9e3 	bl	8006582 <USBD_CtlSendStatus>
      break;
 80061bc:	e00c      	b.n	80061d8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80061be:	6839      	ldr	r1, [r7, #0]
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f900 	bl	80063c6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80061c6:	4b07      	ldr	r3, [pc, #28]	@ (80061e4 <USBD_SetConfig+0x150>)
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	4619      	mov	r1, r3
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f7fe ff78 	bl	80050c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80061d2:	2303      	movs	r3, #3
 80061d4:	73fb      	strb	r3, [r7, #15]
      break;
 80061d6:	bf00      	nop
  }

  return ret;
 80061d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	200001b8 	.word	0x200001b8

080061e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	88db      	ldrh	r3, [r3, #6]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d004      	beq.n	8006204 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80061fa:	6839      	ldr	r1, [r7, #0]
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f000 f8e2 	bl	80063c6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006202:	e023      	b.n	800624c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800620a:	b2db      	uxtb	r3, r3
 800620c:	2b02      	cmp	r3, #2
 800620e:	dc02      	bgt.n	8006216 <USBD_GetConfig+0x2e>
 8006210:	2b00      	cmp	r3, #0
 8006212:	dc03      	bgt.n	800621c <USBD_GetConfig+0x34>
 8006214:	e015      	b.n	8006242 <USBD_GetConfig+0x5a>
 8006216:	2b03      	cmp	r3, #3
 8006218:	d00b      	beq.n	8006232 <USBD_GetConfig+0x4a>
 800621a:	e012      	b.n	8006242 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	3308      	adds	r3, #8
 8006226:	2201      	movs	r2, #1
 8006228:	4619      	mov	r1, r3
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f948 	bl	80064c0 <USBD_CtlSendData>
        break;
 8006230:	e00c      	b.n	800624c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	3304      	adds	r3, #4
 8006236:	2201      	movs	r2, #1
 8006238:	4619      	mov	r1, r3
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f940 	bl	80064c0 <USBD_CtlSendData>
        break;
 8006240:	e004      	b.n	800624c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006242:	6839      	ldr	r1, [r7, #0]
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 f8be 	bl	80063c6 <USBD_CtlError>
        break;
 800624a:	bf00      	nop
}
 800624c:	bf00      	nop
 800624e:	3708      	adds	r7, #8
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006264:	b2db      	uxtb	r3, r3
 8006266:	3b01      	subs	r3, #1
 8006268:	2b02      	cmp	r3, #2
 800626a:	d81e      	bhi.n	80062aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	88db      	ldrh	r3, [r3, #6]
 8006270:	2b02      	cmp	r3, #2
 8006272:	d004      	beq.n	800627e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006274:	6839      	ldr	r1, [r7, #0]
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f8a5 	bl	80063c6 <USBD_CtlError>
        break;
 800627c:	e01a      	b.n	80062b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800628a:	2b00      	cmp	r3, #0
 800628c:	d005      	beq.n	800629a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f043 0202 	orr.w	r2, r3, #2
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	330c      	adds	r3, #12
 800629e:	2202      	movs	r2, #2
 80062a0:	4619      	mov	r1, r3
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f90c 	bl	80064c0 <USBD_CtlSendData>
      break;
 80062a8:	e004      	b.n	80062b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80062aa:	6839      	ldr	r1, [r7, #0]
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f88a 	bl	80063c6 <USBD_CtlError>
      break;
 80062b2:	bf00      	nop
  }
}
 80062b4:	bf00      	nop
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	885b      	ldrh	r3, [r3, #2]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d107      	bne.n	80062de <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f953 	bl	8006582 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80062dc:	e013      	b.n	8006306 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	885b      	ldrh	r3, [r3, #2]
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d10b      	bne.n	80062fe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	889b      	ldrh	r3, [r3, #4]
 80062ea:	0a1b      	lsrs	r3, r3, #8
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f943 	bl	8006582 <USBD_CtlSendStatus>
}
 80062fc:	e003      	b.n	8006306 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80062fe:	6839      	ldr	r1, [r7, #0]
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f860 	bl	80063c6 <USBD_CtlError>
}
 8006306:	bf00      	nop
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b082      	sub	sp, #8
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
 8006316:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800631e:	b2db      	uxtb	r3, r3
 8006320:	3b01      	subs	r3, #1
 8006322:	2b02      	cmp	r3, #2
 8006324:	d80b      	bhi.n	800633e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	885b      	ldrh	r3, [r3, #2]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d10c      	bne.n	8006348 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f923 	bl	8006582 <USBD_CtlSendStatus>
      }
      break;
 800633c:	e004      	b.n	8006348 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800633e:	6839      	ldr	r1, [r7, #0]
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f840 	bl	80063c6 <USBD_CtlError>
      break;
 8006346:	e000      	b.n	800634a <USBD_ClrFeature+0x3c>
      break;
 8006348:	bf00      	nop
  }
}
 800634a:	bf00      	nop
 800634c:	3708      	adds	r7, #8
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b084      	sub	sp, #16
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
 800635a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	781a      	ldrb	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	3301      	adds	r3, #1
 800636c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	781a      	ldrb	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	3301      	adds	r3, #1
 800637a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f7ff fa3d 	bl	80057fc <SWAPBYTE>
 8006382:	4603      	mov	r3, r0
 8006384:	461a      	mov	r2, r3
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	3301      	adds	r3, #1
 800638e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	3301      	adds	r3, #1
 8006394:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006396:	68f8      	ldr	r0, [r7, #12]
 8006398:	f7ff fa30 	bl	80057fc <SWAPBYTE>
 800639c:	4603      	mov	r3, r0
 800639e:	461a      	mov	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	3301      	adds	r3, #1
 80063a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	3301      	adds	r3, #1
 80063ae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f7ff fa23 	bl	80057fc <SWAPBYTE>
 80063b6:	4603      	mov	r3, r0
 80063b8:	461a      	mov	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	80da      	strh	r2, [r3, #6]
}
 80063be:	bf00      	nop
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b082      	sub	sp, #8
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80063d0:	2180      	movs	r1, #128	@ 0x80
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fcf4 	bl	8006dc0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80063d8:	2100      	movs	r1, #0
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fcf0 	bl	8006dc0 <USBD_LL_StallEP>
}
 80063e0:	bf00      	nop
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80063f4:	2300      	movs	r3, #0
 80063f6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d042      	beq.n	8006484 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006402:	6938      	ldr	r0, [r7, #16]
 8006404:	f000 f842 	bl	800648c <USBD_GetLen>
 8006408:	4603      	mov	r3, r0
 800640a:	3301      	adds	r3, #1
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006412:	d808      	bhi.n	8006426 <USBD_GetString+0x3e>
 8006414:	6938      	ldr	r0, [r7, #16]
 8006416:	f000 f839 	bl	800648c <USBD_GetLen>
 800641a:	4603      	mov	r3, r0
 800641c:	3301      	adds	r3, #1
 800641e:	b29b      	uxth	r3, r3
 8006420:	005b      	lsls	r3, r3, #1
 8006422:	b29a      	uxth	r2, r3
 8006424:	e001      	b.n	800642a <USBD_GetString+0x42>
 8006426:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800642e:	7dfb      	ldrb	r3, [r7, #23]
 8006430:	68ba      	ldr	r2, [r7, #8]
 8006432:	4413      	add	r3, r2
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	7812      	ldrb	r2, [r2, #0]
 8006438:	701a      	strb	r2, [r3, #0]
  idx++;
 800643a:	7dfb      	ldrb	r3, [r7, #23]
 800643c:	3301      	adds	r3, #1
 800643e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006440:	7dfb      	ldrb	r3, [r7, #23]
 8006442:	68ba      	ldr	r2, [r7, #8]
 8006444:	4413      	add	r3, r2
 8006446:	2203      	movs	r2, #3
 8006448:	701a      	strb	r2, [r3, #0]
  idx++;
 800644a:	7dfb      	ldrb	r3, [r7, #23]
 800644c:	3301      	adds	r3, #1
 800644e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006450:	e013      	b.n	800647a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006452:	7dfb      	ldrb	r3, [r7, #23]
 8006454:	68ba      	ldr	r2, [r7, #8]
 8006456:	4413      	add	r3, r2
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	7812      	ldrb	r2, [r2, #0]
 800645c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	3301      	adds	r3, #1
 8006462:	613b      	str	r3, [r7, #16]
    idx++;
 8006464:	7dfb      	ldrb	r3, [r7, #23]
 8006466:	3301      	adds	r3, #1
 8006468:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800646a:	7dfb      	ldrb	r3, [r7, #23]
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	4413      	add	r3, r2
 8006470:	2200      	movs	r2, #0
 8006472:	701a      	strb	r2, [r3, #0]
    idx++;
 8006474:	7dfb      	ldrb	r3, [r7, #23]
 8006476:	3301      	adds	r3, #1
 8006478:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1e7      	bne.n	8006452 <USBD_GetString+0x6a>
 8006482:	e000      	b.n	8006486 <USBD_GetString+0x9e>
    return;
 8006484:	bf00      	nop
  }
}
 8006486:	3718      	adds	r7, #24
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006494:	2300      	movs	r3, #0
 8006496:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800649c:	e005      	b.n	80064aa <USBD_GetLen+0x1e>
  {
    len++;
 800649e:	7bfb      	ldrb	r3, [r7, #15]
 80064a0:	3301      	adds	r3, #1
 80064a2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	3301      	adds	r3, #1
 80064a8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1f5      	bne.n	800649e <USBD_GetLen+0x12>
  }

  return len;
 80064b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3714      	adds	r7, #20
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2202      	movs	r2, #2
 80064d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	2100      	movs	r1, #0
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 fcf0 	bl	8006ed2 <USBD_LL_Transmit>

  return USBD_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3710      	adds	r7, #16
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	2100      	movs	r1, #0
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f000 fcdf 	bl	8006ed2 <USBD_LL_Transmit>

  return USBD_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	60f8      	str	r0, [r7, #12]
 8006526:	60b9      	str	r1, [r7, #8]
 8006528:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2203      	movs	r2, #3
 800652e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	2100      	movs	r1, #0
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f000 fcdf 	bl	8006f14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	2100      	movs	r1, #0
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f000 fcce 	bl	8006f14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b082      	sub	sp, #8
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2204      	movs	r2, #4
 800658e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006592:	2300      	movs	r3, #0
 8006594:	2200      	movs	r2, #0
 8006596:	2100      	movs	r1, #0
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 fc9a 	bl	8006ed2 <USBD_LL_Transmit>

  return USBD_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2205      	movs	r2, #5
 80065b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065b8:	2300      	movs	r3, #0
 80065ba:	2200      	movs	r2, #0
 80065bc:	2100      	movs	r1, #0
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 fca8 	bl	8006f14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
	...

080065d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80065d4:	2200      	movs	r2, #0
 80065d6:	4912      	ldr	r1, [pc, #72]	@ (8006620 <MX_USB_DEVICE_Init+0x50>)
 80065d8:	4812      	ldr	r0, [pc, #72]	@ (8006624 <MX_USB_DEVICE_Init+0x54>)
 80065da:	f7fe fcd9 	bl	8004f90 <USBD_Init>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80065e4:	f7f9 fffc 	bl	80005e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80065e8:	490f      	ldr	r1, [pc, #60]	@ (8006628 <MX_USB_DEVICE_Init+0x58>)
 80065ea:	480e      	ldr	r0, [pc, #56]	@ (8006624 <MX_USB_DEVICE_Init+0x54>)
 80065ec:	f7fe fd00 	bl	8004ff0 <USBD_RegisterClass>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d001      	beq.n	80065fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80065f6:	f7f9 fff3 	bl	80005e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80065fa:	490c      	ldr	r1, [pc, #48]	@ (800662c <MX_USB_DEVICE_Init+0x5c>)
 80065fc:	4809      	ldr	r0, [pc, #36]	@ (8006624 <MX_USB_DEVICE_Init+0x54>)
 80065fe:	f7fe fbf7 	bl	8004df0 <USBD_CDC_RegisterInterface>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006608:	f7f9 ffea 	bl	80005e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800660c:	4805      	ldr	r0, [pc, #20]	@ (8006624 <MX_USB_DEVICE_Init+0x54>)
 800660e:	f7fe fd25 	bl	800505c <USBD_Start>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d001      	beq.n	800661c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006618:	f7f9 ffe2 	bl	80005e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800661c:	bf00      	nop
 800661e:	bd80      	pop	{r7, pc}
 8006620:	200000ac 	.word	0x200000ac
 8006624:	200001bc 	.word	0x200001bc
 8006628:	20000018 	.word	0x20000018
 800662c:	20000098 	.word	0x20000098

08006630 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006634:	2200      	movs	r2, #0
 8006636:	4905      	ldr	r1, [pc, #20]	@ (800664c <CDC_Init_FS+0x1c>)
 8006638:	4805      	ldr	r0, [pc, #20]	@ (8006650 <CDC_Init_FS+0x20>)
 800663a:	f7fe fbf3 	bl	8004e24 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800663e:	4905      	ldr	r1, [pc, #20]	@ (8006654 <CDC_Init_FS+0x24>)
 8006640:	4803      	ldr	r0, [pc, #12]	@ (8006650 <CDC_Init_FS+0x20>)
 8006642:	f7fe fc11 	bl	8004e68 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006646:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006648:	4618      	mov	r0, r3
 800664a:	bd80      	pop	{r7, pc}
 800664c:	20000c98 	.word	0x20000c98
 8006650:	200001bc 	.word	0x200001bc
 8006654:	20000498 	.word	0x20000498

08006658 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006658:	b480      	push	{r7}
 800665a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800665c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800665e:	4618      	mov	r0, r3
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	4603      	mov	r3, r0
 8006670:	6039      	str	r1, [r7, #0]
 8006672:	71fb      	strb	r3, [r7, #7]
 8006674:	4613      	mov	r3, r2
 8006676:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006678:	79fb      	ldrb	r3, [r7, #7]
 800667a:	2b23      	cmp	r3, #35	@ 0x23
 800667c:	d84a      	bhi.n	8006714 <CDC_Control_FS+0xac>
 800667e:	a201      	add	r2, pc, #4	@ (adr r2, 8006684 <CDC_Control_FS+0x1c>)
 8006680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006684:	08006715 	.word	0x08006715
 8006688:	08006715 	.word	0x08006715
 800668c:	08006715 	.word	0x08006715
 8006690:	08006715 	.word	0x08006715
 8006694:	08006715 	.word	0x08006715
 8006698:	08006715 	.word	0x08006715
 800669c:	08006715 	.word	0x08006715
 80066a0:	08006715 	.word	0x08006715
 80066a4:	08006715 	.word	0x08006715
 80066a8:	08006715 	.word	0x08006715
 80066ac:	08006715 	.word	0x08006715
 80066b0:	08006715 	.word	0x08006715
 80066b4:	08006715 	.word	0x08006715
 80066b8:	08006715 	.word	0x08006715
 80066bc:	08006715 	.word	0x08006715
 80066c0:	08006715 	.word	0x08006715
 80066c4:	08006715 	.word	0x08006715
 80066c8:	08006715 	.word	0x08006715
 80066cc:	08006715 	.word	0x08006715
 80066d0:	08006715 	.word	0x08006715
 80066d4:	08006715 	.word	0x08006715
 80066d8:	08006715 	.word	0x08006715
 80066dc:	08006715 	.word	0x08006715
 80066e0:	08006715 	.word	0x08006715
 80066e4:	08006715 	.word	0x08006715
 80066e8:	08006715 	.word	0x08006715
 80066ec:	08006715 	.word	0x08006715
 80066f0:	08006715 	.word	0x08006715
 80066f4:	08006715 	.word	0x08006715
 80066f8:	08006715 	.word	0x08006715
 80066fc:	08006715 	.word	0x08006715
 8006700:	08006715 	.word	0x08006715
 8006704:	08006715 	.word	0x08006715
 8006708:	08006715 	.word	0x08006715
 800670c:	08006715 	.word	0x08006715
 8006710:	08006715 	.word	0x08006715
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006714:	bf00      	nop
  }

  return (USBD_OK);
 8006716:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006718:	4618      	mov	r0, r3
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800672e:	6879      	ldr	r1, [r7, #4]
 8006730:	4805      	ldr	r0, [pc, #20]	@ (8006748 <CDC_Receive_FS+0x24>)
 8006732:	f7fe fb99 	bl	8004e68 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006736:	4804      	ldr	r0, [pc, #16]	@ (8006748 <CDC_Receive_FS+0x24>)
 8006738:	f7fe fbf4 	bl	8004f24 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800673c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800673e:	4618      	mov	r0, r3
 8006740:	3708      	adds	r7, #8
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	200001bc 	.word	0x200001bc

0800674c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	460b      	mov	r3, r1
 8006756:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006758:	2300      	movs	r3, #0
 800675a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800675c:	4b0d      	ldr	r3, [pc, #52]	@ (8006794 <CDC_Transmit_FS+0x48>)
 800675e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006762:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800676a:	2b00      	cmp	r3, #0
 800676c:	d001      	beq.n	8006772 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800676e:	2301      	movs	r3, #1
 8006770:	e00b      	b.n	800678a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006772:	887b      	ldrh	r3, [r7, #2]
 8006774:	461a      	mov	r2, r3
 8006776:	6879      	ldr	r1, [r7, #4]
 8006778:	4806      	ldr	r0, [pc, #24]	@ (8006794 <CDC_Transmit_FS+0x48>)
 800677a:	f7fe fb53 	bl	8004e24 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800677e:	4805      	ldr	r0, [pc, #20]	@ (8006794 <CDC_Transmit_FS+0x48>)
 8006780:	f7fe fb90 	bl	8004ea4 <USBD_CDC_TransmitPacket>
 8006784:	4603      	mov	r3, r0
 8006786:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006788:	7bfb      	ldrb	r3, [r7, #15]
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	200001bc 	.word	0x200001bc

08006798 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006798:	b480      	push	{r7}
 800679a:	b087      	sub	sp, #28
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	4613      	mov	r3, r2
 80067a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80067a6:	2300      	movs	r3, #0
 80067a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80067aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	371c      	adds	r7, #28
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
	...

080067bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	4603      	mov	r3, r0
 80067c4:	6039      	str	r1, [r7, #0]
 80067c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	2212      	movs	r2, #18
 80067cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80067ce:	4b03      	ldr	r3, [pc, #12]	@ (80067dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr
 80067dc:	200000c8 	.word	0x200000c8

080067e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	4603      	mov	r3, r0
 80067e8:	6039      	str	r1, [r7, #0]
 80067ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	2204      	movs	r2, #4
 80067f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80067f2:	4b03      	ldr	r3, [pc, #12]	@ (8006800 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	200000dc 	.word	0x200000dc

08006804 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	4603      	mov	r3, r0
 800680c:	6039      	str	r1, [r7, #0]
 800680e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006810:	79fb      	ldrb	r3, [r7, #7]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d105      	bne.n	8006822 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	4907      	ldr	r1, [pc, #28]	@ (8006838 <USBD_FS_ProductStrDescriptor+0x34>)
 800681a:	4808      	ldr	r0, [pc, #32]	@ (800683c <USBD_FS_ProductStrDescriptor+0x38>)
 800681c:	f7ff fde4 	bl	80063e8 <USBD_GetString>
 8006820:	e004      	b.n	800682c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	4904      	ldr	r1, [pc, #16]	@ (8006838 <USBD_FS_ProductStrDescriptor+0x34>)
 8006826:	4805      	ldr	r0, [pc, #20]	@ (800683c <USBD_FS_ProductStrDescriptor+0x38>)
 8006828:	f7ff fdde 	bl	80063e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800682c:	4b02      	ldr	r3, [pc, #8]	@ (8006838 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800682e:	4618      	mov	r0, r3
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	20001498 	.word	0x20001498
 800683c:	08007c70 	.word	0x08007c70

08006840 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	4603      	mov	r3, r0
 8006848:	6039      	str	r1, [r7, #0]
 800684a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800684c:	683a      	ldr	r2, [r7, #0]
 800684e:	4904      	ldr	r1, [pc, #16]	@ (8006860 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006850:	4804      	ldr	r0, [pc, #16]	@ (8006864 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006852:	f7ff fdc9 	bl	80063e8 <USBD_GetString>
  return USBD_StrDesc;
 8006856:	4b02      	ldr	r3, [pc, #8]	@ (8006860 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006858:	4618      	mov	r0, r3
 800685a:	3708      	adds	r7, #8
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	20001498 	.word	0x20001498
 8006864:	08007c88 	.word	0x08007c88

08006868 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	4603      	mov	r3, r0
 8006870:	6039      	str	r1, [r7, #0]
 8006872:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	221a      	movs	r2, #26
 8006878:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800687a:	f000 f843 	bl	8006904 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800687e:	4b02      	ldr	r3, [pc, #8]	@ (8006888 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006880:	4618      	mov	r0, r3
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	200000e0 	.word	0x200000e0

0800688c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	4603      	mov	r3, r0
 8006894:	6039      	str	r1, [r7, #0]
 8006896:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006898:	79fb      	ldrb	r3, [r7, #7]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d105      	bne.n	80068aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	4907      	ldr	r1, [pc, #28]	@ (80068c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80068a2:	4808      	ldr	r0, [pc, #32]	@ (80068c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80068a4:	f7ff fda0 	bl	80063e8 <USBD_GetString>
 80068a8:	e004      	b.n	80068b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80068aa:	683a      	ldr	r2, [r7, #0]
 80068ac:	4904      	ldr	r1, [pc, #16]	@ (80068c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80068ae:	4805      	ldr	r0, [pc, #20]	@ (80068c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80068b0:	f7ff fd9a 	bl	80063e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80068b4:	4b02      	ldr	r3, [pc, #8]	@ (80068c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3708      	adds	r7, #8
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	20001498 	.word	0x20001498
 80068c4:	08007c9c 	.word	0x08007c9c

080068c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	4603      	mov	r3, r0
 80068d0:	6039      	str	r1, [r7, #0]
 80068d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80068d4:	79fb      	ldrb	r3, [r7, #7]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d105      	bne.n	80068e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	4907      	ldr	r1, [pc, #28]	@ (80068fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80068de:	4808      	ldr	r0, [pc, #32]	@ (8006900 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80068e0:	f7ff fd82 	bl	80063e8 <USBD_GetString>
 80068e4:	e004      	b.n	80068f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	4904      	ldr	r1, [pc, #16]	@ (80068fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80068ea:	4805      	ldr	r0, [pc, #20]	@ (8006900 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80068ec:	f7ff fd7c 	bl	80063e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80068f0:	4b02      	ldr	r3, [pc, #8]	@ (80068fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3708      	adds	r7, #8
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	20001498 	.word	0x20001498
 8006900:	08007ca8 	.word	0x08007ca8

08006904 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800690a:	4b0f      	ldr	r3, [pc, #60]	@ (8006948 <Get_SerialNum+0x44>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006910:	4b0e      	ldr	r3, [pc, #56]	@ (800694c <Get_SerialNum+0x48>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006916:	4b0e      	ldr	r3, [pc, #56]	@ (8006950 <Get_SerialNum+0x4c>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4413      	add	r3, r2
 8006922:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d009      	beq.n	800693e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800692a:	2208      	movs	r2, #8
 800692c:	4909      	ldr	r1, [pc, #36]	@ (8006954 <Get_SerialNum+0x50>)
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f000 f814 	bl	800695c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006934:	2204      	movs	r2, #4
 8006936:	4908      	ldr	r1, [pc, #32]	@ (8006958 <Get_SerialNum+0x54>)
 8006938:	68b8      	ldr	r0, [r7, #8]
 800693a:	f000 f80f 	bl	800695c <IntToUnicode>
  }
}
 800693e:	bf00      	nop
 8006940:	3710      	adds	r7, #16
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	1fff7a10 	.word	0x1fff7a10
 800694c:	1fff7a14 	.word	0x1fff7a14
 8006950:	1fff7a18 	.word	0x1fff7a18
 8006954:	200000e2 	.word	0x200000e2
 8006958:	200000f2 	.word	0x200000f2

0800695c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800695c:	b480      	push	{r7}
 800695e:	b087      	sub	sp, #28
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	4613      	mov	r3, r2
 8006968:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800696a:	2300      	movs	r3, #0
 800696c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800696e:	2300      	movs	r3, #0
 8006970:	75fb      	strb	r3, [r7, #23]
 8006972:	e027      	b.n	80069c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	0f1b      	lsrs	r3, r3, #28
 8006978:	2b09      	cmp	r3, #9
 800697a:	d80b      	bhi.n	8006994 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	0f1b      	lsrs	r3, r3, #28
 8006980:	b2da      	uxtb	r2, r3
 8006982:	7dfb      	ldrb	r3, [r7, #23]
 8006984:	005b      	lsls	r3, r3, #1
 8006986:	4619      	mov	r1, r3
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	440b      	add	r3, r1
 800698c:	3230      	adds	r2, #48	@ 0x30
 800698e:	b2d2      	uxtb	r2, r2
 8006990:	701a      	strb	r2, [r3, #0]
 8006992:	e00a      	b.n	80069aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	0f1b      	lsrs	r3, r3, #28
 8006998:	b2da      	uxtb	r2, r3
 800699a:	7dfb      	ldrb	r3, [r7, #23]
 800699c:	005b      	lsls	r3, r3, #1
 800699e:	4619      	mov	r1, r3
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	440b      	add	r3, r1
 80069a4:	3237      	adds	r2, #55	@ 0x37
 80069a6:	b2d2      	uxtb	r2, r2
 80069a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	011b      	lsls	r3, r3, #4
 80069ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80069b0:	7dfb      	ldrb	r3, [r7, #23]
 80069b2:	005b      	lsls	r3, r3, #1
 80069b4:	3301      	adds	r3, #1
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	4413      	add	r3, r2
 80069ba:	2200      	movs	r2, #0
 80069bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80069be:	7dfb      	ldrb	r3, [r7, #23]
 80069c0:	3301      	adds	r3, #1
 80069c2:	75fb      	strb	r3, [r7, #23]
 80069c4:	7dfa      	ldrb	r2, [r7, #23]
 80069c6:	79fb      	ldrb	r3, [r7, #7]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d3d3      	bcc.n	8006974 <IntToUnicode+0x18>
  }
}
 80069cc:	bf00      	nop
 80069ce:	bf00      	nop
 80069d0:	371c      	adds	r7, #28
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
	...

080069dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b08a      	sub	sp, #40	@ 0x28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069e4:	f107 0314 	add.w	r3, r7, #20
 80069e8:	2200      	movs	r2, #0
 80069ea:	601a      	str	r2, [r3, #0]
 80069ec:	605a      	str	r2, [r3, #4]
 80069ee:	609a      	str	r2, [r3, #8]
 80069f0:	60da      	str	r2, [r3, #12]
 80069f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80069fc:	d13a      	bne.n	8006a74 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069fe:	2300      	movs	r3, #0
 8006a00:	613b      	str	r3, [r7, #16]
 8006a02:	4b1e      	ldr	r3, [pc, #120]	@ (8006a7c <HAL_PCD_MspInit+0xa0>)
 8006a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a06:	4a1d      	ldr	r2, [pc, #116]	@ (8006a7c <HAL_PCD_MspInit+0xa0>)
 8006a08:	f043 0301 	orr.w	r3, r3, #1
 8006a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8006a7c <HAL_PCD_MspInit+0xa0>)
 8006a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	613b      	str	r3, [r7, #16]
 8006a18:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006a1a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a20:	2302      	movs	r3, #2
 8006a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a24:	2300      	movs	r3, #0
 8006a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006a2c:	230a      	movs	r3, #10
 8006a2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a30:	f107 0314 	add.w	r3, r7, #20
 8006a34:	4619      	mov	r1, r3
 8006a36:	4812      	ldr	r0, [pc, #72]	@ (8006a80 <HAL_PCD_MspInit+0xa4>)
 8006a38:	f7fa f876 	bl	8000b28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8006a7c <HAL_PCD_MspInit+0xa0>)
 8006a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a40:	4a0e      	ldr	r2, [pc, #56]	@ (8006a7c <HAL_PCD_MspInit+0xa0>)
 8006a42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a46:	6353      	str	r3, [r2, #52]	@ 0x34
 8006a48:	2300      	movs	r3, #0
 8006a4a:	60fb      	str	r3, [r7, #12]
 8006a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a7c <HAL_PCD_MspInit+0xa0>)
 8006a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a50:	4a0a      	ldr	r2, [pc, #40]	@ (8006a7c <HAL_PCD_MspInit+0xa0>)
 8006a52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a56:	6453      	str	r3, [r2, #68]	@ 0x44
 8006a58:	4b08      	ldr	r3, [pc, #32]	@ (8006a7c <HAL_PCD_MspInit+0xa0>)
 8006a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a60:	60fb      	str	r3, [r7, #12]
 8006a62:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006a64:	2200      	movs	r2, #0
 8006a66:	2100      	movs	r1, #0
 8006a68:	2043      	movs	r0, #67	@ 0x43
 8006a6a:	f7fa f826 	bl	8000aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006a6e:	2043      	movs	r0, #67	@ 0x43
 8006a70:	f7fa f83f 	bl	8000af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006a74:	bf00      	nop
 8006a76:	3728      	adds	r7, #40	@ 0x28
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	40023800 	.word	0x40023800
 8006a80:	40020000 	.word	0x40020000

08006a84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006a98:	4619      	mov	r1, r3
 8006a9a:	4610      	mov	r0, r2
 8006a9c:	f7fe fb2b 	bl	80050f6 <USBD_LL_SetupStage>
}
 8006aa0:	bf00      	nop
 8006aa2:	3708      	adds	r7, #8
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006aba:	78fa      	ldrb	r2, [r7, #3]
 8006abc:	6879      	ldr	r1, [r7, #4]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	00db      	lsls	r3, r3, #3
 8006ac2:	4413      	add	r3, r2
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	440b      	add	r3, r1
 8006ac8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	78fb      	ldrb	r3, [r7, #3]
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	f7fe fb65 	bl	80051a0 <USBD_LL_DataOutStage>
}
 8006ad6:	bf00      	nop
 8006ad8:	3708      	adds	r7, #8
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b082      	sub	sp, #8
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8006af0:	78fa      	ldrb	r2, [r7, #3]
 8006af2:	6879      	ldr	r1, [r7, #4]
 8006af4:	4613      	mov	r3, r2
 8006af6:	00db      	lsls	r3, r3, #3
 8006af8:	4413      	add	r3, r2
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	440b      	add	r3, r1
 8006afe:	3320      	adds	r3, #32
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	78fb      	ldrb	r3, [r7, #3]
 8006b04:	4619      	mov	r1, r3
 8006b06:	f7fe fc07 	bl	8005318 <USBD_LL_DataInStage>
}
 8006b0a:	bf00      	nop
 8006b0c:	3708      	adds	r7, #8
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b082      	sub	sp, #8
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7fe fd4b 	bl	80055bc <USBD_LL_SOF>
}
 8006b26:	bf00      	nop
 8006b28:	3708      	adds	r7, #8
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b084      	sub	sp, #16
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006b36:	2301      	movs	r3, #1
 8006b38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	79db      	ldrb	r3, [r3, #7]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d102      	bne.n	8006b48 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006b42:	2300      	movs	r3, #0
 8006b44:	73fb      	strb	r3, [r7, #15]
 8006b46:	e008      	b.n	8006b5a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	79db      	ldrb	r3, [r3, #7]
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d102      	bne.n	8006b56 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006b50:	2301      	movs	r3, #1
 8006b52:	73fb      	strb	r3, [r7, #15]
 8006b54:	e001      	b.n	8006b5a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006b56:	f7f9 fd43 	bl	80005e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006b60:	7bfa      	ldrb	r2, [r7, #15]
 8006b62:	4611      	mov	r1, r2
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7fe fce5 	bl	8005534 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7fe fc8c 	bl	800548e <USBD_LL_Reset>
}
 8006b76:	bf00      	nop
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
	...

08006b80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7fe fce0 	bl	8005554 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	6812      	ldr	r2, [r2, #0]
 8006ba2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006ba6:	f043 0301 	orr.w	r3, r3, #1
 8006baa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	7adb      	ldrb	r3, [r3, #11]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d005      	beq.n	8006bc0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006bb4:	4b04      	ldr	r3, [pc, #16]	@ (8006bc8 <HAL_PCD_SuspendCallback+0x48>)
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	4a03      	ldr	r2, [pc, #12]	@ (8006bc8 <HAL_PCD_SuspendCallback+0x48>)
 8006bba:	f043 0306 	orr.w	r3, r3, #6
 8006bbe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006bc0:	bf00      	nop
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	e000ed00 	.word	0xe000ed00

08006bcc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fe fcd6 	bl	800558c <USBD_LL_Resume>
}
 8006be0:	bf00      	nop
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006bfa:	78fa      	ldrb	r2, [r7, #3]
 8006bfc:	4611      	mov	r1, r2
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fe fd2e 	bl	8005660 <USBD_LL_IsoOUTIncomplete>
}
 8006c04:	bf00      	nop
 8006c06:	3708      	adds	r7, #8
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	460b      	mov	r3, r1
 8006c16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006c1e:	78fa      	ldrb	r2, [r7, #3]
 8006c20:	4611      	mov	r1, r2
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7fe fcea 	bl	80055fc <USBD_LL_IsoINIncomplete>
}
 8006c28:	bf00      	nop
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fe fd40 	bl	80056c4 <USBD_LL_DevConnected>
}
 8006c44:	bf00      	nop
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7fe fd3d 	bl	80056da <USBD_LL_DevDisconnected>
}
 8006c60:	bf00      	nop
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d13c      	bne.n	8006cf2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006c78:	4a20      	ldr	r2, [pc, #128]	@ (8006cfc <USBD_LL_Init+0x94>)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a1e      	ldr	r2, [pc, #120]	@ (8006cfc <USBD_LL_Init+0x94>)
 8006c84:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006c88:	4b1c      	ldr	r3, [pc, #112]	@ (8006cfc <USBD_LL_Init+0x94>)
 8006c8a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8006c8e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006c90:	4b1a      	ldr	r3, [pc, #104]	@ (8006cfc <USBD_LL_Init+0x94>)
 8006c92:	2204      	movs	r2, #4
 8006c94:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006c96:	4b19      	ldr	r3, [pc, #100]	@ (8006cfc <USBD_LL_Init+0x94>)
 8006c98:	2202      	movs	r2, #2
 8006c9a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006c9c:	4b17      	ldr	r3, [pc, #92]	@ (8006cfc <USBD_LL_Init+0x94>)
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006ca2:	4b16      	ldr	r3, [pc, #88]	@ (8006cfc <USBD_LL_Init+0x94>)
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006ca8:	4b14      	ldr	r3, [pc, #80]	@ (8006cfc <USBD_LL_Init+0x94>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006cae:	4b13      	ldr	r3, [pc, #76]	@ (8006cfc <USBD_LL_Init+0x94>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006cb4:	4b11      	ldr	r3, [pc, #68]	@ (8006cfc <USBD_LL_Init+0x94>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006cba:	4b10      	ldr	r3, [pc, #64]	@ (8006cfc <USBD_LL_Init+0x94>)
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8006cfc <USBD_LL_Init+0x94>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006cc6:	480d      	ldr	r0, [pc, #52]	@ (8006cfc <USBD_LL_Init+0x94>)
 8006cc8:	f7fa f8fb 	bl	8000ec2 <HAL_PCD_Init>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d001      	beq.n	8006cd6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006cd2:	f7f9 fc85 	bl	80005e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006cd6:	2180      	movs	r1, #128	@ 0x80
 8006cd8:	4808      	ldr	r0, [pc, #32]	@ (8006cfc <USBD_LL_Init+0x94>)
 8006cda:	f7fb fb28 	bl	800232e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006cde:	2240      	movs	r2, #64	@ 0x40
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	4806      	ldr	r0, [pc, #24]	@ (8006cfc <USBD_LL_Init+0x94>)
 8006ce4:	f7fb fadc 	bl	80022a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006ce8:	2280      	movs	r2, #128	@ 0x80
 8006cea:	2101      	movs	r1, #1
 8006cec:	4803      	ldr	r0, [pc, #12]	@ (8006cfc <USBD_LL_Init+0x94>)
 8006cee:	f7fb fad7 	bl	80022a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	20001698 	.word	0x20001698

08006d00 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fa f9e2 	bl	80010e0 <HAL_PCD_Start>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
 8006d22:	4618      	mov	r0, r3
 8006d24:	f000 f942 	bl	8006fac <USBD_Get_USB_Status>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b084      	sub	sp, #16
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
 8006d3e:	4608      	mov	r0, r1
 8006d40:	4611      	mov	r1, r2
 8006d42:	461a      	mov	r2, r3
 8006d44:	4603      	mov	r3, r0
 8006d46:	70fb      	strb	r3, [r7, #3]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	70bb      	strb	r3, [r7, #2]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d50:	2300      	movs	r3, #0
 8006d52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d54:	2300      	movs	r3, #0
 8006d56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006d5e:	78bb      	ldrb	r3, [r7, #2]
 8006d60:	883a      	ldrh	r2, [r7, #0]
 8006d62:	78f9      	ldrb	r1, [r7, #3]
 8006d64:	f7fa feb6 	bl	8001ad4 <HAL_PCD_EP_Open>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d6c:	7bfb      	ldrb	r3, [r7, #15]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f000 f91c 	bl	8006fac <USBD_Get_USB_Status>
 8006d74:	4603      	mov	r3, r0
 8006d76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d78:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b084      	sub	sp, #16
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006d9c:	78fa      	ldrb	r2, [r7, #3]
 8006d9e:	4611      	mov	r1, r2
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7fa ff01 	bl	8001ba8 <HAL_PCD_EP_Close>
 8006da6:	4603      	mov	r3, r0
 8006da8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006daa:	7bfb      	ldrb	r3, [r7, #15]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f000 f8fd 	bl	8006fac <USBD_Get_USB_Status>
 8006db2:	4603      	mov	r3, r0
 8006db4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006db6:	7bbb      	ldrb	r3, [r7, #14]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3710      	adds	r7, #16
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	460b      	mov	r3, r1
 8006dca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006dda:	78fa      	ldrb	r2, [r7, #3]
 8006ddc:	4611      	mov	r1, r2
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7fa ffb9 	bl	8001d56 <HAL_PCD_EP_SetStall>
 8006de4:	4603      	mov	r3, r0
 8006de6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006de8:	7bfb      	ldrb	r3, [r7, #15]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f000 f8de 	bl	8006fac <USBD_Get_USB_Status>
 8006df0:	4603      	mov	r3, r0
 8006df2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006df4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b084      	sub	sp, #16
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
 8006e06:	460b      	mov	r3, r1
 8006e08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006e18:	78fa      	ldrb	r2, [r7, #3]
 8006e1a:	4611      	mov	r1, r2
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7fa fffd 	bl	8001e1c <HAL_PCD_EP_ClrStall>
 8006e22:	4603      	mov	r3, r0
 8006e24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e26:	7bfb      	ldrb	r3, [r7, #15]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f000 f8bf 	bl	8006fac <USBD_Get_USB_Status>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e32:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	460b      	mov	r3, r1
 8006e46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006e4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006e50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	da0b      	bge.n	8006e70 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006e58:	78fb      	ldrb	r3, [r7, #3]
 8006e5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006e5e:	68f9      	ldr	r1, [r7, #12]
 8006e60:	4613      	mov	r3, r2
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	4413      	add	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	440b      	add	r3, r1
 8006e6a:	3316      	adds	r3, #22
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	e00b      	b.n	8006e88 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006e70:	78fb      	ldrb	r3, [r7, #3]
 8006e72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006e76:	68f9      	ldr	r1, [r7, #12]
 8006e78:	4613      	mov	r3, r2
 8006e7a:	00db      	lsls	r3, r3, #3
 8006e7c:	4413      	add	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	440b      	add	r3, r1
 8006e82:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8006e86:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006eae:	78fa      	ldrb	r2, [r7, #3]
 8006eb0:	4611      	mov	r1, r2
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fa fdea 	bl	8001a8c <HAL_PCD_SetAddress>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 f874 	bl	8006fac <USBD_Get_USB_Status>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ec8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b086      	sub	sp, #24
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	60f8      	str	r0, [r7, #12]
 8006eda:	607a      	str	r2, [r7, #4]
 8006edc:	603b      	str	r3, [r7, #0]
 8006ede:	460b      	mov	r3, r1
 8006ee0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006ef0:	7af9      	ldrb	r1, [r7, #11]
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	f7fa fef4 	bl	8001ce2 <HAL_PCD_EP_Transmit>
 8006efa:	4603      	mov	r3, r0
 8006efc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006efe:	7dfb      	ldrb	r3, [r7, #23]
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 f853 	bl	8006fac <USBD_Get_USB_Status>
 8006f06:	4603      	mov	r3, r0
 8006f08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006f0a:	7dbb      	ldrb	r3, [r7, #22]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3718      	adds	r7, #24
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b086      	sub	sp, #24
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	60f8      	str	r0, [r7, #12]
 8006f1c:	607a      	str	r2, [r7, #4]
 8006f1e:	603b      	str	r3, [r7, #0]
 8006f20:	460b      	mov	r3, r1
 8006f22:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f24:	2300      	movs	r3, #0
 8006f26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8006f32:	7af9      	ldrb	r1, [r7, #11]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	f7fa fe80 	bl	8001c3c <HAL_PCD_EP_Receive>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f40:	7dfb      	ldrb	r3, [r7, #23]
 8006f42:	4618      	mov	r0, r3
 8006f44:	f000 f832 	bl	8006fac <USBD_Get_USB_Status>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006f4c:	7dbb      	ldrb	r3, [r7, #22]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3718      	adds	r7, #24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b082      	sub	sp, #8
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	460b      	mov	r3, r1
 8006f60:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006f68:	78fa      	ldrb	r2, [r7, #3]
 8006f6a:	4611      	mov	r1, r2
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7fa fea0 	bl	8001cb2 <HAL_PCD_EP_GetRxCount>
 8006f72:	4603      	mov	r3, r0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3708      	adds	r7, #8
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006f84:	4b03      	ldr	r3, [pc, #12]	@ (8006f94 <USBD_static_malloc+0x18>)
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	20001b7c 	.word	0x20001b7c

08006f98 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]

}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006fba:	79fb      	ldrb	r3, [r7, #7]
 8006fbc:	2b03      	cmp	r3, #3
 8006fbe:	d817      	bhi.n	8006ff0 <USBD_Get_USB_Status+0x44>
 8006fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8006fc8 <USBD_Get_USB_Status+0x1c>)
 8006fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc6:	bf00      	nop
 8006fc8:	08006fd9 	.word	0x08006fd9
 8006fcc:	08006fdf 	.word	0x08006fdf
 8006fd0:	08006fe5 	.word	0x08006fe5
 8006fd4:	08006feb 	.word	0x08006feb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	73fb      	strb	r3, [r7, #15]
    break;
 8006fdc:	e00b      	b.n	8006ff6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	73fb      	strb	r3, [r7, #15]
    break;
 8006fe2:	e008      	b.n	8006ff6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	73fb      	strb	r3, [r7, #15]
    break;
 8006fe8:	e005      	b.n	8006ff6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006fea:	2303      	movs	r3, #3
 8006fec:	73fb      	strb	r3, [r7, #15]
    break;
 8006fee:	e002      	b.n	8006ff6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	73fb      	strb	r3, [r7, #15]
    break;
 8006ff4:	bf00      	nop
  }
  return usb_status;
 8006ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <siprintf>:
 8007004:	b40e      	push	{r1, r2, r3}
 8007006:	b510      	push	{r4, lr}
 8007008:	b09d      	sub	sp, #116	@ 0x74
 800700a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800700c:	9002      	str	r0, [sp, #8]
 800700e:	9006      	str	r0, [sp, #24]
 8007010:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007014:	480a      	ldr	r0, [pc, #40]	@ (8007040 <siprintf+0x3c>)
 8007016:	9107      	str	r1, [sp, #28]
 8007018:	9104      	str	r1, [sp, #16]
 800701a:	490a      	ldr	r1, [pc, #40]	@ (8007044 <siprintf+0x40>)
 800701c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007020:	9105      	str	r1, [sp, #20]
 8007022:	2400      	movs	r4, #0
 8007024:	a902      	add	r1, sp, #8
 8007026:	6800      	ldr	r0, [r0, #0]
 8007028:	9301      	str	r3, [sp, #4]
 800702a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800702c:	f000 f998 	bl	8007360 <_svfiprintf_r>
 8007030:	9b02      	ldr	r3, [sp, #8]
 8007032:	701c      	strb	r4, [r3, #0]
 8007034:	b01d      	add	sp, #116	@ 0x74
 8007036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800703a:	b003      	add	sp, #12
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	200000fc 	.word	0x200000fc
 8007044:	ffff0208 	.word	0xffff0208

08007048 <memset>:
 8007048:	4402      	add	r2, r0
 800704a:	4603      	mov	r3, r0
 800704c:	4293      	cmp	r3, r2
 800704e:	d100      	bne.n	8007052 <memset+0xa>
 8007050:	4770      	bx	lr
 8007052:	f803 1b01 	strb.w	r1, [r3], #1
 8007056:	e7f9      	b.n	800704c <memset+0x4>

08007058 <__errno>:
 8007058:	4b01      	ldr	r3, [pc, #4]	@ (8007060 <__errno+0x8>)
 800705a:	6818      	ldr	r0, [r3, #0]
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	200000fc 	.word	0x200000fc

08007064 <__libc_init_array>:
 8007064:	b570      	push	{r4, r5, r6, lr}
 8007066:	4b0d      	ldr	r3, [pc, #52]	@ (800709c <__libc_init_array+0x38>)
 8007068:	4d0d      	ldr	r5, [pc, #52]	@ (80070a0 <__libc_init_array+0x3c>)
 800706a:	1b5b      	subs	r3, r3, r5
 800706c:	109c      	asrs	r4, r3, #2
 800706e:	2600      	movs	r6, #0
 8007070:	42a6      	cmp	r6, r4
 8007072:	d109      	bne.n	8007088 <__libc_init_array+0x24>
 8007074:	f000 fdca 	bl	8007c0c <_init>
 8007078:	4d0a      	ldr	r5, [pc, #40]	@ (80070a4 <__libc_init_array+0x40>)
 800707a:	4b0b      	ldr	r3, [pc, #44]	@ (80070a8 <__libc_init_array+0x44>)
 800707c:	1b5b      	subs	r3, r3, r5
 800707e:	109c      	asrs	r4, r3, #2
 8007080:	2600      	movs	r6, #0
 8007082:	42a6      	cmp	r6, r4
 8007084:	d105      	bne.n	8007092 <__libc_init_array+0x2e>
 8007086:	bd70      	pop	{r4, r5, r6, pc}
 8007088:	f855 3b04 	ldr.w	r3, [r5], #4
 800708c:	4798      	blx	r3
 800708e:	3601      	adds	r6, #1
 8007090:	e7ee      	b.n	8007070 <__libc_init_array+0xc>
 8007092:	f855 3b04 	ldr.w	r3, [r5], #4
 8007096:	4798      	blx	r3
 8007098:	3601      	adds	r6, #1
 800709a:	e7f2      	b.n	8007082 <__libc_init_array+0x1e>
 800709c:	08007d04 	.word	0x08007d04
 80070a0:	08007d04 	.word	0x08007d04
 80070a4:	08007d04 	.word	0x08007d04
 80070a8:	08007d08 	.word	0x08007d08

080070ac <__retarget_lock_acquire_recursive>:
 80070ac:	4770      	bx	lr

080070ae <__retarget_lock_release_recursive>:
 80070ae:	4770      	bx	lr

080070b0 <_free_r>:
 80070b0:	b538      	push	{r3, r4, r5, lr}
 80070b2:	4605      	mov	r5, r0
 80070b4:	2900      	cmp	r1, #0
 80070b6:	d041      	beq.n	800713c <_free_r+0x8c>
 80070b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070bc:	1f0c      	subs	r4, r1, #4
 80070be:	2b00      	cmp	r3, #0
 80070c0:	bfb8      	it	lt
 80070c2:	18e4      	addlt	r4, r4, r3
 80070c4:	f000 f8e0 	bl	8007288 <__malloc_lock>
 80070c8:	4a1d      	ldr	r2, [pc, #116]	@ (8007140 <_free_r+0x90>)
 80070ca:	6813      	ldr	r3, [r2, #0]
 80070cc:	b933      	cbnz	r3, 80070dc <_free_r+0x2c>
 80070ce:	6063      	str	r3, [r4, #4]
 80070d0:	6014      	str	r4, [r2, #0]
 80070d2:	4628      	mov	r0, r5
 80070d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070d8:	f000 b8dc 	b.w	8007294 <__malloc_unlock>
 80070dc:	42a3      	cmp	r3, r4
 80070de:	d908      	bls.n	80070f2 <_free_r+0x42>
 80070e0:	6820      	ldr	r0, [r4, #0]
 80070e2:	1821      	adds	r1, r4, r0
 80070e4:	428b      	cmp	r3, r1
 80070e6:	bf01      	itttt	eq
 80070e8:	6819      	ldreq	r1, [r3, #0]
 80070ea:	685b      	ldreq	r3, [r3, #4]
 80070ec:	1809      	addeq	r1, r1, r0
 80070ee:	6021      	streq	r1, [r4, #0]
 80070f0:	e7ed      	b.n	80070ce <_free_r+0x1e>
 80070f2:	461a      	mov	r2, r3
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	b10b      	cbz	r3, 80070fc <_free_r+0x4c>
 80070f8:	42a3      	cmp	r3, r4
 80070fa:	d9fa      	bls.n	80070f2 <_free_r+0x42>
 80070fc:	6811      	ldr	r1, [r2, #0]
 80070fe:	1850      	adds	r0, r2, r1
 8007100:	42a0      	cmp	r0, r4
 8007102:	d10b      	bne.n	800711c <_free_r+0x6c>
 8007104:	6820      	ldr	r0, [r4, #0]
 8007106:	4401      	add	r1, r0
 8007108:	1850      	adds	r0, r2, r1
 800710a:	4283      	cmp	r3, r0
 800710c:	6011      	str	r1, [r2, #0]
 800710e:	d1e0      	bne.n	80070d2 <_free_r+0x22>
 8007110:	6818      	ldr	r0, [r3, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	6053      	str	r3, [r2, #4]
 8007116:	4408      	add	r0, r1
 8007118:	6010      	str	r0, [r2, #0]
 800711a:	e7da      	b.n	80070d2 <_free_r+0x22>
 800711c:	d902      	bls.n	8007124 <_free_r+0x74>
 800711e:	230c      	movs	r3, #12
 8007120:	602b      	str	r3, [r5, #0]
 8007122:	e7d6      	b.n	80070d2 <_free_r+0x22>
 8007124:	6820      	ldr	r0, [r4, #0]
 8007126:	1821      	adds	r1, r4, r0
 8007128:	428b      	cmp	r3, r1
 800712a:	bf04      	itt	eq
 800712c:	6819      	ldreq	r1, [r3, #0]
 800712e:	685b      	ldreq	r3, [r3, #4]
 8007130:	6063      	str	r3, [r4, #4]
 8007132:	bf04      	itt	eq
 8007134:	1809      	addeq	r1, r1, r0
 8007136:	6021      	streq	r1, [r4, #0]
 8007138:	6054      	str	r4, [r2, #4]
 800713a:	e7ca      	b.n	80070d2 <_free_r+0x22>
 800713c:	bd38      	pop	{r3, r4, r5, pc}
 800713e:	bf00      	nop
 8007140:	20001ee0 	.word	0x20001ee0

08007144 <sbrk_aligned>:
 8007144:	b570      	push	{r4, r5, r6, lr}
 8007146:	4e0f      	ldr	r6, [pc, #60]	@ (8007184 <sbrk_aligned+0x40>)
 8007148:	460c      	mov	r4, r1
 800714a:	6831      	ldr	r1, [r6, #0]
 800714c:	4605      	mov	r5, r0
 800714e:	b911      	cbnz	r1, 8007156 <sbrk_aligned+0x12>
 8007150:	f000 fbaa 	bl	80078a8 <_sbrk_r>
 8007154:	6030      	str	r0, [r6, #0]
 8007156:	4621      	mov	r1, r4
 8007158:	4628      	mov	r0, r5
 800715a:	f000 fba5 	bl	80078a8 <_sbrk_r>
 800715e:	1c43      	adds	r3, r0, #1
 8007160:	d103      	bne.n	800716a <sbrk_aligned+0x26>
 8007162:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007166:	4620      	mov	r0, r4
 8007168:	bd70      	pop	{r4, r5, r6, pc}
 800716a:	1cc4      	adds	r4, r0, #3
 800716c:	f024 0403 	bic.w	r4, r4, #3
 8007170:	42a0      	cmp	r0, r4
 8007172:	d0f8      	beq.n	8007166 <sbrk_aligned+0x22>
 8007174:	1a21      	subs	r1, r4, r0
 8007176:	4628      	mov	r0, r5
 8007178:	f000 fb96 	bl	80078a8 <_sbrk_r>
 800717c:	3001      	adds	r0, #1
 800717e:	d1f2      	bne.n	8007166 <sbrk_aligned+0x22>
 8007180:	e7ef      	b.n	8007162 <sbrk_aligned+0x1e>
 8007182:	bf00      	nop
 8007184:	20001edc 	.word	0x20001edc

08007188 <_malloc_r>:
 8007188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800718c:	1ccd      	adds	r5, r1, #3
 800718e:	f025 0503 	bic.w	r5, r5, #3
 8007192:	3508      	adds	r5, #8
 8007194:	2d0c      	cmp	r5, #12
 8007196:	bf38      	it	cc
 8007198:	250c      	movcc	r5, #12
 800719a:	2d00      	cmp	r5, #0
 800719c:	4606      	mov	r6, r0
 800719e:	db01      	blt.n	80071a4 <_malloc_r+0x1c>
 80071a0:	42a9      	cmp	r1, r5
 80071a2:	d904      	bls.n	80071ae <_malloc_r+0x26>
 80071a4:	230c      	movs	r3, #12
 80071a6:	6033      	str	r3, [r6, #0]
 80071a8:	2000      	movs	r0, #0
 80071aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007284 <_malloc_r+0xfc>
 80071b2:	f000 f869 	bl	8007288 <__malloc_lock>
 80071b6:	f8d8 3000 	ldr.w	r3, [r8]
 80071ba:	461c      	mov	r4, r3
 80071bc:	bb44      	cbnz	r4, 8007210 <_malloc_r+0x88>
 80071be:	4629      	mov	r1, r5
 80071c0:	4630      	mov	r0, r6
 80071c2:	f7ff ffbf 	bl	8007144 <sbrk_aligned>
 80071c6:	1c43      	adds	r3, r0, #1
 80071c8:	4604      	mov	r4, r0
 80071ca:	d158      	bne.n	800727e <_malloc_r+0xf6>
 80071cc:	f8d8 4000 	ldr.w	r4, [r8]
 80071d0:	4627      	mov	r7, r4
 80071d2:	2f00      	cmp	r7, #0
 80071d4:	d143      	bne.n	800725e <_malloc_r+0xd6>
 80071d6:	2c00      	cmp	r4, #0
 80071d8:	d04b      	beq.n	8007272 <_malloc_r+0xea>
 80071da:	6823      	ldr	r3, [r4, #0]
 80071dc:	4639      	mov	r1, r7
 80071de:	4630      	mov	r0, r6
 80071e0:	eb04 0903 	add.w	r9, r4, r3
 80071e4:	f000 fb60 	bl	80078a8 <_sbrk_r>
 80071e8:	4581      	cmp	r9, r0
 80071ea:	d142      	bne.n	8007272 <_malloc_r+0xea>
 80071ec:	6821      	ldr	r1, [r4, #0]
 80071ee:	1a6d      	subs	r5, r5, r1
 80071f0:	4629      	mov	r1, r5
 80071f2:	4630      	mov	r0, r6
 80071f4:	f7ff ffa6 	bl	8007144 <sbrk_aligned>
 80071f8:	3001      	adds	r0, #1
 80071fa:	d03a      	beq.n	8007272 <_malloc_r+0xea>
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	442b      	add	r3, r5
 8007200:	6023      	str	r3, [r4, #0]
 8007202:	f8d8 3000 	ldr.w	r3, [r8]
 8007206:	685a      	ldr	r2, [r3, #4]
 8007208:	bb62      	cbnz	r2, 8007264 <_malloc_r+0xdc>
 800720a:	f8c8 7000 	str.w	r7, [r8]
 800720e:	e00f      	b.n	8007230 <_malloc_r+0xa8>
 8007210:	6822      	ldr	r2, [r4, #0]
 8007212:	1b52      	subs	r2, r2, r5
 8007214:	d420      	bmi.n	8007258 <_malloc_r+0xd0>
 8007216:	2a0b      	cmp	r2, #11
 8007218:	d917      	bls.n	800724a <_malloc_r+0xc2>
 800721a:	1961      	adds	r1, r4, r5
 800721c:	42a3      	cmp	r3, r4
 800721e:	6025      	str	r5, [r4, #0]
 8007220:	bf18      	it	ne
 8007222:	6059      	strne	r1, [r3, #4]
 8007224:	6863      	ldr	r3, [r4, #4]
 8007226:	bf08      	it	eq
 8007228:	f8c8 1000 	streq.w	r1, [r8]
 800722c:	5162      	str	r2, [r4, r5]
 800722e:	604b      	str	r3, [r1, #4]
 8007230:	4630      	mov	r0, r6
 8007232:	f000 f82f 	bl	8007294 <__malloc_unlock>
 8007236:	f104 000b 	add.w	r0, r4, #11
 800723a:	1d23      	adds	r3, r4, #4
 800723c:	f020 0007 	bic.w	r0, r0, #7
 8007240:	1ac2      	subs	r2, r0, r3
 8007242:	bf1c      	itt	ne
 8007244:	1a1b      	subne	r3, r3, r0
 8007246:	50a3      	strne	r3, [r4, r2]
 8007248:	e7af      	b.n	80071aa <_malloc_r+0x22>
 800724a:	6862      	ldr	r2, [r4, #4]
 800724c:	42a3      	cmp	r3, r4
 800724e:	bf0c      	ite	eq
 8007250:	f8c8 2000 	streq.w	r2, [r8]
 8007254:	605a      	strne	r2, [r3, #4]
 8007256:	e7eb      	b.n	8007230 <_malloc_r+0xa8>
 8007258:	4623      	mov	r3, r4
 800725a:	6864      	ldr	r4, [r4, #4]
 800725c:	e7ae      	b.n	80071bc <_malloc_r+0x34>
 800725e:	463c      	mov	r4, r7
 8007260:	687f      	ldr	r7, [r7, #4]
 8007262:	e7b6      	b.n	80071d2 <_malloc_r+0x4a>
 8007264:	461a      	mov	r2, r3
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	42a3      	cmp	r3, r4
 800726a:	d1fb      	bne.n	8007264 <_malloc_r+0xdc>
 800726c:	2300      	movs	r3, #0
 800726e:	6053      	str	r3, [r2, #4]
 8007270:	e7de      	b.n	8007230 <_malloc_r+0xa8>
 8007272:	230c      	movs	r3, #12
 8007274:	6033      	str	r3, [r6, #0]
 8007276:	4630      	mov	r0, r6
 8007278:	f000 f80c 	bl	8007294 <__malloc_unlock>
 800727c:	e794      	b.n	80071a8 <_malloc_r+0x20>
 800727e:	6005      	str	r5, [r0, #0]
 8007280:	e7d6      	b.n	8007230 <_malloc_r+0xa8>
 8007282:	bf00      	nop
 8007284:	20001ee0 	.word	0x20001ee0

08007288 <__malloc_lock>:
 8007288:	4801      	ldr	r0, [pc, #4]	@ (8007290 <__malloc_lock+0x8>)
 800728a:	f7ff bf0f 	b.w	80070ac <__retarget_lock_acquire_recursive>
 800728e:	bf00      	nop
 8007290:	20001ed8 	.word	0x20001ed8

08007294 <__malloc_unlock>:
 8007294:	4801      	ldr	r0, [pc, #4]	@ (800729c <__malloc_unlock+0x8>)
 8007296:	f7ff bf0a 	b.w	80070ae <__retarget_lock_release_recursive>
 800729a:	bf00      	nop
 800729c:	20001ed8 	.word	0x20001ed8

080072a0 <__ssputs_r>:
 80072a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072a4:	688e      	ldr	r6, [r1, #8]
 80072a6:	461f      	mov	r7, r3
 80072a8:	42be      	cmp	r6, r7
 80072aa:	4682      	mov	sl, r0
 80072ac:	460c      	mov	r4, r1
 80072ae:	4690      	mov	r8, r2
 80072b0:	4633      	mov	r3, r6
 80072b2:	d853      	bhi.n	800735c <__ssputs_r+0xbc>
 80072b4:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 80072b8:	f410 6f90 	tst.w	r0, #1152	@ 0x480
 80072bc:	d02b      	beq.n	8007316 <__ssputs_r+0x76>
 80072be:	6965      	ldr	r5, [r4, #20]
 80072c0:	6823      	ldr	r3, [r4, #0]
 80072c2:	6909      	ldr	r1, [r1, #16]
 80072c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072c8:	eba3 0901 	sub.w	r9, r3, r1
 80072cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072d0:	1c7b      	adds	r3, r7, #1
 80072d2:	106d      	asrs	r5, r5, #1
 80072d4:	444b      	add	r3, r9
 80072d6:	42ab      	cmp	r3, r5
 80072d8:	462a      	mov	r2, r5
 80072da:	bf84      	itt	hi
 80072dc:	461d      	movhi	r5, r3
 80072de:	462a      	movhi	r2, r5
 80072e0:	0543      	lsls	r3, r0, #21
 80072e2:	d527      	bpl.n	8007334 <__ssputs_r+0x94>
 80072e4:	4611      	mov	r1, r2
 80072e6:	4650      	mov	r0, sl
 80072e8:	f7ff ff4e 	bl	8007188 <_malloc_r>
 80072ec:	4606      	mov	r6, r0
 80072ee:	b358      	cbz	r0, 8007348 <__ssputs_r+0xa8>
 80072f0:	6921      	ldr	r1, [r4, #16]
 80072f2:	464a      	mov	r2, r9
 80072f4:	f000 fae8 	bl	80078c8 <memcpy>
 80072f8:	89a3      	ldrh	r3, [r4, #12]
 80072fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80072fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007302:	81a3      	strh	r3, [r4, #12]
 8007304:	6126      	str	r6, [r4, #16]
 8007306:	6165      	str	r5, [r4, #20]
 8007308:	444e      	add	r6, r9
 800730a:	eba5 0509 	sub.w	r5, r5, r9
 800730e:	6026      	str	r6, [r4, #0]
 8007310:	60a5      	str	r5, [r4, #8]
 8007312:	463e      	mov	r6, r7
 8007314:	463b      	mov	r3, r7
 8007316:	461f      	mov	r7, r3
 8007318:	6820      	ldr	r0, [r4, #0]
 800731a:	463a      	mov	r2, r7
 800731c:	4641      	mov	r1, r8
 800731e:	f000 faa9 	bl	8007874 <memmove>
 8007322:	68a3      	ldr	r3, [r4, #8]
 8007324:	1b9b      	subs	r3, r3, r6
 8007326:	60a3      	str	r3, [r4, #8]
 8007328:	6823      	ldr	r3, [r4, #0]
 800732a:	443b      	add	r3, r7
 800732c:	6023      	str	r3, [r4, #0]
 800732e:	2000      	movs	r0, #0
 8007330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007334:	4650      	mov	r0, sl
 8007336:	f000 fad5 	bl	80078e4 <_realloc_r>
 800733a:	4606      	mov	r6, r0
 800733c:	2800      	cmp	r0, #0
 800733e:	d1e1      	bne.n	8007304 <__ssputs_r+0x64>
 8007340:	6921      	ldr	r1, [r4, #16]
 8007342:	4650      	mov	r0, sl
 8007344:	f7ff feb4 	bl	80070b0 <_free_r>
 8007348:	230c      	movs	r3, #12
 800734a:	f8ca 3000 	str.w	r3, [sl]
 800734e:	89a3      	ldrh	r3, [r4, #12]
 8007350:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007354:	81a3      	strh	r3, [r4, #12]
 8007356:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800735a:	e7e9      	b.n	8007330 <__ssputs_r+0x90>
 800735c:	463e      	mov	r6, r7
 800735e:	e7db      	b.n	8007318 <__ssputs_r+0x78>

08007360 <_svfiprintf_r>:
 8007360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007364:	4698      	mov	r8, r3
 8007366:	898b      	ldrh	r3, [r1, #12]
 8007368:	061b      	lsls	r3, r3, #24
 800736a:	b09d      	sub	sp, #116	@ 0x74
 800736c:	4607      	mov	r7, r0
 800736e:	460d      	mov	r5, r1
 8007370:	4614      	mov	r4, r2
 8007372:	d510      	bpl.n	8007396 <_svfiprintf_r+0x36>
 8007374:	690b      	ldr	r3, [r1, #16]
 8007376:	b973      	cbnz	r3, 8007396 <_svfiprintf_r+0x36>
 8007378:	2140      	movs	r1, #64	@ 0x40
 800737a:	f7ff ff05 	bl	8007188 <_malloc_r>
 800737e:	6028      	str	r0, [r5, #0]
 8007380:	6128      	str	r0, [r5, #16]
 8007382:	b930      	cbnz	r0, 8007392 <_svfiprintf_r+0x32>
 8007384:	230c      	movs	r3, #12
 8007386:	603b      	str	r3, [r7, #0]
 8007388:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800738c:	b01d      	add	sp, #116	@ 0x74
 800738e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007392:	2340      	movs	r3, #64	@ 0x40
 8007394:	616b      	str	r3, [r5, #20]
 8007396:	2300      	movs	r3, #0
 8007398:	9309      	str	r3, [sp, #36]	@ 0x24
 800739a:	2320      	movs	r3, #32
 800739c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80073a4:	2330      	movs	r3, #48	@ 0x30
 80073a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007544 <_svfiprintf_r+0x1e4>
 80073aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073ae:	f04f 0901 	mov.w	r9, #1
 80073b2:	4623      	mov	r3, r4
 80073b4:	469a      	mov	sl, r3
 80073b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073ba:	b10a      	cbz	r2, 80073c0 <_svfiprintf_r+0x60>
 80073bc:	2a25      	cmp	r2, #37	@ 0x25
 80073be:	d1f9      	bne.n	80073b4 <_svfiprintf_r+0x54>
 80073c0:	ebba 0b04 	subs.w	fp, sl, r4
 80073c4:	d00b      	beq.n	80073de <_svfiprintf_r+0x7e>
 80073c6:	465b      	mov	r3, fp
 80073c8:	4622      	mov	r2, r4
 80073ca:	4629      	mov	r1, r5
 80073cc:	4638      	mov	r0, r7
 80073ce:	f7ff ff67 	bl	80072a0 <__ssputs_r>
 80073d2:	3001      	adds	r0, #1
 80073d4:	f000 80a7 	beq.w	8007526 <_svfiprintf_r+0x1c6>
 80073d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073da:	445a      	add	r2, fp
 80073dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80073de:	f89a 3000 	ldrb.w	r3, [sl]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	f000 809f 	beq.w	8007526 <_svfiprintf_r+0x1c6>
 80073e8:	2300      	movs	r3, #0
 80073ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80073ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073f2:	f10a 0a01 	add.w	sl, sl, #1
 80073f6:	9304      	str	r3, [sp, #16]
 80073f8:	9307      	str	r3, [sp, #28]
 80073fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8007400:	4654      	mov	r4, sl
 8007402:	2205      	movs	r2, #5
 8007404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007408:	484e      	ldr	r0, [pc, #312]	@ (8007544 <_svfiprintf_r+0x1e4>)
 800740a:	f7f8 fec9 	bl	80001a0 <memchr>
 800740e:	9a04      	ldr	r2, [sp, #16]
 8007410:	b9d8      	cbnz	r0, 800744a <_svfiprintf_r+0xea>
 8007412:	06d0      	lsls	r0, r2, #27
 8007414:	bf44      	itt	mi
 8007416:	2320      	movmi	r3, #32
 8007418:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800741c:	0711      	lsls	r1, r2, #28
 800741e:	bf44      	itt	mi
 8007420:	232b      	movmi	r3, #43	@ 0x2b
 8007422:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007426:	f89a 3000 	ldrb.w	r3, [sl]
 800742a:	2b2a      	cmp	r3, #42	@ 0x2a
 800742c:	d015      	beq.n	800745a <_svfiprintf_r+0xfa>
 800742e:	9a07      	ldr	r2, [sp, #28]
 8007430:	4654      	mov	r4, sl
 8007432:	2000      	movs	r0, #0
 8007434:	f04f 0c0a 	mov.w	ip, #10
 8007438:	4621      	mov	r1, r4
 800743a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800743e:	3b30      	subs	r3, #48	@ 0x30
 8007440:	2b09      	cmp	r3, #9
 8007442:	d94b      	bls.n	80074dc <_svfiprintf_r+0x17c>
 8007444:	b1b0      	cbz	r0, 8007474 <_svfiprintf_r+0x114>
 8007446:	9207      	str	r2, [sp, #28]
 8007448:	e014      	b.n	8007474 <_svfiprintf_r+0x114>
 800744a:	eba0 0308 	sub.w	r3, r0, r8
 800744e:	fa09 f303 	lsl.w	r3, r9, r3
 8007452:	4313      	orrs	r3, r2
 8007454:	9304      	str	r3, [sp, #16]
 8007456:	46a2      	mov	sl, r4
 8007458:	e7d2      	b.n	8007400 <_svfiprintf_r+0xa0>
 800745a:	9b03      	ldr	r3, [sp, #12]
 800745c:	1d19      	adds	r1, r3, #4
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	9103      	str	r1, [sp, #12]
 8007462:	2b00      	cmp	r3, #0
 8007464:	bfbb      	ittet	lt
 8007466:	425b      	neglt	r3, r3
 8007468:	f042 0202 	orrlt.w	r2, r2, #2
 800746c:	9307      	strge	r3, [sp, #28]
 800746e:	9307      	strlt	r3, [sp, #28]
 8007470:	bfb8      	it	lt
 8007472:	9204      	strlt	r2, [sp, #16]
 8007474:	7823      	ldrb	r3, [r4, #0]
 8007476:	2b2e      	cmp	r3, #46	@ 0x2e
 8007478:	d10a      	bne.n	8007490 <_svfiprintf_r+0x130>
 800747a:	7863      	ldrb	r3, [r4, #1]
 800747c:	2b2a      	cmp	r3, #42	@ 0x2a
 800747e:	d132      	bne.n	80074e6 <_svfiprintf_r+0x186>
 8007480:	9b03      	ldr	r3, [sp, #12]
 8007482:	1d1a      	adds	r2, r3, #4
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	9203      	str	r2, [sp, #12]
 8007488:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800748c:	3402      	adds	r4, #2
 800748e:	9305      	str	r3, [sp, #20]
 8007490:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007554 <_svfiprintf_r+0x1f4>
 8007494:	7821      	ldrb	r1, [r4, #0]
 8007496:	2203      	movs	r2, #3
 8007498:	4650      	mov	r0, sl
 800749a:	f7f8 fe81 	bl	80001a0 <memchr>
 800749e:	b138      	cbz	r0, 80074b0 <_svfiprintf_r+0x150>
 80074a0:	9b04      	ldr	r3, [sp, #16]
 80074a2:	eba0 000a 	sub.w	r0, r0, sl
 80074a6:	2240      	movs	r2, #64	@ 0x40
 80074a8:	4082      	lsls	r2, r0
 80074aa:	4313      	orrs	r3, r2
 80074ac:	3401      	adds	r4, #1
 80074ae:	9304      	str	r3, [sp, #16]
 80074b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074b4:	4824      	ldr	r0, [pc, #144]	@ (8007548 <_svfiprintf_r+0x1e8>)
 80074b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074ba:	2206      	movs	r2, #6
 80074bc:	f7f8 fe70 	bl	80001a0 <memchr>
 80074c0:	2800      	cmp	r0, #0
 80074c2:	d036      	beq.n	8007532 <_svfiprintf_r+0x1d2>
 80074c4:	4b21      	ldr	r3, [pc, #132]	@ (800754c <_svfiprintf_r+0x1ec>)
 80074c6:	bb1b      	cbnz	r3, 8007510 <_svfiprintf_r+0x1b0>
 80074c8:	9b03      	ldr	r3, [sp, #12]
 80074ca:	3307      	adds	r3, #7
 80074cc:	f023 0307 	bic.w	r3, r3, #7
 80074d0:	3308      	adds	r3, #8
 80074d2:	9303      	str	r3, [sp, #12]
 80074d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074d6:	4433      	add	r3, r6
 80074d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80074da:	e76a      	b.n	80073b2 <_svfiprintf_r+0x52>
 80074dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80074e0:	460c      	mov	r4, r1
 80074e2:	2001      	movs	r0, #1
 80074e4:	e7a8      	b.n	8007438 <_svfiprintf_r+0xd8>
 80074e6:	2300      	movs	r3, #0
 80074e8:	3401      	adds	r4, #1
 80074ea:	9305      	str	r3, [sp, #20]
 80074ec:	4619      	mov	r1, r3
 80074ee:	f04f 0c0a 	mov.w	ip, #10
 80074f2:	4620      	mov	r0, r4
 80074f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074f8:	3a30      	subs	r2, #48	@ 0x30
 80074fa:	2a09      	cmp	r2, #9
 80074fc:	d903      	bls.n	8007506 <_svfiprintf_r+0x1a6>
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d0c6      	beq.n	8007490 <_svfiprintf_r+0x130>
 8007502:	9105      	str	r1, [sp, #20]
 8007504:	e7c4      	b.n	8007490 <_svfiprintf_r+0x130>
 8007506:	fb0c 2101 	mla	r1, ip, r1, r2
 800750a:	4604      	mov	r4, r0
 800750c:	2301      	movs	r3, #1
 800750e:	e7f0      	b.n	80074f2 <_svfiprintf_r+0x192>
 8007510:	ab03      	add	r3, sp, #12
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	462a      	mov	r2, r5
 8007516:	4b0e      	ldr	r3, [pc, #56]	@ (8007550 <_svfiprintf_r+0x1f0>)
 8007518:	a904      	add	r1, sp, #16
 800751a:	4638      	mov	r0, r7
 800751c:	f3af 8000 	nop.w
 8007520:	1c42      	adds	r2, r0, #1
 8007522:	4606      	mov	r6, r0
 8007524:	d1d6      	bne.n	80074d4 <_svfiprintf_r+0x174>
 8007526:	89ab      	ldrh	r3, [r5, #12]
 8007528:	065b      	lsls	r3, r3, #25
 800752a:	f53f af2d 	bmi.w	8007388 <_svfiprintf_r+0x28>
 800752e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007530:	e72c      	b.n	800738c <_svfiprintf_r+0x2c>
 8007532:	ab03      	add	r3, sp, #12
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	462a      	mov	r2, r5
 8007538:	4b05      	ldr	r3, [pc, #20]	@ (8007550 <_svfiprintf_r+0x1f0>)
 800753a:	a904      	add	r1, sp, #16
 800753c:	4638      	mov	r0, r7
 800753e:	f000 f879 	bl	8007634 <_printf_i>
 8007542:	e7ed      	b.n	8007520 <_svfiprintf_r+0x1c0>
 8007544:	08007cc8 	.word	0x08007cc8
 8007548:	08007cd2 	.word	0x08007cd2
 800754c:	00000000 	.word	0x00000000
 8007550:	080072a1 	.word	0x080072a1
 8007554:	08007cce 	.word	0x08007cce

08007558 <_printf_common>:
 8007558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800755c:	4616      	mov	r6, r2
 800755e:	4698      	mov	r8, r3
 8007560:	688a      	ldr	r2, [r1, #8]
 8007562:	690b      	ldr	r3, [r1, #16]
 8007564:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007568:	4293      	cmp	r3, r2
 800756a:	bfb8      	it	lt
 800756c:	4613      	movlt	r3, r2
 800756e:	6033      	str	r3, [r6, #0]
 8007570:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007574:	4607      	mov	r7, r0
 8007576:	460c      	mov	r4, r1
 8007578:	b10a      	cbz	r2, 800757e <_printf_common+0x26>
 800757a:	3301      	adds	r3, #1
 800757c:	6033      	str	r3, [r6, #0]
 800757e:	6823      	ldr	r3, [r4, #0]
 8007580:	0699      	lsls	r1, r3, #26
 8007582:	bf42      	ittt	mi
 8007584:	6833      	ldrmi	r3, [r6, #0]
 8007586:	3302      	addmi	r3, #2
 8007588:	6033      	strmi	r3, [r6, #0]
 800758a:	6825      	ldr	r5, [r4, #0]
 800758c:	f015 0506 	ands.w	r5, r5, #6
 8007590:	d106      	bne.n	80075a0 <_printf_common+0x48>
 8007592:	f104 0a19 	add.w	sl, r4, #25
 8007596:	68e3      	ldr	r3, [r4, #12]
 8007598:	6832      	ldr	r2, [r6, #0]
 800759a:	1a9b      	subs	r3, r3, r2
 800759c:	42ab      	cmp	r3, r5
 800759e:	dc26      	bgt.n	80075ee <_printf_common+0x96>
 80075a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80075a4:	6822      	ldr	r2, [r4, #0]
 80075a6:	3b00      	subs	r3, #0
 80075a8:	bf18      	it	ne
 80075aa:	2301      	movne	r3, #1
 80075ac:	0692      	lsls	r2, r2, #26
 80075ae:	d42b      	bmi.n	8007608 <_printf_common+0xb0>
 80075b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80075b4:	4641      	mov	r1, r8
 80075b6:	4638      	mov	r0, r7
 80075b8:	47c8      	blx	r9
 80075ba:	3001      	adds	r0, #1
 80075bc:	d01e      	beq.n	80075fc <_printf_common+0xa4>
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	6922      	ldr	r2, [r4, #16]
 80075c2:	f003 0306 	and.w	r3, r3, #6
 80075c6:	2b04      	cmp	r3, #4
 80075c8:	bf02      	ittt	eq
 80075ca:	68e5      	ldreq	r5, [r4, #12]
 80075cc:	6833      	ldreq	r3, [r6, #0]
 80075ce:	1aed      	subeq	r5, r5, r3
 80075d0:	68a3      	ldr	r3, [r4, #8]
 80075d2:	bf0c      	ite	eq
 80075d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075d8:	2500      	movne	r5, #0
 80075da:	4293      	cmp	r3, r2
 80075dc:	bfc4      	itt	gt
 80075de:	1a9b      	subgt	r3, r3, r2
 80075e0:	18ed      	addgt	r5, r5, r3
 80075e2:	2600      	movs	r6, #0
 80075e4:	341a      	adds	r4, #26
 80075e6:	42b5      	cmp	r5, r6
 80075e8:	d11a      	bne.n	8007620 <_printf_common+0xc8>
 80075ea:	2000      	movs	r0, #0
 80075ec:	e008      	b.n	8007600 <_printf_common+0xa8>
 80075ee:	2301      	movs	r3, #1
 80075f0:	4652      	mov	r2, sl
 80075f2:	4641      	mov	r1, r8
 80075f4:	4638      	mov	r0, r7
 80075f6:	47c8      	blx	r9
 80075f8:	3001      	adds	r0, #1
 80075fa:	d103      	bne.n	8007604 <_printf_common+0xac>
 80075fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007604:	3501      	adds	r5, #1
 8007606:	e7c6      	b.n	8007596 <_printf_common+0x3e>
 8007608:	18e1      	adds	r1, r4, r3
 800760a:	1c5a      	adds	r2, r3, #1
 800760c:	2030      	movs	r0, #48	@ 0x30
 800760e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007612:	4422      	add	r2, r4
 8007614:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007618:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800761c:	3302      	adds	r3, #2
 800761e:	e7c7      	b.n	80075b0 <_printf_common+0x58>
 8007620:	2301      	movs	r3, #1
 8007622:	4622      	mov	r2, r4
 8007624:	4641      	mov	r1, r8
 8007626:	4638      	mov	r0, r7
 8007628:	47c8      	blx	r9
 800762a:	3001      	adds	r0, #1
 800762c:	d0e6      	beq.n	80075fc <_printf_common+0xa4>
 800762e:	3601      	adds	r6, #1
 8007630:	e7d9      	b.n	80075e6 <_printf_common+0x8e>
	...

08007634 <_printf_i>:
 8007634:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007638:	7e0f      	ldrb	r7, [r1, #24]
 800763a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800763c:	2f78      	cmp	r7, #120	@ 0x78
 800763e:	4691      	mov	r9, r2
 8007640:	4680      	mov	r8, r0
 8007642:	460c      	mov	r4, r1
 8007644:	469a      	mov	sl, r3
 8007646:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800764a:	d807      	bhi.n	800765c <_printf_i+0x28>
 800764c:	2f62      	cmp	r7, #98	@ 0x62
 800764e:	d80a      	bhi.n	8007666 <_printf_i+0x32>
 8007650:	2f00      	cmp	r7, #0
 8007652:	f000 80d2 	beq.w	80077fa <_printf_i+0x1c6>
 8007656:	2f58      	cmp	r7, #88	@ 0x58
 8007658:	f000 80b7 	beq.w	80077ca <_printf_i+0x196>
 800765c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007660:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007664:	e03a      	b.n	80076dc <_printf_i+0xa8>
 8007666:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800766a:	2b15      	cmp	r3, #21
 800766c:	d8f6      	bhi.n	800765c <_printf_i+0x28>
 800766e:	a101      	add	r1, pc, #4	@ (adr r1, 8007674 <_printf_i+0x40>)
 8007670:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007674:	080076cd 	.word	0x080076cd
 8007678:	080076e1 	.word	0x080076e1
 800767c:	0800765d 	.word	0x0800765d
 8007680:	0800765d 	.word	0x0800765d
 8007684:	0800765d 	.word	0x0800765d
 8007688:	0800765d 	.word	0x0800765d
 800768c:	080076e1 	.word	0x080076e1
 8007690:	0800765d 	.word	0x0800765d
 8007694:	0800765d 	.word	0x0800765d
 8007698:	0800765d 	.word	0x0800765d
 800769c:	0800765d 	.word	0x0800765d
 80076a0:	080077e1 	.word	0x080077e1
 80076a4:	0800770b 	.word	0x0800770b
 80076a8:	08007797 	.word	0x08007797
 80076ac:	0800765d 	.word	0x0800765d
 80076b0:	0800765d 	.word	0x0800765d
 80076b4:	08007803 	.word	0x08007803
 80076b8:	0800765d 	.word	0x0800765d
 80076bc:	0800770b 	.word	0x0800770b
 80076c0:	0800765d 	.word	0x0800765d
 80076c4:	0800765d 	.word	0x0800765d
 80076c8:	0800779f 	.word	0x0800779f
 80076cc:	6833      	ldr	r3, [r6, #0]
 80076ce:	1d1a      	adds	r2, r3, #4
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	6032      	str	r2, [r6, #0]
 80076d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80076d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80076dc:	2301      	movs	r3, #1
 80076de:	e09d      	b.n	800781c <_printf_i+0x1e8>
 80076e0:	6833      	ldr	r3, [r6, #0]
 80076e2:	6820      	ldr	r0, [r4, #0]
 80076e4:	1d19      	adds	r1, r3, #4
 80076e6:	6031      	str	r1, [r6, #0]
 80076e8:	0606      	lsls	r6, r0, #24
 80076ea:	d501      	bpl.n	80076f0 <_printf_i+0xbc>
 80076ec:	681d      	ldr	r5, [r3, #0]
 80076ee:	e003      	b.n	80076f8 <_printf_i+0xc4>
 80076f0:	0645      	lsls	r5, r0, #25
 80076f2:	d5fb      	bpl.n	80076ec <_printf_i+0xb8>
 80076f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80076f8:	2d00      	cmp	r5, #0
 80076fa:	da03      	bge.n	8007704 <_printf_i+0xd0>
 80076fc:	232d      	movs	r3, #45	@ 0x2d
 80076fe:	426d      	negs	r5, r5
 8007700:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007704:	4859      	ldr	r0, [pc, #356]	@ (800786c <_printf_i+0x238>)
 8007706:	230a      	movs	r3, #10
 8007708:	e010      	b.n	800772c <_printf_i+0xf8>
 800770a:	6821      	ldr	r1, [r4, #0]
 800770c:	6833      	ldr	r3, [r6, #0]
 800770e:	0608      	lsls	r0, r1, #24
 8007710:	f853 5b04 	ldr.w	r5, [r3], #4
 8007714:	d402      	bmi.n	800771c <_printf_i+0xe8>
 8007716:	0649      	lsls	r1, r1, #25
 8007718:	bf48      	it	mi
 800771a:	b2ad      	uxthmi	r5, r5
 800771c:	2f6f      	cmp	r7, #111	@ 0x6f
 800771e:	4853      	ldr	r0, [pc, #332]	@ (800786c <_printf_i+0x238>)
 8007720:	6033      	str	r3, [r6, #0]
 8007722:	d159      	bne.n	80077d8 <_printf_i+0x1a4>
 8007724:	2308      	movs	r3, #8
 8007726:	2100      	movs	r1, #0
 8007728:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800772c:	6866      	ldr	r6, [r4, #4]
 800772e:	60a6      	str	r6, [r4, #8]
 8007730:	2e00      	cmp	r6, #0
 8007732:	db05      	blt.n	8007740 <_printf_i+0x10c>
 8007734:	6821      	ldr	r1, [r4, #0]
 8007736:	432e      	orrs	r6, r5
 8007738:	f021 0104 	bic.w	r1, r1, #4
 800773c:	6021      	str	r1, [r4, #0]
 800773e:	d04d      	beq.n	80077dc <_printf_i+0x1a8>
 8007740:	4616      	mov	r6, r2
 8007742:	fbb5 f1f3 	udiv	r1, r5, r3
 8007746:	fb03 5711 	mls	r7, r3, r1, r5
 800774a:	5dc7      	ldrb	r7, [r0, r7]
 800774c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007750:	462f      	mov	r7, r5
 8007752:	42bb      	cmp	r3, r7
 8007754:	460d      	mov	r5, r1
 8007756:	d9f4      	bls.n	8007742 <_printf_i+0x10e>
 8007758:	2b08      	cmp	r3, #8
 800775a:	d10b      	bne.n	8007774 <_printf_i+0x140>
 800775c:	6823      	ldr	r3, [r4, #0]
 800775e:	07df      	lsls	r7, r3, #31
 8007760:	d508      	bpl.n	8007774 <_printf_i+0x140>
 8007762:	6923      	ldr	r3, [r4, #16]
 8007764:	6861      	ldr	r1, [r4, #4]
 8007766:	4299      	cmp	r1, r3
 8007768:	bfde      	ittt	le
 800776a:	2330      	movle	r3, #48	@ 0x30
 800776c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007770:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007774:	1b92      	subs	r2, r2, r6
 8007776:	6122      	str	r2, [r4, #16]
 8007778:	f8cd a000 	str.w	sl, [sp]
 800777c:	464b      	mov	r3, r9
 800777e:	aa03      	add	r2, sp, #12
 8007780:	4621      	mov	r1, r4
 8007782:	4640      	mov	r0, r8
 8007784:	f7ff fee8 	bl	8007558 <_printf_common>
 8007788:	3001      	adds	r0, #1
 800778a:	d14c      	bne.n	8007826 <_printf_i+0x1f2>
 800778c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007790:	b004      	add	sp, #16
 8007792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007796:	6823      	ldr	r3, [r4, #0]
 8007798:	f043 0320 	orr.w	r3, r3, #32
 800779c:	6023      	str	r3, [r4, #0]
 800779e:	4834      	ldr	r0, [pc, #208]	@ (8007870 <_printf_i+0x23c>)
 80077a0:	2778      	movs	r7, #120	@ 0x78
 80077a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80077a6:	6823      	ldr	r3, [r4, #0]
 80077a8:	6831      	ldr	r1, [r6, #0]
 80077aa:	061f      	lsls	r7, r3, #24
 80077ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80077b0:	d402      	bmi.n	80077b8 <_printf_i+0x184>
 80077b2:	065f      	lsls	r7, r3, #25
 80077b4:	bf48      	it	mi
 80077b6:	b2ad      	uxthmi	r5, r5
 80077b8:	6031      	str	r1, [r6, #0]
 80077ba:	07d9      	lsls	r1, r3, #31
 80077bc:	bf44      	itt	mi
 80077be:	f043 0320 	orrmi.w	r3, r3, #32
 80077c2:	6023      	strmi	r3, [r4, #0]
 80077c4:	b11d      	cbz	r5, 80077ce <_printf_i+0x19a>
 80077c6:	2310      	movs	r3, #16
 80077c8:	e7ad      	b.n	8007726 <_printf_i+0xf2>
 80077ca:	4828      	ldr	r0, [pc, #160]	@ (800786c <_printf_i+0x238>)
 80077cc:	e7e9      	b.n	80077a2 <_printf_i+0x16e>
 80077ce:	6823      	ldr	r3, [r4, #0]
 80077d0:	f023 0320 	bic.w	r3, r3, #32
 80077d4:	6023      	str	r3, [r4, #0]
 80077d6:	e7f6      	b.n	80077c6 <_printf_i+0x192>
 80077d8:	230a      	movs	r3, #10
 80077da:	e7a4      	b.n	8007726 <_printf_i+0xf2>
 80077dc:	4616      	mov	r6, r2
 80077de:	e7bb      	b.n	8007758 <_printf_i+0x124>
 80077e0:	6833      	ldr	r3, [r6, #0]
 80077e2:	6825      	ldr	r5, [r4, #0]
 80077e4:	6961      	ldr	r1, [r4, #20]
 80077e6:	1d18      	adds	r0, r3, #4
 80077e8:	6030      	str	r0, [r6, #0]
 80077ea:	062e      	lsls	r6, r5, #24
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	d501      	bpl.n	80077f4 <_printf_i+0x1c0>
 80077f0:	6019      	str	r1, [r3, #0]
 80077f2:	e002      	b.n	80077fa <_printf_i+0x1c6>
 80077f4:	0668      	lsls	r0, r5, #25
 80077f6:	d5fb      	bpl.n	80077f0 <_printf_i+0x1bc>
 80077f8:	8019      	strh	r1, [r3, #0]
 80077fa:	2300      	movs	r3, #0
 80077fc:	6123      	str	r3, [r4, #16]
 80077fe:	4616      	mov	r6, r2
 8007800:	e7ba      	b.n	8007778 <_printf_i+0x144>
 8007802:	6833      	ldr	r3, [r6, #0]
 8007804:	1d1a      	adds	r2, r3, #4
 8007806:	6032      	str	r2, [r6, #0]
 8007808:	681e      	ldr	r6, [r3, #0]
 800780a:	6862      	ldr	r2, [r4, #4]
 800780c:	2100      	movs	r1, #0
 800780e:	4630      	mov	r0, r6
 8007810:	f7f8 fcc6 	bl	80001a0 <memchr>
 8007814:	b108      	cbz	r0, 800781a <_printf_i+0x1e6>
 8007816:	1b80      	subs	r0, r0, r6
 8007818:	6060      	str	r0, [r4, #4]
 800781a:	6863      	ldr	r3, [r4, #4]
 800781c:	6123      	str	r3, [r4, #16]
 800781e:	2300      	movs	r3, #0
 8007820:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007824:	e7a8      	b.n	8007778 <_printf_i+0x144>
 8007826:	6923      	ldr	r3, [r4, #16]
 8007828:	4632      	mov	r2, r6
 800782a:	4649      	mov	r1, r9
 800782c:	4640      	mov	r0, r8
 800782e:	47d0      	blx	sl
 8007830:	3001      	adds	r0, #1
 8007832:	d0ab      	beq.n	800778c <_printf_i+0x158>
 8007834:	6823      	ldr	r3, [r4, #0]
 8007836:	079b      	lsls	r3, r3, #30
 8007838:	d413      	bmi.n	8007862 <_printf_i+0x22e>
 800783a:	68e0      	ldr	r0, [r4, #12]
 800783c:	9b03      	ldr	r3, [sp, #12]
 800783e:	4298      	cmp	r0, r3
 8007840:	bfb8      	it	lt
 8007842:	4618      	movlt	r0, r3
 8007844:	e7a4      	b.n	8007790 <_printf_i+0x15c>
 8007846:	2301      	movs	r3, #1
 8007848:	4632      	mov	r2, r6
 800784a:	4649      	mov	r1, r9
 800784c:	4640      	mov	r0, r8
 800784e:	47d0      	blx	sl
 8007850:	3001      	adds	r0, #1
 8007852:	d09b      	beq.n	800778c <_printf_i+0x158>
 8007854:	3501      	adds	r5, #1
 8007856:	68e3      	ldr	r3, [r4, #12]
 8007858:	9903      	ldr	r1, [sp, #12]
 800785a:	1a5b      	subs	r3, r3, r1
 800785c:	42ab      	cmp	r3, r5
 800785e:	dcf2      	bgt.n	8007846 <_printf_i+0x212>
 8007860:	e7eb      	b.n	800783a <_printf_i+0x206>
 8007862:	2500      	movs	r5, #0
 8007864:	f104 0619 	add.w	r6, r4, #25
 8007868:	e7f5      	b.n	8007856 <_printf_i+0x222>
 800786a:	bf00      	nop
 800786c:	08007cd9 	.word	0x08007cd9
 8007870:	08007cea 	.word	0x08007cea

08007874 <memmove>:
 8007874:	4288      	cmp	r0, r1
 8007876:	b510      	push	{r4, lr}
 8007878:	eb01 0402 	add.w	r4, r1, r2
 800787c:	d902      	bls.n	8007884 <memmove+0x10>
 800787e:	4284      	cmp	r4, r0
 8007880:	4623      	mov	r3, r4
 8007882:	d807      	bhi.n	8007894 <memmove+0x20>
 8007884:	1e43      	subs	r3, r0, #1
 8007886:	42a1      	cmp	r1, r4
 8007888:	d007      	beq.n	800789a <memmove+0x26>
 800788a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800788e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007892:	e7f8      	b.n	8007886 <memmove+0x12>
 8007894:	4402      	add	r2, r0
 8007896:	4282      	cmp	r2, r0
 8007898:	d100      	bne.n	800789c <memmove+0x28>
 800789a:	bd10      	pop	{r4, pc}
 800789c:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80078a0:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80078a4:	e7f7      	b.n	8007896 <memmove+0x22>
	...

080078a8 <_sbrk_r>:
 80078a8:	b538      	push	{r3, r4, r5, lr}
 80078aa:	4d06      	ldr	r5, [pc, #24]	@ (80078c4 <_sbrk_r+0x1c>)
 80078ac:	2300      	movs	r3, #0
 80078ae:	4604      	mov	r4, r0
 80078b0:	4608      	mov	r0, r1
 80078b2:	602b      	str	r3, [r5, #0]
 80078b4:	f7f8 ff1e 	bl	80006f4 <_sbrk>
 80078b8:	1c43      	adds	r3, r0, #1
 80078ba:	d102      	bne.n	80078c2 <_sbrk_r+0x1a>
 80078bc:	682b      	ldr	r3, [r5, #0]
 80078be:	b103      	cbz	r3, 80078c2 <_sbrk_r+0x1a>
 80078c0:	6023      	str	r3, [r4, #0]
 80078c2:	bd38      	pop	{r3, r4, r5, pc}
 80078c4:	20001ed4 	.word	0x20001ed4

080078c8 <memcpy>:
 80078c8:	440a      	add	r2, r1
 80078ca:	4291      	cmp	r1, r2
 80078cc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80078d0:	d100      	bne.n	80078d4 <memcpy+0xc>
 80078d2:	4770      	bx	lr
 80078d4:	b510      	push	{r4, lr}
 80078d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078de:	4291      	cmp	r1, r2
 80078e0:	d1f9      	bne.n	80078d6 <memcpy+0xe>
 80078e2:	bd10      	pop	{r4, pc}

080078e4 <_realloc_r>:
 80078e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078e8:	4607      	mov	r7, r0
 80078ea:	4614      	mov	r4, r2
 80078ec:	460d      	mov	r5, r1
 80078ee:	b921      	cbnz	r1, 80078fa <_realloc_r+0x16>
 80078f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078f4:	4611      	mov	r1, r2
 80078f6:	f7ff bc47 	b.w	8007188 <_malloc_r>
 80078fa:	b92a      	cbnz	r2, 8007908 <_realloc_r+0x24>
 80078fc:	f7ff fbd8 	bl	80070b0 <_free_r>
 8007900:	4625      	mov	r5, r4
 8007902:	4628      	mov	r0, r5
 8007904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007908:	f000 f81a 	bl	8007940 <_malloc_usable_size_r>
 800790c:	4284      	cmp	r4, r0
 800790e:	4606      	mov	r6, r0
 8007910:	d802      	bhi.n	8007918 <_realloc_r+0x34>
 8007912:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007916:	d8f4      	bhi.n	8007902 <_realloc_r+0x1e>
 8007918:	4621      	mov	r1, r4
 800791a:	4638      	mov	r0, r7
 800791c:	f7ff fc34 	bl	8007188 <_malloc_r>
 8007920:	4680      	mov	r8, r0
 8007922:	b908      	cbnz	r0, 8007928 <_realloc_r+0x44>
 8007924:	4645      	mov	r5, r8
 8007926:	e7ec      	b.n	8007902 <_realloc_r+0x1e>
 8007928:	42b4      	cmp	r4, r6
 800792a:	4622      	mov	r2, r4
 800792c:	4629      	mov	r1, r5
 800792e:	bf28      	it	cs
 8007930:	4632      	movcs	r2, r6
 8007932:	f7ff ffc9 	bl	80078c8 <memcpy>
 8007936:	4629      	mov	r1, r5
 8007938:	4638      	mov	r0, r7
 800793a:	f7ff fbb9 	bl	80070b0 <_free_r>
 800793e:	e7f1      	b.n	8007924 <_realloc_r+0x40>

08007940 <_malloc_usable_size_r>:
 8007940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007944:	1f18      	subs	r0, r3, #4
 8007946:	2b00      	cmp	r3, #0
 8007948:	bfbc      	itt	lt
 800794a:	580b      	ldrlt	r3, [r1, r0]
 800794c:	18c0      	addlt	r0, r0, r3
 800794e:	4770      	bx	lr

08007950 <__udivmoddi4>:
 8007950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007954:	468c      	mov	ip, r1
 8007956:	468e      	mov	lr, r1
 8007958:	9e08      	ldr	r6, [sp, #32]
 800795a:	4615      	mov	r5, r2
 800795c:	4604      	mov	r4, r0
 800795e:	4619      	mov	r1, r3
 8007960:	2b00      	cmp	r3, #0
 8007962:	f040 80d0 	bne.w	8007b06 <__udivmoddi4+0x1b6>
 8007966:	4572      	cmp	r2, lr
 8007968:	d947      	bls.n	80079fa <__udivmoddi4+0xaa>
 800796a:	fab2 f782 	clz	r7, r2
 800796e:	b14f      	cbz	r7, 8007984 <__udivmoddi4+0x34>
 8007970:	f1c7 0320 	rsb	r3, r7, #32
 8007974:	fa0e fc07 	lsl.w	ip, lr, r7
 8007978:	fa20 f303 	lsr.w	r3, r0, r3
 800797c:	40bd      	lsls	r5, r7
 800797e:	ea43 0c0c 	orr.w	ip, r3, ip
 8007982:	40bc      	lsls	r4, r7
 8007984:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007988:	b2a8      	uxth	r0, r5
 800798a:	fbbc f8fe 	udiv	r8, ip, lr
 800798e:	0c23      	lsrs	r3, r4, #16
 8007990:	fb0e cc18 	mls	ip, lr, r8, ip
 8007994:	fb08 f900 	mul.w	r9, r8, r0
 8007998:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800799c:	4599      	cmp	r9, r3
 800799e:	d928      	bls.n	80079f2 <__udivmoddi4+0xa2>
 80079a0:	18eb      	adds	r3, r5, r3
 80079a2:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 80079a6:	d204      	bcs.n	80079b2 <__udivmoddi4+0x62>
 80079a8:	4599      	cmp	r9, r3
 80079aa:	d902      	bls.n	80079b2 <__udivmoddi4+0x62>
 80079ac:	f1a8 0202 	sub.w	r2, r8, #2
 80079b0:	442b      	add	r3, r5
 80079b2:	eba3 0309 	sub.w	r3, r3, r9
 80079b6:	b2a4      	uxth	r4, r4
 80079b8:	fbb3 fcfe 	udiv	ip, r3, lr
 80079bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80079c0:	fb0c f000 	mul.w	r0, ip, r0
 80079c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80079c8:	42a0      	cmp	r0, r4
 80079ca:	d914      	bls.n	80079f6 <__udivmoddi4+0xa6>
 80079cc:	192c      	adds	r4, r5, r4
 80079ce:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
 80079d2:	d204      	bcs.n	80079de <__udivmoddi4+0x8e>
 80079d4:	42a0      	cmp	r0, r4
 80079d6:	d902      	bls.n	80079de <__udivmoddi4+0x8e>
 80079d8:	f1ac 0302 	sub.w	r3, ip, #2
 80079dc:	442c      	add	r4, r5
 80079de:	1a24      	subs	r4, r4, r0
 80079e0:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
 80079e4:	b11e      	cbz	r6, 80079ee <__udivmoddi4+0x9e>
 80079e6:	40fc      	lsrs	r4, r7
 80079e8:	2300      	movs	r3, #0
 80079ea:	6034      	str	r4, [r6, #0]
 80079ec:	6073      	str	r3, [r6, #4]
 80079ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079f2:	4642      	mov	r2, r8
 80079f4:	e7dd      	b.n	80079b2 <__udivmoddi4+0x62>
 80079f6:	4663      	mov	r3, ip
 80079f8:	e7f1      	b.n	80079de <__udivmoddi4+0x8e>
 80079fa:	2a00      	cmp	r2, #0
 80079fc:	d079      	beq.n	8007af2 <__udivmoddi4+0x1a2>
 80079fe:	fab2 f382 	clz	r3, r2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d03f      	beq.n	8007a86 <__udivmoddi4+0x136>
 8007a06:	4619      	mov	r1, r3
 8007a08:	f1c1 0320 	rsb	r3, r1, #32
 8007a0c:	fa02 f501 	lsl.w	r5, r2, r1
 8007a10:	fa2e f203 	lsr.w	r2, lr, r3
 8007a14:	fa0e fe01 	lsl.w	lr, lr, r1
 8007a18:	fa20 f303 	lsr.w	r3, r0, r3
 8007a1c:	ea43 030e 	orr.w	r3, r3, lr
 8007a20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007a24:	fa00 f401 	lsl.w	r4, r0, r1
 8007a28:	fbb2 fcfe 	udiv	ip, r2, lr
 8007a2c:	b2af      	uxth	r7, r5
 8007a2e:	fb0e 201c 	mls	r0, lr, ip, r2
 8007a32:	0c1a      	lsrs	r2, r3, #16
 8007a34:	fb0c f807 	mul.w	r8, ip, r7
 8007a38:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8007a3c:	4590      	cmp	r8, r2
 8007a3e:	d95a      	bls.n	8007af6 <__udivmoddi4+0x1a6>
 8007a40:	18aa      	adds	r2, r5, r2
 8007a42:	f10c 30ff 	add.w	r0, ip, #4294967295	@ 0xffffffff
 8007a46:	d204      	bcs.n	8007a52 <__udivmoddi4+0x102>
 8007a48:	4590      	cmp	r8, r2
 8007a4a:	d902      	bls.n	8007a52 <__udivmoddi4+0x102>
 8007a4c:	f1ac 0002 	sub.w	r0, ip, #2
 8007a50:	442a      	add	r2, r5
 8007a52:	eba2 0208 	sub.w	r2, r2, r8
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	fbb2 fcfe 	udiv	ip, r2, lr
 8007a5c:	fb0e 221c 	mls	r2, lr, ip, r2
 8007a60:	fb0c f707 	mul.w	r7, ip, r7
 8007a64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a68:	429f      	cmp	r7, r3
 8007a6a:	d946      	bls.n	8007afa <__udivmoddi4+0x1aa>
 8007a6c:	18eb      	adds	r3, r5, r3
 8007a6e:	f10c 32ff 	add.w	r2, ip, #4294967295	@ 0xffffffff
 8007a72:	d204      	bcs.n	8007a7e <__udivmoddi4+0x12e>
 8007a74:	429f      	cmp	r7, r3
 8007a76:	d902      	bls.n	8007a7e <__udivmoddi4+0x12e>
 8007a78:	f1ac 0202 	sub.w	r2, ip, #2
 8007a7c:	442b      	add	r3, r5
 8007a7e:	1bdb      	subs	r3, r3, r7
 8007a80:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8007a84:	e002      	b.n	8007a8c <__udivmoddi4+0x13c>
 8007a86:	ebae 0302 	sub.w	r3, lr, r2
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007a90:	b2af      	uxth	r7, r5
 8007a92:	fbb3 fcfe 	udiv	ip, r3, lr
 8007a96:	0c20      	lsrs	r0, r4, #16
 8007a98:	fb0e 331c 	mls	r3, lr, ip, r3
 8007a9c:	fb0c f807 	mul.w	r8, ip, r7
 8007aa0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8007aa4:	4598      	cmp	r8, r3
 8007aa6:	d92a      	bls.n	8007afe <__udivmoddi4+0x1ae>
 8007aa8:	18eb      	adds	r3, r5, r3
 8007aaa:	f10c 30ff 	add.w	r0, ip, #4294967295	@ 0xffffffff
 8007aae:	d204      	bcs.n	8007aba <__udivmoddi4+0x16a>
 8007ab0:	4598      	cmp	r8, r3
 8007ab2:	d902      	bls.n	8007aba <__udivmoddi4+0x16a>
 8007ab4:	f1ac 0002 	sub.w	r0, ip, #2
 8007ab8:	442b      	add	r3, r5
 8007aba:	eba3 0308 	sub.w	r3, r3, r8
 8007abe:	b2a4      	uxth	r4, r4
 8007ac0:	fbb3 fcfe 	udiv	ip, r3, lr
 8007ac4:	fb0e 331c 	mls	r3, lr, ip, r3
 8007ac8:	fb0c f707 	mul.w	r7, ip, r7
 8007acc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8007ad0:	42a7      	cmp	r7, r4
 8007ad2:	d916      	bls.n	8007b02 <__udivmoddi4+0x1b2>
 8007ad4:	192c      	adds	r4, r5, r4
 8007ad6:	f10c 33ff 	add.w	r3, ip, #4294967295	@ 0xffffffff
 8007ada:	d204      	bcs.n	8007ae6 <__udivmoddi4+0x196>
 8007adc:	42a7      	cmp	r7, r4
 8007ade:	d902      	bls.n	8007ae6 <__udivmoddi4+0x196>
 8007ae0:	f1ac 0302 	sub.w	r3, ip, #2
 8007ae4:	442c      	add	r4, r5
 8007ae6:	1be4      	subs	r4, r4, r7
 8007ae8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8007aec:	460f      	mov	r7, r1
 8007aee:	4611      	mov	r1, r2
 8007af0:	e778      	b.n	80079e4 <__udivmoddi4+0x94>
 8007af2:	211f      	movs	r1, #31
 8007af4:	e788      	b.n	8007a08 <__udivmoddi4+0xb8>
 8007af6:	4660      	mov	r0, ip
 8007af8:	e7ab      	b.n	8007a52 <__udivmoddi4+0x102>
 8007afa:	4662      	mov	r2, ip
 8007afc:	e7bf      	b.n	8007a7e <__udivmoddi4+0x12e>
 8007afe:	4660      	mov	r0, ip
 8007b00:	e7db      	b.n	8007aba <__udivmoddi4+0x16a>
 8007b02:	4663      	mov	r3, ip
 8007b04:	e7ef      	b.n	8007ae6 <__udivmoddi4+0x196>
 8007b06:	4573      	cmp	r3, lr
 8007b08:	d906      	bls.n	8007b18 <__udivmoddi4+0x1c8>
 8007b0a:	b916      	cbnz	r6, 8007b12 <__udivmoddi4+0x1c2>
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	4608      	mov	r0, r1
 8007b10:	e76d      	b.n	80079ee <__udivmoddi4+0x9e>
 8007b12:	e9c6 0e00 	strd	r0, lr, [r6]
 8007b16:	e7f9      	b.n	8007b0c <__udivmoddi4+0x1bc>
 8007b18:	fab3 f783 	clz	r7, r3
 8007b1c:	b987      	cbnz	r7, 8007b40 <__udivmoddi4+0x1f0>
 8007b1e:	4573      	cmp	r3, lr
 8007b20:	d301      	bcc.n	8007b26 <__udivmoddi4+0x1d6>
 8007b22:	4282      	cmp	r2, r0
 8007b24:	d807      	bhi.n	8007b36 <__udivmoddi4+0x1e6>
 8007b26:	1a84      	subs	r4, r0, r2
 8007b28:	eb6e 0303 	sbc.w	r3, lr, r3
 8007b2c:	2001      	movs	r0, #1
 8007b2e:	469c      	mov	ip, r3
 8007b30:	b91e      	cbnz	r6, 8007b3a <__udivmoddi4+0x1ea>
 8007b32:	2100      	movs	r1, #0
 8007b34:	e75b      	b.n	80079ee <__udivmoddi4+0x9e>
 8007b36:	4638      	mov	r0, r7
 8007b38:	e7fa      	b.n	8007b30 <__udivmoddi4+0x1e0>
 8007b3a:	e9c6 4c00 	strd	r4, ip, [r6]
 8007b3e:	e7f8      	b.n	8007b32 <__udivmoddi4+0x1e2>
 8007b40:	f1c7 0c20 	rsb	ip, r7, #32
 8007b44:	40bb      	lsls	r3, r7
 8007b46:	fa22 f50c 	lsr.w	r5, r2, ip
 8007b4a:	431d      	orrs	r5, r3
 8007b4c:	fa20 f10c 	lsr.w	r1, r0, ip
 8007b50:	fa2e f30c 	lsr.w	r3, lr, ip
 8007b54:	fa0e fe07 	lsl.w	lr, lr, r7
 8007b58:	ea41 010e 	orr.w	r1, r1, lr
 8007b5c:	ea4f 4915 	mov.w	r9, r5, lsr #16
 8007b60:	fa00 f407 	lsl.w	r4, r0, r7
 8007b64:	fbb3 f8f9 	udiv	r8, r3, r9
 8007b68:	fa1f fe85 	uxth.w	lr, r5
 8007b6c:	fb09 3018 	mls	r0, r9, r8, r3
 8007b70:	0c0b      	lsrs	r3, r1, #16
 8007b72:	fb08 fa0e 	mul.w	sl, r8, lr
 8007b76:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007b7a:	459a      	cmp	sl, r3
 8007b7c:	fa02 f207 	lsl.w	r2, r2, r7
 8007b80:	d940      	bls.n	8007c04 <__udivmoddi4+0x2b4>
 8007b82:	18eb      	adds	r3, r5, r3
 8007b84:	f108 30ff 	add.w	r0, r8, #4294967295	@ 0xffffffff
 8007b88:	d204      	bcs.n	8007b94 <__udivmoddi4+0x244>
 8007b8a:	459a      	cmp	sl, r3
 8007b8c:	d902      	bls.n	8007b94 <__udivmoddi4+0x244>
 8007b8e:	f1a8 0002 	sub.w	r0, r8, #2
 8007b92:	442b      	add	r3, r5
 8007b94:	eba3 030a 	sub.w	r3, r3, sl
 8007b98:	b289      	uxth	r1, r1
 8007b9a:	fbb3 f8f9 	udiv	r8, r3, r9
 8007b9e:	fb09 3318 	mls	r3, r9, r8, r3
 8007ba2:	fb08 fe0e 	mul.w	lr, r8, lr
 8007ba6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007baa:	458e      	cmp	lr, r1
 8007bac:	d92c      	bls.n	8007c08 <__udivmoddi4+0x2b8>
 8007bae:	1869      	adds	r1, r5, r1
 8007bb0:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8007bb4:	d204      	bcs.n	8007bc0 <__udivmoddi4+0x270>
 8007bb6:	458e      	cmp	lr, r1
 8007bb8:	d902      	bls.n	8007bc0 <__udivmoddi4+0x270>
 8007bba:	f1a8 0302 	sub.w	r3, r8, #2
 8007bbe:	4429      	add	r1, r5
 8007bc0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8007bc4:	fba0 9802 	umull	r9, r8, r0, r2
 8007bc8:	eba1 010e 	sub.w	r1, r1, lr
 8007bcc:	4541      	cmp	r1, r8
 8007bce:	46ce      	mov	lr, r9
 8007bd0:	4643      	mov	r3, r8
 8007bd2:	d302      	bcc.n	8007bda <__udivmoddi4+0x28a>
 8007bd4:	d106      	bne.n	8007be4 <__udivmoddi4+0x294>
 8007bd6:	454c      	cmp	r4, r9
 8007bd8:	d204      	bcs.n	8007be4 <__udivmoddi4+0x294>
 8007bda:	ebb9 0e02 	subs.w	lr, r9, r2
 8007bde:	eb68 0305 	sbc.w	r3, r8, r5
 8007be2:	3801      	subs	r0, #1
 8007be4:	2e00      	cmp	r6, #0
 8007be6:	d0a4      	beq.n	8007b32 <__udivmoddi4+0x1e2>
 8007be8:	ebb4 020e 	subs.w	r2, r4, lr
 8007bec:	eb61 0103 	sbc.w	r1, r1, r3
 8007bf0:	fa01 fc0c 	lsl.w	ip, r1, ip
 8007bf4:	fa22 f307 	lsr.w	r3, r2, r7
 8007bf8:	ea4c 0303 	orr.w	r3, ip, r3
 8007bfc:	40f9      	lsrs	r1, r7
 8007bfe:	e9c6 3100 	strd	r3, r1, [r6]
 8007c02:	e796      	b.n	8007b32 <__udivmoddi4+0x1e2>
 8007c04:	4640      	mov	r0, r8
 8007c06:	e7c5      	b.n	8007b94 <__udivmoddi4+0x244>
 8007c08:	4643      	mov	r3, r8
 8007c0a:	e7d9      	b.n	8007bc0 <__udivmoddi4+0x270>

08007c0c <_init>:
 8007c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c0e:	bf00      	nop
 8007c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c12:	bc08      	pop	{r3}
 8007c14:	469e      	mov	lr, r3
 8007c16:	4770      	bx	lr

08007c18 <_fini>:
 8007c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c1a:	bf00      	nop
 8007c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c1e:	bc08      	pop	{r3}
 8007c20:	469e      	mov	lr, r3
 8007c22:	4770      	bx	lr
